#!/usr/bin/env python
# pylint: disable=too-many-lines
import datetime
import os
import sys
import functools

import brownie
from enforce_typing import enforce_types
from web3.middleware import geth_poa_middleware
from util import (
    allocations,
    blockrange,
    calcrewards,
    csvs,
    dispense,
    getrate,
    networkutil,
    query,
)
from util import oceanutil
from util.base18 import fromBase18
from util.constants import BROWNIE_PROJECT as B
from util.networkutil import DEV_CHAINID
from util.oceanutil import (
    recordDeployedContracts,
    OCEANtoken,
    veAllocate,
    create_lock_ve_ocean,
    increase_amount_ve_ocean,
    increase_unlock_time_ve_ocean,
    get_balance_ve_ocean,
    get_lock_end_ve_ocean,
    FeeDistributor
)

brownie.network.web3.middleware_onion.inject(geth_poa_middleware, layer=0)

CHAINID_EXAMPLES = (
    f"{DEV_CHAINID} for development, 1 for (eth) mainnet, 137 for polygon"
)

# ve constants
WEEK = 7 * 86400
MAXTIME = 4 * 365 * 86400  # 4 years

# ========================================================================
HELP_MAIN = f"""Data Farming tool, for use by OPF.

OPF steps:
1. getrate - run per basetoken (OCEAN, H2O)
2. query - run per CHAINID ({DEV_CHAINID}, 1, 137, ..)
   allocations - run once
   vebals - run once
3. calc - run per rewardtoken (store amt per CHAINID): OCEAN (1+137), EWT (246)..
4. dispense - run once

Then LP steps:
5. call DFRewards.claim(), or related

Usage: dftool getrate|query|calc|dispense|..
  
  # init actions
  dftool compile - compile contracts

  # data farming query & calc actions
  dftool query ST FIN NSAMP CSV_DIR CHAINID - query chain, get (symbols, vols)
  dftool nftinfo CSV_DIR CHAINID - Query chain, output nft_info csv
  dftool allocations ST FIN NSAMP CSV_DIR CHAINID - Query chain, outputs allocation csv
  dftool vebals ST FIN NSAMP CSV_DIR CHAINID - Query chain, outputs veBalances csv
  dftool getrate TOKEN_SYMBOL ST FIN CSV_DIR - Get exchange rate, and output rate csv.
  dftool calc CSV_DIR TOT_OCEAN IGNORED - from (nfts, stakes, .., rates), calc rewards
  
  # web3 ops actions
  dftool dispense CSV_DIR [CHAINID] [DFREWARDS_ADDR] [TOKEN_ADDR] - from rewards, dispense funds
  dftool checkpoint_feedist CHAINID - checkpoint FeeDistributor contract
  dftool dispensepassive CHAINID [AMOUNT] - dispense rewards in OCEAN on chainID
  dftool newdfrewards CHAINID - deploy new DFRewards contract
  dftool newdfstrategy CHAINID DFREWARDS_ADDR DFSTRATEGY_NAME - deploy new DFStrategy
  dftool addstrategy CHAINID DFREWARDS_ADDR DFSTRATEGY_ADDR - Add a strategy to DFRewards contract
  dftool retirestrategy CHAINID DFREWARDS_ADDR DFSTRATEGY_ADDR - Retire a strategy from DFRewards contract

  # DFVE User Actions
  dftool createlockveocean CHAINID amount weeks - Lock an amount of OCEAN into veOCEAN for a set number of weeks. (for testing)
  dftool increaselockamountveocean CHAINID amount - Increase the amount of Ocean in existing veOCEAN lock. (for testing)
  dftool increaseunlocktimeveocean CHAINID weeks - Increase the time of Ocean in existing veOCEAN lock. (for testing)
  dftool setveallocation CHAINID amount exchangeId - Allocate weight to veAllocate contract. Set to 0 to reset. (for testing)
  
  # Debug Actions
  dftool manyrandom CHAINID - deploy many random tokens & nfts then consume (for testing)
  dftool mine BLOCKS [TIMEDELTA] - force chain to pass time (ganache only)
  dftool newacct - generate new account
  dftool newtoken CHAINID - generate new token (for testing)
  dftool newveocean CHAINID TOKEN_ADDR - deploy veOcean using TOKEN_ADDR (for testing)
  dftool newveallocate CHAINID - deploy veAllocate (for testing)
  
  # Read Actions
  dftool acctinfo CHAINID ACCOUNT_ADDR [TOKEN_ADDR] - info about an account
  dftool chaininfo CHAINID - info about a network
  dftool getbalanceveocean CHAINID - Returns the total amount of veOCEAN. (for testing)
  dftool getlockendveocean CHAINID - Get end time for veOcean lock (for testing).
  
  # Help Actions
  dftool help - this message

Transactions are signed with envvar 'DFTOOL_KEY`.
"""


@enforce_types
def do_help():
    print(HELP_MAIN)
    sys.exit(0)


# ========================================================================
@enforce_types
def do_query():
    HELP = f"""Query chain, output nftvols & symbols

Usage: dftool query ST FIN NSAMP CSV_DIR CHAINID
  ST -- first block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM
  FIN -- last block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM | latest
  NSAMP -- # blocks to sample liquidity from, from blocks [ST, ST+1, .., FIN]
  CSV_DIR -- output dir for stakes-CHAINID.csv, etc
  CHAINID -- {CHAINID_EXAMPLES}

Uses these envvars:
ADDRESS_FILE -- eg: export ADDRESS_FILE={networkutil.chainIdToAddressFile(chainID=DEV_CHAINID)}
SECRET_SEED -- secret integer used to seed the rng
"""
    if len(sys.argv) not in [2 + 5]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "query"
    ST, FIN, NSAMP = sys.argv[2], sys.argv[3], int(sys.argv[4])
    CSV_DIR = sys.argv[5]
    CHAINID = int(sys.argv[6])
    print("dftool query: Begin")
    print(
        f"Arguments:\n "
        f"\n ST={ST}\n FIN={FIN}\n NSAMP={NSAMP}"
        f"\n CSV_DIR={CSV_DIR}"
        f"\n CHAINID={CHAINID}"
    )

    # extract envvars
    ADDRESS_FILE = _getAddressEnvvarOrExit()
    SECRET_SEED = _getSecretSeedOrExit()

    # check files, prep dir
    if not os.path.exists(CSV_DIR):
        print(f"\nDirectory {CSV_DIR} doesn't exist; nor do rates. Exiting.")
        sys.exit(0)
    if not csvs.rateCsvFilenames(CSV_DIR):
        print("\nRates don't exist. Call 'dftool getrate' first. Exiting.")
        sys.exit(0)

    # brownie setup
    networkutil.connect(CHAINID)
    chain = brownie.network.chain
    rng = blockrange.create_range(chain, ST, FIN, NSAMP, SECRET_SEED)

    recordDeployedContracts(ADDRESS_FILE)
    # main work
    (Vi, SYMi) = query.queryNftvolsAndSymbols(rng, CHAINID)
    csvs.saveNftvolsCsv(Vi, CSV_DIR, CHAINID)
    csvs.saveSymbolsCsv(SYMi, CSV_DIR, CHAINID)

    print("dftool query: Done")


# ========================================================================


@enforce_types
def do_nftinfo():
    HELP = f"""Query chain, output nft info csv
Usage: dftool nftinfo CSV_DIR CHAINID
    CSV_DIR -- output dir for nftinfo-CHAINID.csv
    CHAINID -- {CHAINID_EXAMPLES}
"""
    if len(sys.argv) not in [2 + 2]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "nftinfo"
    CSV_DIR = sys.argv[2]
    CHAINID = int(sys.argv[3])

    # create dir if not exists
    _createDirIfNeeded(CSV_DIR)

    nftinfo = query.queryNftinfo(CHAINID)
    csvs.saveNftinfoCsv(nftinfo, CSV_DIR, CHAINID)

    print("dftool nftinfo: Done")


# ========================================================================


@enforce_types
def do_allocations():
    HELP = f"""Query chain, outputs allocation csv

Usage: dftool allocations ST FIN NSAMP CSV_DIR CHAINID
  ST -- first block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM
  FIN -- last block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM | latest
  NSAMP -- # blocks to sample liquidity from, from blocks [ST, ST+1, .., FIN]
  CSV_DIR -- output dir for stakes-CHAINID.csv, etc
  CHAINID -- {CHAINID_EXAMPLES}

Uses these envvars:
SECRET_SEED -- secret integer used to seed the rng
"""
    if len(sys.argv) not in [7]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "allocations"
    ST, FIN, NSAMP = sys.argv[2], sys.argv[3], int(sys.argv[4])
    CSV_DIR = sys.argv[5]
    CHAINID = int(sys.argv[6])

    # extract envvars
    SECRET_SEED = _getSecretSeedOrExit()

    # create dir if not exists
    _createDirIfNeeded(CSV_DIR)
    _exitIfFileExists(csvs.allocationCsvFilename(CSV_DIR, NSAMP > 1))

    # brownie setup
    networkutil.connect(CHAINID)
    chain = brownie.network.chain

    rng = blockrange.create_range(chain, ST, FIN, NSAMP, SECRET_SEED)

    allocs = query.queryAllocations(rng, CHAINID)
    csvs.saveAllocationCsv(allocs, CSV_DIR, NSAMP > 1)

    print("dftool allocations: Done")


# ========================================================================


@enforce_types
def do_vebals():
    HELP = f"""Query chain, outputs veBalances csv

Usage: dftool vebals ST FIN NSAMP CSV_DIR CHAINID
  ST -- first block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM
  FIN -- last block # to calc on | YYYY-MM-DD | YYYY-MM-DD_HH:MM | latest
  NSAMP -- # blocks to sample liquidity from, from blocks [ST, ST+1, .., FIN]
  CSV_DIR -- output dir for stakes-CHAINID.csv, etc
  CHAINID -- {CHAINID_EXAMPLES}

Uses these envvars:
SECRET_SEED -- secret integer used to seed the rng
"""
    if len(sys.argv) not in [7]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "vebals"
    ST, FIN, NSAMP = sys.argv[2], sys.argv[3], int(sys.argv[4])
    CSV_DIR = sys.argv[5]
    CHAINID = int(sys.argv[6])

    # extract envvars
    SECRET_SEED = _getSecretSeedOrExit()

    # create dir if not exists
    _createDirIfNeeded(CSV_DIR)
    _exitIfFileExists(csvs.vebalsCsvFilename(CSV_DIR, NSAMP > 1))

    # brownie setup
    networkutil.connect(CHAINID)
    chain = brownie.network.chain
    rng = blockrange.create_range(chain, ST, FIN, NSAMP, SECRET_SEED)
    balances = query.queryVebalances(rng, CHAINID)
    csvs.saveVebalsCsv(balances, CSV_DIR, NSAMP > 1)

    print("dftool vebals: Done")


# ========================================================================
@enforce_types
def do_getrate():
    HELP = """Get exchange rate, and output rate csv.

Usage: dftool getrate TOKEN_SYMBOL ST FIN CSV_DIR
  TOKEN_SYMBOL -- e.g. OCEAN, H2O
  ST -- start time -- YYYY-MM-DD
  FIN -- end time -- YYYY-MM-DD
  CSV_DIR -- output directory for rate-TOKEN_SYMBOL.csv file
"""
    if len(sys.argv) not in [2 + 4]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getrate"
    TOKEN_SYMBOL = sys.argv[2]
    ST, FIN = sys.argv[3], sys.argv[4]
    CSV_DIR = sys.argv[5]
    print(f"Arguments: ST={ST}, FIN={FIN}, CSV_DIR={CSV_DIR}")

    # check files, prep dir
    _exitIfFileExists(csvs.rateCsvFilename(TOKEN_SYMBOL, CSV_DIR))
    _createDirIfNeeded(CSV_DIR)

    # main work
    rate = getrate.getrate(TOKEN_SYMBOL, ST, FIN)
    print(f"rate = ${rate:.4f} / {TOKEN_SYMBOL}")
    csvs.saveRateCsv(TOKEN_SYMBOL, rate, CSV_DIR)


# ========================================================================
@enforce_types
def do_calc():
    HELP = """From stakes/vols/rates csvs, output rewards csvs.

Usage: dftool calc CSV_DIR TOT_OCEAN [IGNORED]
  CSV_DIR -- directory: input csvs (stakes, vols, etc), output rewards.csv
  TOT_OCEAN -- total amount of TOKEN to distribute (decimal, not wei)
  IGNORED -- Ignored. This argument is kept for compatibility.
"""

    if len(sys.argv) not in [4, 5]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "calc"
    CSV_DIR = sys.argv[2]
    TOT_OCEAN = float(sys.argv[3])
    print(f"Arguments:\n TOT_OCEAN={TOT_OCEAN}, CSV_DIR={CSV_DIR}")

    # do we have the input files?
    if not csvs.rateCsvFilenames(CSV_DIR):
        print(f"\nNo 'rate*.csv' files in '{CSV_DIR}'. Exiting.")
        sys.exit(0)
    if not csvs.symbolsCsvFilenames(CSV_DIR):
        print(f"\nNo 'symbols*.csv' files in '{CSV_DIR}'. Exiting.")
        sys.exit(0)
    if not csvs.allocationCsvFilename(CSV_DIR):
        print(f"\nNo 'allocation*.csv' file in '{CSV_DIR}'. Exiting.")
        sys.exit(0)
    if not csvs.vebalsCsvFilename(CSV_DIR):
        print(f"\nNo 'veocean*.csv' file in '{CSV_DIR}'. Exiting.")
        sys.exit(0)

    # shouldn't already have the output file
    _exitIfFileExists(csvs.rewardsperlpCsvFilename(CSV_DIR, "OCEAN"))
    _exitIfFileExists(csvs.rewardsinfoCsvFilename(CSV_DIR, "OCEAN"))

    # main work
    stakes = allocations.loadStakes(CSV_DIR)
    nftvols = csvs.loadNftvolsCsvs(CSV_DIR)
    SYM = csvs.loadSymbolsCsvs(CSV_DIR)
    R = csvs.loadRateCsvs(CSV_DIR)

    DCV_OCEAN = calcrewards.totalDcv(nftvols, SYM, R)
    cur_week = calcrewards.getDfWeekNumber(datetime.datetime.now())
    prev_week = cur_week - 1
    m = calcrewards.calcDcvMultiplier(prev_week)
    TOT_OCEAN2 = calcrewards.boundRewardsByDcv(TOT_OCEAN, DCV_OCEAN, prev_week)
    print(
        f"Given prev_week=DF{prev_week}, DCV={DCV_OCEAN} OCEAN: "
        f" multiplier={m}; we bound rewards to {TOT_OCEAN2} OCEAN"
        f" (original value: {TOT_OCEAN} OCEAN)"
    )

    rewardsperlp, rewardsinfo = calcrewards.calcRewards(
        stakes, nftvols, SYM, R, TOT_OCEAN2
    )

    csvs.saveRewardsperlpCsv(rewardsperlp, CSV_DIR, "OCEAN")
    csvs.saveRewardsinfoCsv(rewardsinfo, CSV_DIR, "OCEAN")

    print("dftool calc: Done")


# ========================================================================
@enforce_types
def do_dispense():
    HELP = f"""From rewards csv, dispense funds to chain.

Usage: dftool dispense CSV_DIR [CHAINID] [DFREWARDS_ADDR] [TOKEN_ADDR] [BATCH_NBR]
  CSV_DIR -- input directory for csv rewards file
  CHAINID: CHAINID -- DFRewards contract's network.{CHAINID_EXAMPLES}. If not given, uses 1 (mainnet).
  DFREWARDS_ADDR -- DFRewards contract's address. If not given, uses envvar DFREWARDS_ADDR
  TOKEN_ADDR -- token contract's address. If not given, uses envvar TOKEN_ADDR
  BATCH_NBR -- specify the batch number to run dispense only for that batch. If not given, runs dispense for all batches.

Transactions are signed with envvar 'DFTOOL_KEY`.
"""
    if len(sys.argv) not in [4 + 0, 4 + 1, 4 + 2, 4 + 3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "dispense"
    CSV_DIR = sys.argv[2]

    if len(sys.argv) >= 4:
        CHAINID = int(sys.argv[3])
    else:
        CHAINID = 1

    if len(sys.argv) >= 5:
        DFREWARDS_ADDR = sys.argv[4]
    else:
        print("Set DFREWARDS_ADDR from envvar")
        DFREWARDS_ADDR = os.getenv("DFREWARDS_ADDR")

    if len(sys.argv) >= 6:
        TOKEN_ADDR = sys.argv[5]
    else:
        print("Set TOKEN_ADDR from envvar")
        TOKEN_ADDR = os.getenv("TOKEN_ADDR")

    BATCH_NBR = None
    if len(sys.argv) >= 7:
        BATCH_NBR = int(sys.argv[6])

    print(
        f"Arguments: CSV_DIR={CSV_DIR}, CHAINID={CHAINID}"
        f", DFREWARDS_ADDR={DFREWARDS_ADDR}, TOKEN_ADDR={TOKEN_ADDR}"
        f", BATCH_NBR={BATCH_NBR}"
    )
    assert DFREWARDS_ADDR is not None
    assert TOKEN_ADDR is not None

    # main work
    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    token_symbol = B.Simpletoken.at(TOKEN_ADDR).symbol().upper()
    token_symbol = token_symbol.replace("MOCEAN", "OCEAN")
    rewards = csvs.loadRewardsCsv(CSV_DIR, token_symbol)

    # "flatten" the rewards dict to dispense all chains in one go
    all_rewards = {}
    for chainID in rewards:
        for lp in rewards[chainID]:
            all_rewards[lp] = rewards[chainID][lp]

    # dispense
    dispense.dispense(
        all_rewards,
        DFREWARDS_ADDR,
        TOKEN_ADDR,
        from_account,
        batch_number=BATCH_NBR,
    )

    print("dftool dispense: Done")


# ========================================================================
@enforce_types
def do_dispensepassive():
    HELP = f"""Transfer funds to FeeDistributor contract and kick it off.

Usage: dftool dispensepassive CHAINID [AMOUNT]
  CHAINID -- FeeDistributor contract's network.
  AMOUNT -- amount to transfer and distribute

Transactions are signed with envvar 'DFTOOL_KEY`.
"""
    if len(sys.argv) not in [4]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "dispensepassive"
    CHAINID = int(sys.argv[2])
    AMOUNT = int(sys.argv[3])

    print(
        f"Arguments: CHAINID={CHAINID}"
        f", AMOUNT={AMOUNT}"
    )
    assert AMOUNT is not None

    # extract envvars
    ADDRESS_FILE = _getAddressEnvvarOrExit()

    # main work
    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    recordDeployedContracts(ADDRESS_FILE)

    if AMOUNT > 0 :
        OCEANtoken().transfer(FeeDistributor().address, AMOUNT, {"from": from_account})
    FeeDistributor().checkpoint_token({"from": from_account})
    FeeDistributor().checkpoint_total_supply({"from": from_account})

    print("dftool dispensepassive: Done")


# ========================================================================
@enforce_types
def do_newdfrewards():
    HELP = f"""Deploy new DFRewards contract.

Usage: dftool newdfrewards CHAINID
  CHAINID -- {CHAINID_EXAMPLES}
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "newdfrewards"
    CHAINID = int(sys.argv[2])

    print(f"Arguments: CHAINID={CHAINID}")

    # main work
    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    df_rewards = B.DFRewards.deploy({"from": from_account})
    print(f"New DFRewards contract deployed at address: {df_rewards.address}")

    print("dftool newdfrewards: Done")


# ========================================================================
@enforce_types
def do_newdfstrategy():
    HELP = f"""Deploy new DFStrategy contract.

Usage: dftool newdfstrategy CHAINID DFREWARDS_ADDR DFSTRATEGY_NAME
  CHAINID -- {CHAINID_EXAMPLES}
  DFREWARDS_ADDR -- DFRewards contract address
  DFSTRATEGY_NAME -- DFStrategy contract name
"""
    if len(sys.argv) not in [5]:
        print(HELP)
        sys.exit(0)

    assert sys.argv[1] == "newdfstrategy"
    CHAINID = int(sys.argv[2])
    DFREWARDS_ADDR = sys.argv[3]
    DFSTRATEGY_NAME = sys.argv[4]

    print(f"Arguments: CHAINID={CHAINID}")

    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    df_strategy = B[DFSTRATEGY_NAME].deploy(DFREWARDS_ADDR, {"from": from_account})
    print(f"New DFStrategy contract deployed at address: {df_strategy.address}")

    print("dftool newdfstrategy: Done")


# ========================================================================
@enforce_types
def do_addstrategy():
    HELP = f"""Add a strategy to DFRewards contract.

Usage: dftool addstrategy CHAINID DFREWARDS_ADDR DFSTRATEGY_ADDR
  CHAINID -- {CHAINID_EXAMPLES}
  DFREWARDS_ADDR -- DFRewards contract address
  DFSTRATEGY_ADDR -- DFStrategy contract address
"""
    if len(sys.argv) not in [5]:
        print(HELP)
        sys.exit(0)

    assert sys.argv[1] == "addstrategy"
    CHAINID = int(sys.argv[2])
    DFREWARDS_ADDR = sys.argv[3]
    DFSTRATEGY_ADDR = sys.argv[4]

    print(f"Arguments: CHAINID={CHAINID}")

    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    df_rewards = B.DFRewards.at(DFREWARDS_ADDR)
    tx = df_rewards.addStrategy(DFSTRATEGY_ADDR, {"from": from_account})
    assert tx.events.keys()[0] == "StrategyAdded"

    print(f"Strategy {DFSTRATEGY_ADDR} added to DFRewards {df_rewards.address}")

    print("dftool addstrategy: Done")


# ========================================================================
@enforce_types
def do_retirestrategy():
    HELP = f"""Retire a strategy from DFRewards contract.

Usage: dftool retirestrategy CHAINID DFREWARDS_ADDR DFSTRATEGY_ADDR
  CHAINID -- {CHAINID_EXAMPLES}
  DFREWARDS_ADDR -- DFRewards contract address
  DFSTRATEGY_ADDR -- DFStrategy contract address
"""
    if len(sys.argv) not in [5]:
        print(HELP)
        sys.exit(0)

    assert sys.argv[1] == "retirestrategy"
    CHAINID = int(sys.argv[2])
    DFREWARDS_ADDR = sys.argv[3]
    DFSTRATEGY_ADDR = sys.argv[4]

    print(f"Arguments: CHAINID={CHAINID}")

    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    df_rewards = B.DFRewards.at(DFREWARDS_ADDR)
    tx = df_rewards.retireStrategy(DFSTRATEGY_ADDR, {"from": from_account})
    assert tx.events.keys()[0] == "StrategyRetired"
    print(f"Strategy {DFSTRATEGY_ADDR} retired from DFRewards {df_rewards.address}")

    print("dftool addstrategy: Done")


# ========================================================================
@enforce_types
def do_compile():
    HELP = """Compile contracts

Usage: dftool compile
"""
    if len(sys.argv) not in [2]:
        print(HELP)
        sys.exit(0)

    os.system("brownie compile")


# ========================================================================
@enforce_types
def do_manyrandom():
    # UPADATE THIS
    HELP = f"""Deploy many random tokens & nfts then consume (for testing)

Usage: dftool manyrandom CHAINID
  CHAINID -- {CHAINID_EXAMPLES}

Uses these envvars:
ADDRESS_FILE -- eg: export ADDRESS_FILE={networkutil.chainIdToAddressFile(chainID=DEV_CHAINID)}
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    from util import oceantestutil  # pylint: disable=import-outside-toplevel

    # extract inputs
    assert sys.argv[1] == "manyrandom"
    CHAINID = int(sys.argv[2])
    print("dftool manyrandom: Begin")
    print(f"Arguments: CHAINID={CHAINID}")

    if CHAINID != DEV_CHAINID:
        # To support other testnets, they need to fillAccountsWithOcean()
        # Consider this a TODO:)
        print("Only ganache is currently supported. Exiting.")
        sys.exit(0)

    # extract envvars
    ADDRESS_FILE = _getAddressEnvvarOrExit()

    # brownie setup
    networkutil.connect(CHAINID)

    # main work
    recordDeployedContracts(ADDRESS_FILE)
    oceantestutil.fillAccountsWithOCEAN()
    num_nfts = 10  # magic number
    
    # This fn was deprecated, replace.
    # oceantestutil.randomDeployTokensAndPoolsThenConsume(num_pools, OCEANtoken())
    print(f"dftool manyrandom: Done. {num_nfts} new nfts created.")


# ========================================================================
@enforce_types
def do_mine():
    HELP = """Force chain to pass time (ganache only).

Usage: dftool mine BLOCKS [TIMEDELTA]
  BLOCKS -- e.g. 3
  TIMEDELTA -- e.g. 100
"""
    if len(sys.argv) not in [3, 4]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "mine"
    BLOCKS = int(sys.argv[2])
    if len(sys.argv) == 4:
        TIMEDELTA = int(sys.argv[3])
    else:
        TIMEDELTA = None

    print(f"Arguments: BLOCKS={BLOCKS}, TIMEDELTA={TIMEDELTA}")

    # main work
    networkutil.connect(DEV_CHAINID)
    chain = brownie.network.chain
    if TIMEDELTA is None:
        chain.mine(blocks=BLOCKS, timedelta=TIMEDELTA)
    else:
        chain.mine(blocks=BLOCKS)

    print("dftool mine: Done")


# ========================================================================
@enforce_types
def do_newacct():
    HELP = """Generate new account.

Usage: dftool newacct
"""
    if len(sys.argv) not in [2]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "newacct"

    # main work
    networkutil.connect(DEV_CHAINID)
    account = brownie.network.accounts.add()
    print("Generated new account:")
    print(f" private_key = {account.private_key}")
    print(f" address = {account.address}")
    print(f" For other dftools: export DFTOOL_KEY={account.private_key}")


# ========================================================================
@enforce_types
def do_newtoken():
    HELP = """Generate new token (for testing).

Usage: dftool newtoken CHAINID
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "newtoken"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    # main work
    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    token = B.Simpletoken.deploy("TST", "Test Token", 18, 1e21, {"from": from_account})
    print(f"Token '{token.symbol()}' deployed at address: {token.address}")


# ========================================================================
@enforce_types
def do_newveocean():
    HELP = """Generate new veOcean (for testing).

Usage: dftool newveocean CHAINID TOKEN_ADDR
"""
    if len(sys.argv) not in [4]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "newveocean"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    TOKEN_ADDR = str(sys.argv[3])
    print(f"Arguments:\n TOKEN_ADDR={TOKEN_ADDR}")

    # main work
    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()

    # deploy veOcean
    veOcean = B.veOcean.deploy(
        TOKEN_ADDR, "veOCEAN", "veOCEAN", "0.1", {"from": from_account}
    )
    # pylint: disable=line-too-long
    print(
        f"veOcean '{veOcean.symbol()}' deployed at address: {veOcean.address} with token parameter pointing at: {veOcean.token}"
    )


# ========================================================================
@enforce_types
def do_createlockveocean():
    HELP = """Lock Ocean (for testing).
    
Usage: dftool createlockveocean CHAINID amount weeks
"""
    if len(sys.argv) not in [5]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "createlockveocean"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    amount = float(sys.argv[3])
    print(f"Arguments:\n amount={amount}")

    weeks = int(sys.argv[4])
    print(f"Arguments:\n weeks={weeks}")

    # main work
    networkutil.connect(CHAINID)
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        from_account = _getPrivateAccount()
        
        # Lock ocean for a certain number of weeks
        end_time = brownie.network.chain.time() + WEEK * weeks
    
        ve_balance = get_balance_ve_ocean(from_account)
        print(f"before: veOCEAN balance: {ve_balance}")
        
        create_lock_ve_ocean(amount, end_time, from_account)
        
        ve_balance = get_balance_ve_ocean(from_account)
        print(f"after: veOCEAN balance: {ve_balance}")


# ========================================================================
@enforce_types
def do_increaseunlocktimeveocean():
    HELP = """Increase the time of Ocean locked inside veOcean (for testing).
    
Usage: dftool increaseunlocktimeveocean CHAINID weeks
"""
    if len(sys.argv) not in [4]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "increaseunlocktimeveocean"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    weeks = int(sys.argv[3])
    print(f"Arguments:\n weeks={weeks}")

    # main work
    networkutil.connect(CHAINID)
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        from_account = _getPrivateAccount()
        
        # Lock ocean for a certain number of weeks
        end_time = brownie.network.chain.time() + WEEK * weeks

        ve_lock_end = get_lock_end_ve_ocean(from_account)
        print(f"before: veOCEAN lock end: {ve_lock_end}")

        increase_unlock_time_ve_ocean(end_time, from_account)

        ve_lock_end = get_lock_end_ve_ocean(from_account)
        print(f"after: veOCEAN lock end: {ve_lock_end}")


# ========================================================================
@enforce_types
def do_increaselockamountveocean():
    HELP = """Increase the amount of Ocean locked inside veOcean (for testing).
    
Usage: dftool increaselockamountveocean CHAINID amount
"""
    if len(sys.argv) not in [4]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "increaselockamountveocean"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    amount = float(sys.argv[3])
    print(f"Arguments:\n amount={amount}")

    # main work
    networkutil.connect(CHAINID)
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        from_account = _getPrivateAccount()
        
        ve_balance = get_balance_ve_ocean(from_account)
        print(f"before: veOCEAN balance: {ve_balance}")
        
        increase_amount_ve_ocean(amount, from_account)
        
        ve_balance = get_balance_ve_ocean(from_account)
        print(f"after: veOCEAN balance: {ve_balance}")


# ========================================================================
@enforce_types
def do_getlockendveocean():
    HELP = """Get end time for veOcean lock (for testing).
    
Usage: dftool getlockendveocean CHAINID
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getlockendveocean"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    # main work
    networkutil.connect(CHAINID)
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        from_account = _getPrivateAccount()
        
        ve_lock_end = get_lock_end_ve_ocean(from_account)
        print(f"veOCEAN lock end time: {ve_lock_end}")


# ========================================================================
@enforce_types
def do_newveallocate():
    HELP = """Generate new veAllocate (for testing).

Usage: dftool newveallocate CHAINID
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "newveallocate"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    # main work
    networkutil.connect(CHAINID)
    from_account = _getPrivateAccount()
    contract = B.veAllocate.deploy({"from": from_account})
    print(f"veAllocate contract deployed at: {contract.address}")


# ========================================================================
@enforce_types
def do_getbalanceveocean():
    HELP = """Get veOcean balance on a specific chain (for testing).
    
Usage: dftool getbalanceveocean CHAINID
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "getbalanceveocean"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    # main work
    networkutil.connect(CHAINID)
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        from_account = _getPrivateAccount()
        veBalance = get_balance_ve_ocean(from_account)
        print(f"veOCEAN balance: {veBalance}")


# ========================================================================
@enforce_types
def do_setveallocation():
    HELP = """Allocate weight to veAllocate contract (for testing).
    Set to 0 to trigger resetAllocation event.

Usage: dftool setveallocation CHAINID amount exchangeId
"""
    if len(sys.argv) not in [5]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "setveallocation"
    CHAINID = int(sys.argv[2])
    print(f"Arguments:\n CHAINID={CHAINID}")

    amount = float(sys.argv[3])
    print(f"Arguments:\n amount={amount}")

    exchangeId = str(sys.argv[4])
    print(f"Arguments:\n exchangeId={exchangeId}")

    # main work
    networkutil.connect(CHAINID)
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        from_account = _getPrivateAccount()
        veAllocate().setAllocation(amount, exchangeId, CHAINID, {"from": from_account})
        allocation = veAllocate().getTotalAllocation(from_account)
        print(f"amount allocated: {allocation}")


# ========================================================================
@enforce_types
def do_acctinfo():
    HELP = f"""Info about an account.

Usage: dftool acctinfo CHAINID ACCOUNT_ADDR [TOKEN_ADDR]
  CHAINID -- {CHAINID_EXAMPLES}
  ACCOUNT_ADDR -- e.g. '0x987...' or '4'. If the latter, uses accounts[i]
  TOKEN_ADDR -- e.g. '0x123..'

If envvar ADDRESS_FILE is not None, it gives balance for OCEAN token too.
"""
    if len(sys.argv) not in [4, 5]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "acctinfo"
    CHAINID = int(sys.argv[2])
    ACCOUNT_ADDR = sys.argv[3]
    TOKEN_ADDR = sys.argv[4] if len(sys.argv) >= 5 else None

    # do work
    print("Account info:")
    networkutil.connect(CHAINID)
    if len(str(ACCOUNT_ADDR)) == 1:
        addr_i = int(ACCOUNT_ADDR)
        ACCOUNT_ADDR = brownie.accounts[addr_i]
    print(f"  Address = {ACCOUNT_ADDR}")

    if TOKEN_ADDR is not None:
        token = B.Simpletoken.at(TOKEN_ADDR)
        balance = token.balanceOf(ACCOUNT_ADDR)
        print(f"  {fromBase18(balance)} {token.symbol()}")

    # Give balance for OCEAN token too.
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is not None:
        recordDeployedContracts(ADDRESS_FILE)
        OCEAN = OCEANtoken()
        if OCEAN.address != TOKEN_ADDR:
            print(f"  {fromBase18(OCEAN.balanceOf(ACCOUNT_ADDR))} OCEAN")


# ========================================================================
@enforce_types
def do_chaininfo():
    HELP = f"""Info about a network.

Usage: dftool chaininfo CHAINID
  CHAINID -- {CHAINID_EXAMPLES}
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    # extract inputs
    assert sys.argv[1] == "chaininfo"
    CHAINID = int(sys.argv[2])

    # do work
    networkutil.connect(CHAINID)
    # blocks = len(brownie.network.chain)
    print("\nChain info:")
    print(f"  # blocks: {len(brownie.network.chain)}")


# ========================================================================
@enforce_types
def do_checkpoint_feedist():
    HELP = f"""Checkpoint FeeDistributor contract.

Usage: dftool checkpoint_feedist CHAINID
    CHAINID -- {CHAINID_EXAMPLES}
"""
    if len(sys.argv) not in [3]:
        print(HELP)
        sys.exit(0)

    CHAINID = int(sys.argv[2])
    networkutil.connect(CHAINID)

    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    if ADDRESS_FILE is None:
        print("ADDRESS_FILE not set")
        sys.exit(1)

    recordDeployedContracts(ADDRESS_FILE)
    from_account = _getPrivateAccount()
    
    # Checkpoint
    FeeDistributor().checkpoint_total_supply({"from": from_account})
    FeeDistributor().checkpoint_token({"from": from_account})

    print("Checkpointed FeeDistributor")


# ========================================================================
# utilities


def _exitIfFileExists(filename: str):
    if os.path.exists(filename):
        print(f"\nFile {filename} exists. Exiting.")
        sys.exit(0)


def _createDirIfNeeded(dir_: str):
    if not os.path.exists(dir_):
        print(f"Directory {dir_} did not exist, so created it")
        os.mkdir(dir_)


def _getAddressEnvvarOrExit() -> str:
    ADDRESS_FILE = os.environ.get("ADDRESS_FILE")
    print(f"Envvar:\n ADDRESS_FILE={ADDRESS_FILE}")
    if ADDRESS_FILE is None:
        print(
            "\nNeed to set envvar ADDRESS_FILE. Exiting. "
            f"\nEg: export ADDRESS_FILE={networkutil.chainIdToAddressFile(chainID=DEV_CHAINID)}"
        )
        sys.exit(0)
    return ADDRESS_FILE


def _getSecretSeedOrExit() -> int:
    SECRET_SEED = os.environ.get("SECRET_SEED")
    print(f"Envvar:\n SECRET_SEED={SECRET_SEED}")
    if SECRET_SEED is None:
        print("\nNeed to set envvar SECRET_SEED. Exiting. \nEg: export SECRET_SEED=1")
        sys.exit(0)
    return int(SECRET_SEED)


@enforce_types
def _getPrivateAccount():
    private_key = os.getenv("DFTOOL_KEY")
    assert private_key is not None, "Need to set envvar DFTOOL_KEY"
    account = brownie.network.accounts.add(private_key=private_key)
    print(f"For private key DFTOOL_KEY, address is: {account.address}")
    return account


# ========================================================================
# main
@enforce_types
def do_main():
    # if help
    if len(sys.argv) == 1 or sys.argv[1] == "help":
        do_help()
    # init actions
    elif sys.argv[1] == "compile":
        do_compile()
    # data farming query & calc actions
    elif sys.argv[1] == "query":
        do_query()
    elif sys.argv[1] == "nftinfo":
        do_nftinfo()
    elif sys.argv[1] == "allocations":
        do_allocations()
    elif sys.argv[1] == "vebals":
        do_vebals()
    elif sys.argv[1] == "getrate":
        do_getrate()
    elif sys.argv[1] == "calc":
        do_calc()
    # web3 ops actions
    elif sys.argv[1] == "dispense":
        do_dispense()
    elif sys.argv[1] == "checkpoint_feedist":
        do_checkpoint_feedist()
    elif sys.argv[1] == "dispensepassive":
        do_dispensepassive()
    elif sys.argv[1] == "newdfrewards":
        do_newdfrewards()
    elif sys.argv[1] == "newdfstrategy":
        do_newdfstrategy()
    elif sys.argv[1] == "addstrategy":
        do_addstrategy()
    elif sys.argv[1] == "retirestrategy":
        do_retirestrategy()
    # dfve user actions
    elif sys.argv[1] == "createlockveocean":
        do_createlockveocean()
    elif sys.argv[1] == "increaseunlocktimeveocean":
        do_increaseunlocktimeveocean()
    elif sys.argv[1] == "increaselockamountveocean":
        do_increaselockamountveocean()
    elif sys.argv[1] == "setveallocation":
        do_setveallocation()
    # read actions
    elif sys.argv[1] == "acctinfo":
        do_acctinfo()
    elif sys.argv[1] == "chaininfo":
        do_chaininfo()
    elif sys.argv[1] == "getbalanceveocean":
        do_getbalanceveocean()
    elif sys.argv[1] == "getlockendveocean":
        do_getlockendveocean()
    # debug actions
    elif sys.argv[1] == "manyrandom":
        do_manyrandom()
    elif sys.argv[1] == "mine":
        do_mine()
    elif sys.argv[1] == "newacct":
        do_newacct()
    elif sys.argv[1] == "newtoken":
        do_newtoken()
    elif sys.argv[1] == "newveocean":
        do_newveocean()
    elif sys.argv[1] == "newveallocate":
        do_newveallocate()
    # default to help
    else:
        do_help()
    

if __name__ == "__main__":
    do_main()
