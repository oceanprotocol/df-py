{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "22": "contracts/oceanv4/interfaces/IERC20.sol",
    "48": "contracts/oceanv4/utils/ERC721/Context.sol",
    "65": "contracts/oceanv4/utils/mock/MockERC20Decimals.sol"
  },
  "ast": {
    "absolutePath": "contracts/oceanv4/utils/mock/MockERC20Decimals.sol",
    "exportedSymbols": {
      "Context": [
        21904
      ],
      "IERC20": [
        3084
      ],
      "MockERC20Decimals": [
        26419
      ]
    },
    "id": 26420,
    "license": "(Apache-2.0 AND CC-BY-4.0)",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 25866,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:65"
      },
      {
        "absolutePath": "contracts/oceanv4/interfaces/IERC20.sol",
        "file": "../../interfaces/IERC20.sol",
        "id": 25867,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 26420,
        "sourceUnit": 3085,
        "src": "186:37:65",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/oceanv4/utils/ERC721/Context.sol",
        "file": "../ERC721/Context.sol",
        "id": 25868,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 26420,
        "sourceUnit": 21905,
        "src": "225:31:65",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 25870,
              "name": "Context",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21904,
              "src": "1461:7:65"
            },
            "id": 25871,
            "nodeType": "InheritanceSpecifier",
            "src": "1461:7:65"
          },
          {
            "baseName": {
              "id": 25872,
              "name": "IERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3084,
              "src": "1470:6:65"
            },
            "id": 25873,
            "nodeType": "InheritanceSpecifier",
            "src": "1470:6:65"
          }
        ],
        "canonicalName": "MockERC20Decimals",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 25869,
          "nodeType": "StructuredDocumentation",
          "src": "258:1172:65",
          "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
        },
        "fullyImplemented": true,
        "id": 26419,
        "linearizedBaseContracts": [
          26419,
          3084,
          21904
        ],
        "name": "MockERC20Decimals",
        "nameLocation": "1440:17:65",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 25877,
            "mutability": "mutable",
            "name": "_balances",
            "nameLocation": "1519:9:65",
            "nodeType": "VariableDeclaration",
            "scope": 26419,
            "src": "1483:45:65",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 25876,
              "keyType": {
                "id": 25874,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1491:7:65",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1483:27:65",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 25875,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1502:7:65",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 25883,
            "mutability": "mutable",
            "name": "_allowances",
            "nameLocation": "1591:11:65",
            "nodeType": "VariableDeclaration",
            "scope": 26419,
            "src": "1535:67:65",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
              "typeString": "mapping(address => mapping(address => uint256))"
            },
            "typeName": {
              "id": 25882,
              "keyType": {
                "id": 25878,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1543:7:65",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1535:47:65",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                "typeString": "mapping(address => mapping(address => uint256))"
              },
              "valueType": {
                "id": 25881,
                "keyType": {
                  "id": 25879,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1562:7:65",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "1554:27:65",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "valueType": {
                  "id": 25880,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1573:7:65",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 25885,
            "mutability": "mutable",
            "name": "_totalSupply",
            "nameLocation": "1625:12:65",
            "nodeType": "VariableDeclaration",
            "scope": 26419,
            "src": "1609:28:65",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 25884,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1609:7:65",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 25887,
            "mutability": "mutable",
            "name": "_name",
            "nameLocation": "1659:5:65",
            "nodeType": "VariableDeclaration",
            "scope": 26419,
            "src": "1644:20:65",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 25886,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1644:6:65",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 25889,
            "mutability": "mutable",
            "name": "_symbol",
            "nameLocation": "1685:7:65",
            "nodeType": "VariableDeclaration",
            "scope": 26419,
            "src": "1670:22:65",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 25888,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1670:6:65",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 25891,
            "mutability": "mutable",
            "name": "_decimals",
            "nameLocation": "1712:9:65",
            "nodeType": "VariableDeclaration",
            "scope": 26419,
            "src": "1698:23:65",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 25890,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "1698:5:65",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 25919,
              "nodeType": "Block",
              "src": "2104:121:65",
              "statements": [
                {
                  "expression": {
                    "id": 25903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 25901,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25887,
                      "src": "2114:5:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 25902,
                      "name": "name_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25894,
                      "src": "2122:5:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2114:13:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 25904,
                  "nodeType": "ExpressionStatement",
                  "src": "2114:13:65"
                },
                {
                  "expression": {
                    "id": 25907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 25905,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25889,
                      "src": "2137:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 25906,
                      "name": "symbol_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25896,
                      "src": "2147:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2137:17:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 25908,
                  "nodeType": "ExpressionStatement",
                  "src": "2137:17:65"
                },
                {
                  "expression": {
                    "id": 25911,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 25909,
                      "name": "_decimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25891,
                      "src": "2164:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 25910,
                      "name": "decimals_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25898,
                      "src": "2176:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "src": "2164:21:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 25912,
                  "nodeType": "ExpressionStatement",
                  "src": "2164:21:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 25914,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2201:3:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 25915,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2201:10:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "hexValue": "3130653232",
                        "id": 25916,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2212:5:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                          "typeString": "int_const 100000000000000000000000"
                        },
                        "value": "10e22"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_rational_100000000000000000000000_by_1",
                          "typeString": "int_const 100000000000000000000000"
                        }
                      ],
                      "id": 25913,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26279,
                      "src": "2195:5:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 25917,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2195:23:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25918,
                  "nodeType": "ExpressionStatement",
                  "src": "2195:23:65"
                }
              ]
            },
            "documentation": {
              "id": 25892,
              "nodeType": "StructuredDocumentation",
              "src": "1728:298:65",
              "text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
            },
            "id": 25920,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 25899,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25894,
                  "mutability": "mutable",
                  "name": "name_",
                  "nameLocation": "2057:5:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 25920,
                  "src": "2043:19:65",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 25893,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2043:6:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25896,
                  "mutability": "mutable",
                  "name": "symbol_",
                  "nameLocation": "2078:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 25920,
                  "src": "2064:21:65",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 25895,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2064:6:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25898,
                  "mutability": "mutable",
                  "name": "decimals_",
                  "nameLocation": "2093:9:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 25920,
                  "src": "2087:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 25897,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "2087:5:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2042:61:65"
            },
            "returnParameters": {
              "id": 25900,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2104:0:65"
            },
            "scope": 26419,
            "src": "2031:194:65",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 25928,
              "nodeType": "Block",
              "src": "2350:29:65",
              "statements": [
                {
                  "expression": {
                    "id": 25926,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25887,
                    "src": "2367:5:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 25925,
                  "id": 25927,
                  "nodeType": "Return",
                  "src": "2360:12:65"
                }
              ]
            },
            "documentation": {
              "id": 25921,
              "nodeType": "StructuredDocumentation",
              "src": "2231:54:65",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 25929,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "2299:4:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 25922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2303:2:65"
            },
            "returnParameters": {
              "id": 25925,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25924,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25929,
                  "src": "2335:13:65",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 25923,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2335:6:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2334:15:65"
            },
            "scope": 26419,
            "src": "2290:89:65",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 25937,
              "nodeType": "Block",
              "src": "2554:31:65",
              "statements": [
                {
                  "expression": {
                    "id": 25935,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25889,
                    "src": "2571:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 25934,
                  "id": 25936,
                  "nodeType": "Return",
                  "src": "2564:14:65"
                }
              ]
            },
            "documentation": {
              "id": 25930,
              "nodeType": "StructuredDocumentation",
              "src": "2385:102:65",
              "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
            },
            "functionSelector": "95d89b41",
            "id": 25938,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nameLocation": "2501:6:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 25931,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2507:2:65"
            },
            "returnParameters": {
              "id": 25934,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25933,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25938,
                  "src": "2539:13:65",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 25932,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2539:6:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2538:15:65"
            },
            "scope": 26419,
            "src": "2492:93:65",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3009
            ],
            "body": {
              "id": 25947,
              "nodeType": "Block",
              "src": "3274:33:65",
              "statements": [
                {
                  "expression": {
                    "id": 25945,
                    "name": "_decimals",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25891,
                    "src": "3291:9:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "functionReturnParameters": 25944,
                  "id": 25946,
                  "nodeType": "Return",
                  "src": "3284:16:65"
                }
              ]
            },
            "documentation": {
              "id": 25939,
              "nodeType": "StructuredDocumentation",
              "src": "2591:613:65",
              "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "functionSelector": "313ce567",
            "id": 25948,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decimals",
            "nameLocation": "3218:8:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 25941,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3236:8:65"
            },
            "parameters": {
              "id": 25940,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3226:2:65"
            },
            "returnParameters": {
              "id": 25944,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25943,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25948,
                  "src": "3267:5:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 25942,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "3267:5:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3266:7:65"
            },
            "scope": 26419,
            "src": "3209:98:65",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3015
            ],
            "body": {
              "id": 25957,
              "nodeType": "Block",
              "src": "3437:36:65",
              "statements": [
                {
                  "expression": {
                    "id": 25955,
                    "name": "_totalSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 25885,
                    "src": "3454:12:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 25954,
                  "id": 25956,
                  "nodeType": "Return",
                  "src": "3447:19:65"
                }
              ]
            },
            "documentation": {
              "id": 25949,
              "nodeType": "StructuredDocumentation",
              "src": "3313:49:65",
              "text": " @dev See {IERC20-totalSupply}."
            },
            "functionSelector": "18160ddd",
            "id": 25958,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalSupply",
            "nameLocation": "3376:11:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 25951,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3410:8:65"
            },
            "parameters": {
              "id": 25950,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3387:2:65"
            },
            "returnParameters": {
              "id": 25954,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25953,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25958,
                  "src": "3428:7:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 25952,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3428:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3427:9:65"
            },
            "scope": 26419,
            "src": "3367:106:65",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3023
            ],
            "body": {
              "id": 25971,
              "nodeType": "Block",
              "src": "3614:42:65",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 25967,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25877,
                      "src": "3631:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 25969,
                    "indexExpression": {
                      "id": 25968,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25961,
                      "src": "3641:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3631:18:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 25966,
                  "id": 25970,
                  "nodeType": "Return",
                  "src": "3624:25:65"
                }
              ]
            },
            "documentation": {
              "id": 25959,
              "nodeType": "StructuredDocumentation",
              "src": "3479:47:65",
              "text": " @dev See {IERC20-balanceOf}."
            },
            "functionSelector": "70a08231",
            "id": 25972,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "balanceOf",
            "nameLocation": "3540:9:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 25963,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3587:8:65"
            },
            "parameters": {
              "id": 25962,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25961,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3558:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 25972,
                  "src": "3550:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25960,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3550:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3549:17:65"
            },
            "returnParameters": {
              "id": 25966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25965,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25972,
                  "src": "3605:7:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 25964,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3605:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3604:9:65"
            },
            "scope": 26419,
            "src": "3531:125:65",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3033
            ],
            "body": {
              "id": 25992,
              "nodeType": "Block",
              "src": "3951:80:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 25984,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21892,
                          "src": "3971:10:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 25985,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3971:12:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 25986,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25975,
                        "src": "3985:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 25987,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25977,
                        "src": "3996:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 25983,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26223,
                      "src": "3961:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 25988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3961:42:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 25989,
                  "nodeType": "ExpressionStatement",
                  "src": "3961:42:65"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 25990,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4020:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 25982,
                  "id": 25991,
                  "nodeType": "Return",
                  "src": "4013:11:65"
                }
              ]
            },
            "documentation": {
              "id": 25973,
              "nodeType": "StructuredDocumentation",
              "src": "3662:192:65",
              "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `recipient` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
            },
            "functionSelector": "a9059cbb",
            "id": 25993,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transfer",
            "nameLocation": "3868:8:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 25979,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3927:8:65"
            },
            "parameters": {
              "id": 25978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25975,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "3885:9:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 25993,
                  "src": "3877:17:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25974,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3877:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25977,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3904:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 25993,
                  "src": "3896:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 25976,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3896:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3876:35:65"
            },
            "returnParameters": {
              "id": 25982,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25981,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 25993,
                  "src": "3945:4:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 25980,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3945:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3944:6:65"
            },
            "scope": 26419,
            "src": "3859:172:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3043
            ],
            "body": {
              "id": 26010,
              "nodeType": "Block",
              "src": "4187:51:65",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 26004,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25883,
                        "src": "4204:11:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 26006,
                      "indexExpression": {
                        "id": 26005,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25996,
                        "src": "4216:5:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4204:18:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 26008,
                    "indexExpression": {
                      "id": 26007,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25998,
                      "src": "4223:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4204:27:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 26003,
                  "id": 26009,
                  "nodeType": "Return",
                  "src": "4197:34:65"
                }
              ]
            },
            "documentation": {
              "id": 25994,
              "nodeType": "StructuredDocumentation",
              "src": "4037:47:65",
              "text": " @dev See {IERC20-allowance}."
            },
            "functionSelector": "dd62ed3e",
            "id": 26011,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allowance",
            "nameLocation": "4098:9:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 26000,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4160:8:65"
            },
            "parameters": {
              "id": 25999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 25996,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "4116:5:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26011,
                  "src": "4108:13:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25995,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4108:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 25998,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "4131:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26011,
                  "src": "4123:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 25997,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4123:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4107:32:65"
            },
            "returnParameters": {
              "id": 26003,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26002,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26011,
                  "src": "4178:7:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26001,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4178:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4177:9:65"
            },
            "scope": 26419,
            "src": "4089:149:65",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3053
            ],
            "body": {
              "id": 26031,
              "nodeType": "Block",
              "src": "4465:77:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 26023,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21892,
                          "src": "4484:10:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 26024,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4484:12:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26025,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26014,
                        "src": "4498:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26026,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26016,
                        "src": "4507:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26022,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26396,
                      "src": "4475:8:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26027,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4475:39:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26028,
                  "nodeType": "ExpressionStatement",
                  "src": "4475:39:65"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 26029,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4531:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 26021,
                  "id": 26030,
                  "nodeType": "Return",
                  "src": "4524:11:65"
                }
              ]
            },
            "documentation": {
              "id": 26012,
              "nodeType": "StructuredDocumentation",
              "src": "4244:127:65",
              "text": " @dev See {IERC20-approve}.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "095ea7b3",
            "id": 26032,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approve",
            "nameLocation": "4385:7:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 26018,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4441:8:65"
            },
            "parameters": {
              "id": 26017,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26014,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "4401:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26032,
                  "src": "4393:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26013,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4393:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26016,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4418:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26032,
                  "src": "4410:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26015,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4410:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4392:33:65"
            },
            "returnParameters": {
              "id": 26021,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26020,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26032,
                  "src": "4459:4:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26019,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4459:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4458:6:65"
            },
            "scope": 26419,
            "src": "4376:166:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              3065
            ],
            "body": {
              "id": 26079,
              "nodeType": "Block",
              "src": "5151:336:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26046,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26035,
                        "src": "5171:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26047,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26037,
                        "src": "5179:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26048,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26039,
                        "src": "5190:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26045,
                      "name": "_transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26223,
                      "src": "5161:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26049,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5161:36:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26050,
                  "nodeType": "ExpressionStatement",
                  "src": "5161:36:65"
                },
                {
                  "assignments": [
                    26052
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26052,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nameLocation": "5216:16:65",
                      "nodeType": "VariableDeclaration",
                      "scope": 26079,
                      "src": "5208:24:65",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26051,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5208:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26059,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 26053,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25883,
                        "src": "5235:11:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 26055,
                      "indexExpression": {
                        "id": 26054,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26035,
                        "src": "5247:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5235:19:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 26058,
                    "indexExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 26056,
                        "name": "_msgSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21892,
                        "src": "5255:10:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 26057,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5255:12:65",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5235:33:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5208:60:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26063,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26061,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26052,
                          "src": "5286:16:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 26062,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26039,
                          "src": "5306:6:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5286:26:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
                        "id": 26064,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5314:42:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        },
                        "value": "ERC20: transfer amount exceeds allowance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
                        }
                      ],
                      "id": 26060,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5278:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26065,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5278:79:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26066,
                  "nodeType": "ExpressionStatement",
                  "src": "5278:79:65"
                },
                {
                  "id": 26076,
                  "nodeType": "UncheckedBlock",
                  "src": "5367:92:65",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 26068,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26035,
                            "src": "5400:6:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 26069,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21892,
                              "src": "5408:10:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 26070,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5408:12:65",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 26073,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 26071,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26052,
                              "src": "5422:16:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 26072,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26039,
                              "src": "5441:6:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5422:25:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 26067,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26396,
                          "src": "5391:8:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 26074,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5391:57:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 26075,
                      "nodeType": "ExpressionStatement",
                      "src": "5391:57:65"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 26077,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "5476:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 26044,
                  "id": 26078,
                  "nodeType": "Return",
                  "src": "5469:11:65"
                }
              ]
            },
            "documentation": {
              "id": 26033,
              "nodeType": "StructuredDocumentation",
              "src": "4548:456:65",
              "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n Requirements:\n - `sender` and `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`.\n - the caller must have allowance for ``sender``'s tokens of at least\n `amount`."
            },
            "functionSelector": "23b872dd",
            "id": 26080,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "transferFrom",
            "nameLocation": "5018:12:65",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 26041,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5127:8:65"
            },
            "parameters": {
              "id": 26040,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26035,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "5048:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26080,
                  "src": "5040:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26034,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5040:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26037,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "5072:9:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26080,
                  "src": "5064:17:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26036,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5064:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26039,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "5099:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26080,
                  "src": "5091:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26038,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5091:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5030:81:65"
            },
            "returnParameters": {
              "id": 26044,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26043,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26080,
                  "src": "5145:4:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26042,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5145:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5144:6:65"
            },
            "scope": 26419,
            "src": "5009:478:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 26106,
              "nodeType": "Block",
              "src": "5976:118:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 26091,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21892,
                          "src": "5995:10:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 26092,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5995:12:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26093,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26083,
                        "src": "6009:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 26094,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 25883,
                              "src": "6018:11:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 26097,
                            "indexExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 26095,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21892,
                                "src": "6030:10:65",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 26096,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6030:12:65",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6018:25:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 26099,
                          "indexExpression": {
                            "id": 26098,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26083,
                            "src": "6044:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6018:34:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "id": 26100,
                          "name": "addedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26085,
                          "src": "6055:10:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6018:47:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26090,
                      "name": "_approve",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26396,
                      "src": "5986:8:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5986:80:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26103,
                  "nodeType": "ExpressionStatement",
                  "src": "5986:80:65"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 26104,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6083:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 26089,
                  "id": 26105,
                  "nodeType": "Return",
                  "src": "6076:11:65"
                }
              ]
            },
            "documentation": {
              "id": 26081,
              "nodeType": "StructuredDocumentation",
              "src": "5493:384:65",
              "text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
            },
            "functionSelector": "39509351",
            "id": 26107,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increaseAllowance",
            "nameLocation": "5891:17:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26086,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26083,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "5917:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26107,
                  "src": "5909:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26082,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5909:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26085,
                  "mutability": "mutable",
                  "name": "addedValue",
                  "nameLocation": "5934:10:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26107,
                  "src": "5926:18:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26084,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5926:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5908:37:65"
            },
            "returnParameters": {
              "id": 26089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26088,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26107,
                  "src": "5970:4:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26087,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5970:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5969:6:65"
            },
            "scope": 26419,
            "src": "5882:212:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 26145,
              "nodeType": "Block",
              "src": "6680:306:65",
              "statements": [
                {
                  "assignments": [
                    26118
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26118,
                      "mutability": "mutable",
                      "name": "currentAllowance",
                      "nameLocation": "6698:16:65",
                      "nodeType": "VariableDeclaration",
                      "scope": 26145,
                      "src": "6690:24:65",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26117,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6690:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26125,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 26119,
                        "name": "_allowances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25883,
                        "src": "6717:11:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        }
                      },
                      "id": 26122,
                      "indexExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 26120,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 21892,
                          "src": "6729:10:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 26121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6729:12:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "6717:25:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 26124,
                    "indexExpression": {
                      "id": 26123,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26110,
                      "src": "6743:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6717:34:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6690:61:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26127,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26118,
                          "src": "6769:16:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 26128,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26112,
                          "src": "6789:15:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6769:35:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                        "id": 26130,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6806:39:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        },
                        "value": "ERC20: decreased allowance below zero"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
                          "typeString": "literal_string \"ERC20: decreased allowance below zero\""
                        }
                      ],
                      "id": 26126,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6761:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26131,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6761:85:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26132,
                  "nodeType": "ExpressionStatement",
                  "src": "6761:85:65"
                },
                {
                  "id": 26142,
                  "nodeType": "UncheckedBlock",
                  "src": "6856:102:65",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 26134,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21892,
                              "src": "6889:10:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 26135,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6889:12:65",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 26136,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26110,
                            "src": "6903:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 26139,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 26137,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26118,
                              "src": "6912:16:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 26138,
                              "name": "subtractedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26112,
                              "src": "6931:15:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6912:34:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 26133,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26396,
                          "src": "6880:8:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 26140,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6880:67:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 26141,
                      "nodeType": "ExpressionStatement",
                      "src": "6880:67:65"
                    }
                  ]
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 26143,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "6975:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 26116,
                  "id": 26144,
                  "nodeType": "Return",
                  "src": "6968:11:65"
                }
              ]
            },
            "documentation": {
              "id": 26108,
              "nodeType": "StructuredDocumentation",
              "src": "6100:476:65",
              "text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
            },
            "functionSelector": "a457c2d7",
            "id": 26146,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decreaseAllowance",
            "nameLocation": "6590:17:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26113,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26110,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "6616:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26146,
                  "src": "6608:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26109,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6608:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26112,
                  "mutability": "mutable",
                  "name": "subtractedValue",
                  "nameLocation": "6633:15:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26146,
                  "src": "6625:23:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26111,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6625:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6607:42:65"
            },
            "returnParameters": {
              "id": 26116,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26115,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26146,
                  "src": "6674:4:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26114,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "6674:4:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6673:6:65"
            },
            "scope": 26419,
            "src": "6581:405:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 26222,
              "nodeType": "Block",
              "src": "7577:596:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26162,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26157,
                          "name": "sender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26149,
                          "src": "7595:6:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26160,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7613:1:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7605:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26158,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7605:7:65",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26161,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7605:10:65",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7595:20:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
                        "id": 26163,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7617:39:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        },
                        "value": "ERC20: transfer from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
                          "typeString": "literal_string \"ERC20: transfer from the zero address\""
                        }
                      ],
                      "id": 26156,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7587:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7587:70:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26165,
                  "nodeType": "ExpressionStatement",
                  "src": "7587:70:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26167,
                          "name": "recipient",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26151,
                          "src": "7675:9:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26170,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7696:1:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26169,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7688:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26168,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7688:7:65",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26171,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7688:10:65",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7675:23:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
                        "id": 26173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7700:37:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        },
                        "value": "ERC20: transfer to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
                          "typeString": "literal_string \"ERC20: transfer to the zero address\""
                        }
                      ],
                      "id": 26166,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7667:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26174,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7667:71:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26175,
                  "nodeType": "ExpressionStatement",
                  "src": "7667:71:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26177,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26149,
                        "src": "7770:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26178,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26151,
                        "src": "7778:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26179,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26153,
                        "src": "7789:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26176,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26407,
                      "src": "7749:20:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26180,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7749:47:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26181,
                  "nodeType": "ExpressionStatement",
                  "src": "7749:47:65"
                },
                {
                  "assignments": [
                    26183
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26183,
                      "mutability": "mutable",
                      "name": "senderBalance",
                      "nameLocation": "7815:13:65",
                      "nodeType": "VariableDeclaration",
                      "scope": 26222,
                      "src": "7807:21:65",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26182,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7807:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26187,
                  "initialValue": {
                    "baseExpression": {
                      "id": 26184,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25877,
                      "src": "7831:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 26186,
                    "indexExpression": {
                      "id": 26185,
                      "name": "sender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26149,
                      "src": "7841:6:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7831:17:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7807:41:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26189,
                          "name": "senderBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26183,
                          "src": "7866:13:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 26190,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26153,
                          "src": "7883:6:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7866:23:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
                        "id": 26192,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7891:40:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        },
                        "value": "ERC20: transfer amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
                          "typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
                        }
                      ],
                      "id": 26188,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7858:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26193,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7858:74:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26194,
                  "nodeType": "ExpressionStatement",
                  "src": "7858:74:65"
                },
                {
                  "id": 26203,
                  "nodeType": "UncheckedBlock",
                  "src": "7942:77:65",
                  "statements": [
                    {
                      "expression": {
                        "id": 26201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 26195,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25877,
                            "src": "7966:9:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 26197,
                          "indexExpression": {
                            "id": 26196,
                            "name": "sender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26149,
                            "src": "7976:6:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7966:17:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 26200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 26198,
                            "name": "senderBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26183,
                            "src": "7986:13:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 26199,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26153,
                            "src": "8002:6:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7986:22:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7966:42:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 26202,
                      "nodeType": "ExpressionStatement",
                      "src": "7966:42:65"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 26208,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 26204,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25877,
                        "src": "8028:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 26206,
                      "indexExpression": {
                        "id": 26205,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26151,
                        "src": "8038:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8028:20:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 26207,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26153,
                      "src": "8052:6:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8028:30:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 26209,
                  "nodeType": "ExpressionStatement",
                  "src": "8028:30:65"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 26211,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26149,
                        "src": "8083:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26212,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26151,
                        "src": "8091:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26213,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26153,
                        "src": "8102:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26210,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3074,
                      "src": "8074:8:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26214,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8074:35:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26215,
                  "nodeType": "EmitStatement",
                  "src": "8069:40:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26217,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26149,
                        "src": "8140:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26218,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26151,
                        "src": "8148:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26219,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26153,
                        "src": "8159:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26216,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26418,
                      "src": "8120:19:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8120:46:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26221,
                  "nodeType": "ExpressionStatement",
                  "src": "8120:46:65"
                }
              ]
            },
            "documentation": {
              "id": 26147,
              "nodeType": "StructuredDocumentation",
              "src": "6992:463:65",
              "text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `sender` cannot be the zero address.\n - `recipient` cannot be the zero address.\n - `sender` must have a balance of at least `amount`."
            },
            "id": 26223,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nameLocation": "7469:9:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26149,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "7496:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26223,
                  "src": "7488:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26148,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7488:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26151,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "7520:9:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26223,
                  "src": "7512:17:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26150,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7512:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26153,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "7547:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26223,
                  "src": "7539:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26152,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7539:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7478:81:65"
            },
            "returnParameters": {
              "id": 26155,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7577:0:65"
            },
            "scope": 26419,
            "src": "7460:713:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26278,
              "nodeType": "Block",
              "src": "8514:324:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26237,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26232,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26226,
                          "src": "8532:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26235,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8551:1:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26234,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8543:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26233,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8543:7:65",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8543:10:65",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8532:21:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
                        "id": 26238,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8555:33:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        },
                        "value": "ERC20: mint to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
                          "typeString": "literal_string \"ERC20: mint to the zero address\""
                        }
                      ],
                      "id": 26231,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8524:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26239,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8524:65:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26240,
                  "nodeType": "ExpressionStatement",
                  "src": "8524:65:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 26244,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8629:1:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 26243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8621:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 26242,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8621:7:65",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 26245,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8621:10:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26246,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26226,
                        "src": "8633:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26247,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26228,
                        "src": "8642:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26241,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26407,
                      "src": "8600:20:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26248,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8600:49:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26249,
                  "nodeType": "ExpressionStatement",
                  "src": "8600:49:65"
                },
                {
                  "expression": {
                    "id": 26252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26250,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25885,
                      "src": "8660:12:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 26251,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26228,
                      "src": "8676:6:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8660:22:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 26253,
                  "nodeType": "ExpressionStatement",
                  "src": "8660:22:65"
                },
                {
                  "expression": {
                    "id": 26258,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 26254,
                        "name": "_balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 25877,
                        "src": "8692:9:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 26256,
                      "indexExpression": {
                        "id": 26255,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26226,
                        "src": "8702:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "8692:18:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 26257,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26228,
                      "src": "8714:6:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8692:28:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 26259,
                  "nodeType": "ExpressionStatement",
                  "src": "8692:28:65"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 26263,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8752:1:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 26262,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8744:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 26261,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8744:7:65",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 26264,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8744:10:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26265,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26226,
                        "src": "8756:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26266,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26228,
                        "src": "8765:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26260,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3074,
                      "src": "8735:8:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26267,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8735:37:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26268,
                  "nodeType": "EmitStatement",
                  "src": "8730:42:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 26272,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8811:1:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 26271,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8803:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 26270,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8803:7:65",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 26273,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8803:10:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26274,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26226,
                        "src": "8815:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26275,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26228,
                        "src": "8824:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26269,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26418,
                      "src": "8783:19:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26276,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8783:48:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26277,
                  "nodeType": "ExpressionStatement",
                  "src": "8783:48:65"
                }
              ]
            },
            "documentation": {
              "id": 26224,
              "nodeType": "StructuredDocumentation",
              "src": "8179:265:65",
              "text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
            },
            "id": 26279,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nameLocation": "8458:5:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26229,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26226,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "8472:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26279,
                  "src": "8464:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26225,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8464:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26228,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8489:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26279,
                  "src": "8481:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26227,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8481:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8463:33:65"
            },
            "returnParameters": {
              "id": 26230,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8514:0:65"
            },
            "scope": 26419,
            "src": "8449:389:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26350,
              "nodeType": "Block",
              "src": "9223:511:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26288,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26282,
                          "src": "9241:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26291,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "9260:1:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "9252:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26289,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "9252:7:65",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9252:10:65",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9241:21:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
                        "id": 26294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9264:35:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        },
                        "value": "ERC20: burn from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
                          "typeString": "literal_string \"ERC20: burn from the zero address\""
                        }
                      ],
                      "id": 26287,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9233:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9233:67:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26296,
                  "nodeType": "ExpressionStatement",
                  "src": "9233:67:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26298,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26282,
                        "src": "9332:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 26301,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9349:1:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 26300,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9341:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 26299,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9341:7:65",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 26302,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9341:10:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26303,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26284,
                        "src": "9353:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26297,
                      "name": "_beforeTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26407,
                      "src": "9311:20:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26304,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9311:49:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26305,
                  "nodeType": "ExpressionStatement",
                  "src": "9311:49:65"
                },
                {
                  "assignments": [
                    26307
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26307,
                      "mutability": "mutable",
                      "name": "accountBalance",
                      "nameLocation": "9379:14:65",
                      "nodeType": "VariableDeclaration",
                      "scope": 26350,
                      "src": "9371:22:65",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26306,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9371:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26311,
                  "initialValue": {
                    "baseExpression": {
                      "id": 26308,
                      "name": "_balances",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25877,
                      "src": "9396:9:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 26310,
                    "indexExpression": {
                      "id": 26309,
                      "name": "account",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26282,
                      "src": "9406:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9396:18:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9371:43:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26313,
                          "name": "accountBalance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26307,
                          "src": "9432:14:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 26314,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26284,
                          "src": "9450:6:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9432:24:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
                        "id": 26316,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9458:36:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        },
                        "value": "ERC20: burn amount exceeds balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
                          "typeString": "literal_string \"ERC20: burn amount exceeds balance\""
                        }
                      ],
                      "id": 26312,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9424:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26317,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9424:71:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26318,
                  "nodeType": "ExpressionStatement",
                  "src": "9424:71:65"
                },
                {
                  "id": 26327,
                  "nodeType": "UncheckedBlock",
                  "src": "9505:79:65",
                  "statements": [
                    {
                      "expression": {
                        "id": 26325,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 26319,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25877,
                            "src": "9529:9:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 26321,
                          "indexExpression": {
                            "id": 26320,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26282,
                            "src": "9539:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9529:18:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 26324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 26322,
                            "name": "accountBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26307,
                            "src": "9550:14:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 26323,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26284,
                            "src": "9567:6:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9550:23:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9529:44:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 26326,
                      "nodeType": "ExpressionStatement",
                      "src": "9529:44:65"
                    }
                  ]
                },
                {
                  "expression": {
                    "id": 26330,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26328,
                      "name": "_totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25885,
                      "src": "9593:12:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 26329,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26284,
                      "src": "9609:6:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9593:22:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 26331,
                  "nodeType": "ExpressionStatement",
                  "src": "9593:22:65"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 26333,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26282,
                        "src": "9640:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 26336,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9657:1:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 26335,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9649:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 26334,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9649:7:65",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 26337,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9649:10:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26338,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26284,
                        "src": "9661:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26332,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3074,
                      "src": "9631:8:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26339,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9631:37:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26340,
                  "nodeType": "EmitStatement",
                  "src": "9626:42:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26342,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26282,
                        "src": "9699:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 26345,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9716:1:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 26344,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "9708:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 26343,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "9708:7:65",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 26346,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9708:10:65",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26347,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26284,
                        "src": "9720:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26341,
                      "name": "_afterTokenTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26418,
                      "src": "9679:19:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9679:48:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26349,
                  "nodeType": "ExpressionStatement",
                  "src": "9679:48:65"
                }
              ]
            },
            "documentation": {
              "id": 26280,
              "nodeType": "StructuredDocumentation",
              "src": "8844:309:65",
              "text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
            },
            "id": 26351,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nameLocation": "9167:5:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26285,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26282,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "9181:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26351,
                  "src": "9173:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26281,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9173:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26284,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "9198:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26351,
                  "src": "9190:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26283,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9190:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9172:33:65"
            },
            "returnParameters": {
              "id": 26286,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9223:0:65"
            },
            "scope": 26419,
            "src": "9158:576:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26395,
              "nodeType": "Block",
              "src": "10270:257:65",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26367,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26362,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26354,
                          "src": "10288:5:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26365,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10305:1:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26364,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10297:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26363,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10297:7:65",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10297:10:65",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10288:19:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
                        "id": 26368,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10309:38:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        },
                        "value": "ERC20: approve from the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
                          "typeString": "literal_string \"ERC20: approve from the zero address\""
                        }
                      ],
                      "id": 26361,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10280:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10280:68:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26370,
                  "nodeType": "ExpressionStatement",
                  "src": "10280:68:65"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26372,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26356,
                          "src": "10366:7:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26375,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10385:1:65",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10377:7:65",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26373,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10377:7:65",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26376,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10377:10:65",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10366:21:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
                        "id": 26378,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10389:36:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        },
                        "value": "ERC20: approve to the zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
                          "typeString": "literal_string \"ERC20: approve to the zero address\""
                        }
                      ],
                      "id": 26371,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10358:7:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26379,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10358:68:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26380,
                  "nodeType": "ExpressionStatement",
                  "src": "10358:68:65"
                },
                {
                  "expression": {
                    "id": 26387,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 26381,
                          "name": "_allowances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 25883,
                          "src": "10437:11:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(address => mapping(address => uint256))"
                          }
                        },
                        "id": 26384,
                        "indexExpression": {
                          "id": 26382,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26354,
                          "src": "10449:5:65",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10437:18:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 26385,
                      "indexExpression": {
                        "id": 26383,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26356,
                        "src": "10456:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10437:27:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26386,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26358,
                      "src": "10467:6:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10437:36:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 26388,
                  "nodeType": "ExpressionStatement",
                  "src": "10437:36:65"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 26390,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26354,
                        "src": "10497:5:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26391,
                        "name": "spender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26356,
                        "src": "10504:7:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26392,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26358,
                        "src": "10513:6:65",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26389,
                      "name": "Approval",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3083,
                      "src": "10488:8:65",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 26393,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10488:32:65",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26394,
                  "nodeType": "EmitStatement",
                  "src": "10483:37:65"
                }
              ]
            },
            "documentation": {
              "id": 26352,
              "nodeType": "StructuredDocumentation",
              "src": "9740:412:65",
              "text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
            },
            "id": 26396,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_approve",
            "nameLocation": "10166:8:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26359,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26354,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "10192:5:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26396,
                  "src": "10184:13:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26353,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10184:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26356,
                  "mutability": "mutable",
                  "name": "spender",
                  "nameLocation": "10215:7:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26396,
                  "src": "10207:15:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26355,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10207:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26358,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "10240:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26396,
                  "src": "10232:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26357,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10232:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10174:78:65"
            },
            "returnParameters": {
              "id": 26360,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10270:0:65"
            },
            "scope": 26419,
            "src": "10157:370:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26406,
              "nodeType": "Block",
              "src": "11230:2:65",
              "statements": []
            },
            "documentation": {
              "id": 26397,
              "nodeType": "StructuredDocumentation",
              "src": "10533:573:65",
              "text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 26407,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "11120:20:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26404,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26399,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "11158:4:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26407,
                  "src": "11150:12:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26398,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11150:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26401,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "11180:2:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26407,
                  "src": "11172:10:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26400,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11172:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26403,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "11200:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26407,
                  "src": "11192:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26402,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11192:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11140:72:65"
            },
            "returnParameters": {
              "id": 26405,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11230:0:65"
            },
            "scope": 26419,
            "src": "11111:121:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26417,
              "nodeType": "Block",
              "src": "11938:2:65",
              "statements": []
            },
            "documentation": {
              "id": 26408,
              "nodeType": "StructuredDocumentation",
              "src": "11238:577:65",
              "text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
            },
            "id": 26418,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterTokenTransfer",
            "nameLocation": "11829:19:65",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26415,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26410,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "11866:4:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26418,
                  "src": "11858:12:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26409,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11858:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26412,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "11888:2:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26418,
                  "src": "11880:10:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26411,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11880:7:65",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26414,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "11908:6:65",
                  "nodeType": "VariableDeclaration",
                  "scope": 26418,
                  "src": "11900:14:65",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26413,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11900:7:65",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11848:72:65"
            },
            "returnParameters": {
              "id": 26416,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11938:0:65"
            },
            "scope": 26419,
            "src": "11820:120:65",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 26420,
        "src": "1431:10511:65",
        "usedErrors": []
      }
    ],
    "src": "0:11942:65"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000cac38038062000cac8339810160408190526200003491620002e9565b82516200004990600390602086019062000176565b5081516200005f90600490602085019062000176565b506005805460ff191660ff8316179055620000853369152d02c7e14af68000006200008e565b505050620003d2565b6001600160a01b038216620000e95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000fd91906200036e565b90915550506001600160a01b038216600090815260208190526040812080548392906200012c9084906200036e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001849062000395565b90600052602060002090601f016020900481019282620001a85760008555620001f3565b82601f10620001c357805160ff1916838001178555620001f3565b82800160010185558215620001f3579182015b82811115620001f3578251825591602001919060010190620001d6565b506200020192915062000205565b5090565b5b8082111562000201576000815560010162000206565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200024457600080fd5b81516001600160401b03808211156200026157620002616200021c565b604051601f8301601f19908116603f011681019082821181831017156200028c576200028c6200021c565b81604052838152602092508683858801011115620002a957600080fd5b600091505b83821015620002cd5785820183015181830184015290820190620002ae565b83821115620002df5760008385830101525b9695505050505050565b600080600060608486031215620002ff57600080fd5b83516001600160401b03808211156200031757600080fd5b620003258783880162000232565b945060208601519150808211156200033c57600080fd5b506200034b8682870162000232565b925050604084015160ff811681146200036357600080fd5b809150509250925092565b600082198211156200039057634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620003aa57607f821691505b60208210811415620003cc57634e487b7160e01b600052602260045260246000fd5b50919050565b6108ca80620003e26000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b4114610165578063a457c2d71461016d578063a9059cbb14610180578063dd62ed3e1461019357600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101cc565b6040516100c39190610707565b60405180910390f35b6100df6100da366004610778565b61025e565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a2565b610274565b60055460405160ff90911681526020016100c3565b6100df610137366004610778565b610323565b6100f361014a3660046107de565b6001600160a01b031660009081526020819052604090205490565b6100b661035f565b6100df61017b366004610778565b61036e565b6100df61018e366004610778565b610407565b6100f36101a1366004610800565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101db90610833565b80601f016020809104026020016040519081016040528092919081815260200182805461020790610833565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b5050505050905090565b600061026b338484610414565b50600192915050565b6000610281848484610538565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561030b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103188533858403610414565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161026b91859061035a90869061086e565b610414565b6060600480546101db90610833565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103f05760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610302565b6103fd3385858403610414565b5060019392505050565b600061026b338484610538565b6001600160a01b0383166104765760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610302565b6001600160a01b0382166104d75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610302565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661059c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610302565b6001600160a01b0382166105fe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610302565b6001600160a01b038316600090815260208190526040902054818110156106765760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610302565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106ad90849061086e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f991815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561073457858101830151858201604001528201610718565b81811115610746576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077357600080fd5b919050565b6000806040838503121561078b57600080fd5b6107948361075c565b946020939093013593505050565b6000806000606084860312156107b757600080fd5b6107c08461075c565b92506107ce6020850161075c565b9150604084013590509250925092565b6000602082840312156107f057600080fd5b6107f98261075c565b9392505050565b6000806040838503121561081357600080fd5b61081c8361075c565b915061082a6020840161075c565b90509250929050565b600181811c9082168061084757607f821691505b6020821081141561086857634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088f57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212208a1d7eca22298ca4b627ecf9e9f64e04ea44f8257d2d88793f60ca2bd87aa18864736f6c634300080c0033",
  "bytecodeSha1": "f21f8c6f48443d9d10c897504138ed8e2e60d672",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "MockERC20Decimals",
  "coverageMap": {
    "branches": {
      "22": {},
      "48": {},
      "65": {
        "MockERC20Decimals._approve": {
          "30": [
            10288,
            10307,
            true
          ],
          "31": [
            10366,
            10387,
            true
          ]
        },
        "MockERC20Decimals._transfer": {
          "32": [
            7595,
            7615,
            true
          ],
          "33": [
            7675,
            7698,
            true
          ],
          "34": [
            7866,
            7889,
            true
          ]
        },
        "MockERC20Decimals.decreaseAllowance": {
          "29": [
            6769,
            6804,
            true
          ]
        },
        "MockERC20Decimals.transferFrom": {
          "28": [
            5286,
            5312,
            true
          ]
        }
      }
    },
    "statements": {
      "22": {},
      "48": {
        "Context._msgSender": {
          "6": [
            680,
            697
          ]
        }
      },
      "65": {
        "MockERC20Decimals._approve": {
          "18": [
            10280,
            10348
          ],
          "19": [
            10358,
            10426
          ],
          "20": [
            10437,
            10473
          ],
          "21": [
            10483,
            10520
          ]
        },
        "MockERC20Decimals._transfer": {
          "22": [
            7587,
            7657
          ],
          "23": [
            7667,
            7738
          ],
          "24": [
            7858,
            7932
          ],
          "25": [
            7966,
            8008
          ],
          "26": [
            8028,
            8058
          ],
          "27": [
            8069,
            8109
          ]
        },
        "MockERC20Decimals.allowance": {
          "3": [
            4197,
            4231
          ]
        },
        "MockERC20Decimals.approve": {
          "5": [
            4475,
            4514
          ],
          "7": [
            4524,
            4535
          ]
        },
        "MockERC20Decimals.balanceOf": {
          "2": [
            3624,
            3649
          ]
        },
        "MockERC20Decimals.decimals": {
          "1": [
            3284,
            3300
          ]
        },
        "MockERC20Decimals.decreaseAllowance": {
          "14": [
            6761,
            6846
          ],
          "15": [
            6880,
            6947
          ],
          "16": [
            6968,
            6979
          ]
        },
        "MockERC20Decimals.increaseAllowance": {
          "12": [
            5986,
            6066
          ]
        },
        "MockERC20Decimals.name": {
          "4": [
            2360,
            2372
          ]
        },
        "MockERC20Decimals.symbol": {
          "13": [
            2564,
            2578
          ]
        },
        "MockERC20Decimals.totalSupply": {
          "0": [
            3447,
            3466
          ]
        },
        "MockERC20Decimals.transfer": {
          "17": [
            3961,
            4003
          ]
        },
        "MockERC20Decimals.transferFrom": {
          "8": [
            5161,
            5197
          ],
          "9": [
            5278,
            5357
          ],
          "10": [
            5391,
            5448
          ],
          "11": [
            5469,
            5480
          ]
        }
      }
    }
  },
  "dependencies": [
    "Context",
    "IERC20"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b4114610165578063a457c2d71461016d578063a9059cbb14610180578063dd62ed3e1461019357600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101cc565b6040516100c39190610707565b60405180910390f35b6100df6100da366004610778565b61025e565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046107a2565b610274565b60055460405160ff90911681526020016100c3565b6100df610137366004610778565b610323565b6100f361014a3660046107de565b6001600160a01b031660009081526020819052604090205490565b6100b661035f565b6100df61017b366004610778565b61036e565b6100df61018e366004610778565b610407565b6100f36101a1366004610800565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101db90610833565b80601f016020809104026020016040519081016040528092919081815260200182805461020790610833565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b5050505050905090565b600061026b338484610414565b50600192915050565b6000610281848484610538565b6001600160a01b03841660009081526001602090815260408083203384529091529020548281101561030b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103188533858403610414565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161026b91859061035a90869061086e565b610414565b6060600480546101db90610833565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103f05760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610302565b6103fd3385858403610414565b5060019392505050565b600061026b338484610538565b6001600160a01b0383166104765760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610302565b6001600160a01b0382166104d75760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610302565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03831661059c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610302565b6001600160a01b0382166105fe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610302565b6001600160a01b038316600090815260208190526040902054818110156106765760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610302565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106ad90849061086e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f991815260200190565b60405180910390a350505050565b600060208083528351808285015260005b8181101561073457858101830151858201604001528201610718565b81811115610746576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461077357600080fd5b919050565b6000806040838503121561078b57600080fd5b6107948361075c565b946020939093013593505050565b6000806000606084860312156107b757600080fd5b6107c08461075c565b92506107ce6020850161075c565b9150604084013590509250925092565b6000602082840312156107f057600080fd5b6107f98261075c565b9392505050565b6000806040838503121561081357600080fd5b61081c8361075c565b915061082a6020840161075c565b90509250929050565b600181811c9082168061084757607f821691505b6020821081141561086857634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561088f57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212208a1d7eca22298ca4b627ecf9e9f64e04ea44f8257d2d88793f60ca2bd87aa18864736f6c634300080c0033",
  "deployedSourceMap": "1431:10511:65:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2290:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4376:166;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:75;;1211:22;1193:41;;1181:2;1166:18;4376:166:65;1053:187:75;3367:106:65;3454:12;;3367:106;;;1391:25:75;;;1379:2;1364:18;3367:106:65;1245:177:75;5009:478:65;;;;;;:::i;:::-;;:::i;3209:98::-;3291:9;;3209:98;;3291:9;;;;1902:36:75;;1890:2;1875:18;3209:98:65;1760:184:75;5882:212:65;;;;;;:::i;:::-;;:::i;3531:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3631:18:65;3605:7;3631:18;;;;;;;;;;;;3531:125;2492:93;;;:::i;6581:405::-;;;;;;:::i;:::-;;:::i;3859:172::-;;;;;;:::i;:::-;;:::i;4089:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4204:18:65;;;4178:7;4204:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4089:149;2290:89;2335:13;2367:5;2360:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2290:89;:::o;4376:166::-;4459:4;4475:39;687:10:48;4498:7:65;4507:6;4475:8;:39::i;:::-;-1:-1:-1;4531:4:65;4376:166;;;;:::o;5009:478::-;5145:4;5161:36;5171:6;5179:9;5190:6;5161:9;:36::i;:::-;-1:-1:-1;;;;;5235:19:65;;5208:24;5235:19;;;:11;:19;;;;;;;;687:10:48;5235:33:65;;;;;;;;5286:26;;;;5278:79;;;;-1:-1:-1;;;5278:79:65;;2992:2:75;5278:79:65;;;2974:21:75;3031:2;3011:18;;;3004:30;3070:34;3050:18;;;3043:62;-1:-1:-1;;;3121:18:75;;;3114:38;3169:19;;5278:79:65;;;;;;;;;5391:57;5400:6;687:10:48;5441:6:65;5422:16;:25;5391:8;:57::i;:::-;-1:-1:-1;5476:4:65;;5009:478;-1:-1:-1;;;;5009:478:65:o;5882:212::-;687:10:48;5970:4:65;6018:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6018:34:65;;;;;;;;;;5970:4;;5986:80;;6009:7;;6018:47;;6055:10;;6018:47;:::i;:::-;5986:8;:80::i;2492:93::-;2539:13;2571:7;2564:14;;;;;:::i;6581:405::-;687:10:48;6674:4:65;6717:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6717:34:65;;;;;;;;;;6769:35;;;;6761:85;;;;-1:-1:-1;;;6761:85:65;;3631:2:75;6761:85:65;;;3613:21:75;3670:2;3650:18;;;3643:30;3709:34;3689:18;;;3682:62;-1:-1:-1;;;3760:18:75;;;3753:35;3805:19;;6761:85:65;3429:401:75;6761:85:65;6880:67;687:10:48;6903:7:65;6931:15;6912:16;:34;6880:8;:67::i;:::-;-1:-1:-1;6975:4:65;;6581:405;-1:-1:-1;;;6581:405:65:o;3859:172::-;3945:4;3961:42;687:10:48;3985:9:65;3996:6;3961:9;:42::i;10157:370::-;-1:-1:-1;;;;;10288:19:65;;10280:68;;;;-1:-1:-1;;;10280:68:65;;4037:2:75;10280:68:65;;;4019:21:75;4076:2;4056:18;;;4049:30;4115:34;4095:18;;;4088:62;-1:-1:-1;;;4166:18:75;;;4159:34;4210:19;;10280:68:65;3835:400:75;10280:68:65;-1:-1:-1;;;;;10366:21:65;;10358:68;;;;-1:-1:-1;;;10358:68:65;;4442:2:75;10358:68:65;;;4424:21:75;4481:2;4461:18;;;4454:30;4520:34;4500:18;;;4493:62;-1:-1:-1;;;4571:18:75;;;4564:32;4613:19;;10358:68:65;4240:398:75;10358:68:65;-1:-1:-1;;;;;10437:18:65;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10488:32;;1391:25:75;;;10488:32:65;;1364:18:75;10488:32:65;;;;;;;10157:370;;;:::o;7460:713::-;-1:-1:-1;;;;;7595:20:65;;7587:70;;;;-1:-1:-1;;;7587:70:65;;4845:2:75;7587:70:65;;;4827:21:75;4884:2;4864:18;;;4857:30;4923:34;4903:18;;;4896:62;-1:-1:-1;;;4974:18:75;;;4967:35;5019:19;;7587:70:65;4643:401:75;7587:70:65;-1:-1:-1;;;;;7675:23:65;;7667:71;;;;-1:-1:-1;;;7667:71:65;;5251:2:75;7667:71:65;;;5233:21:75;5290:2;5270:18;;;5263:30;5329:34;5309:18;;;5302:62;-1:-1:-1;;;5380:18:75;;;5373:33;5423:19;;7667:71:65;5049:399:75;7667:71:65;-1:-1:-1;;;;;7831:17:65;;7807:21;7831:17;;;;;;;;;;;7866:23;;;;7858:74;;;;-1:-1:-1;;;7858:74:65;;5655:2:75;7858:74:65;;;5637:21:75;5694:2;5674:18;;;5667:30;5733:34;5713:18;;;5706:62;-1:-1:-1;;;5784:18:75;;;5777:36;5830:19;;7858:74:65;5453:402:75;7858:74:65;-1:-1:-1;;;;;7966:17:65;;;:9;:17;;;;;;;;;;;7986:22;;;7966:42;;8028:20;;;;;;;;:30;;8002:6;;7966:9;8028:30;;8002:6;;8028:30;:::i;:::-;;;;;;;;8091:9;-1:-1:-1;;;;;8074:35:65;8083:6;-1:-1:-1;;;;;8074:35:65;;8102:6;8074:35;;;;1391:25:75;;1379:2;1364:18;;1245:177;8074:35:65;;;;;;;;7577:596;7460:713;;;:::o;14:597:75:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:75;574:15;-1:-1:-1;;570:29:75;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:75:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:75;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:75:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:75:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;3199:225::-;3239:3;3270:1;3266:6;3263:1;3260:13;3257:136;;;3315:10;3310:3;3306:20;3303:1;3296:31;3350:4;3347:1;3340:15;3378:4;3375:1;3368:15;3257:136;-1:-1:-1;3409:9:75;;3199:225::o",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "offset": [
    1431,
    11942
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x25E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x7A2 JUMP JUMPDEST PUSH2 0x274 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x323 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x7DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x17B CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH2 0xDF PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH2 0x407 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x800 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x833 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x207 SWAP1 PUSH2 0x833 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x254 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x229 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x254 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x237 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B CALLER DUP5 DUP5 PUSH2 0x414 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x281 DUP5 DUP5 DUP5 PUSH2 0x538 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x30B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x318 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x414 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x26B SWAP2 DUP6 SWAP1 PUSH2 0x35A SWAP1 DUP7 SWAP1 PUSH2 0x86E JUMP JUMPDEST PUSH2 0x414 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x833 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH2 0x3FD CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x414 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B CALLER DUP5 DUP5 PUSH2 0x538 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x476 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4D7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x59C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x676 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x302 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6AD SWAP1 DUP5 SWAP1 PUSH2 0x86E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6F9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x734 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x718 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x746 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x773 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x794 DUP4 PUSH2 0x75C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7C0 DUP5 PUSH2 0x75C JUMP JUMPDEST SWAP3 POP PUSH2 0x7CE PUSH1 0x20 DUP6 ADD PUSH2 0x75C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F9 DUP3 PUSH2 0x75C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x813 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x81C DUP4 PUSH2 0x75C JUMP JUMPDEST SWAP2 POP PUSH2 0x82A PUSH1 0x20 DUP5 ADD PUSH2 0x75C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x847 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x868 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x88F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 SAR PUSH31 0xCA22298CA4B627ECF9E9F64E04EA44F8257D2D88793F60CA2BD87AA1886473 PUSH16 0x6C634300080C00330000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "5": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "CALLVALUE",
      "path": "65"
    },
    "6": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "7": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "8": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "12": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "REVERT",
      "path": "65"
    },
    "16": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "17": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "POP",
      "path": "65"
    },
    "18": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "21": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "LT",
      "path": "65"
    },
    "22": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "26": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "CALLDATALOAD",
      "path": "65"
    },
    "29": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "SHR",
      "path": "65"
    },
    "32": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "33": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x39509351"
    },
    "38": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "GT",
      "path": "65"
    },
    "39": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "43": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "44": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x39509351"
    },
    "49": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "50": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x129"
    },
    "53": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "54": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "55": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x70A08231"
    },
    "60": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "61": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x13C"
    },
    "64": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "65": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "66": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x95D89B41"
    },
    "71": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "72": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x165"
    },
    "75": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "76": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "77": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0xA457C2D7"
    },
    "82": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "83": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x16D"
    },
    "86": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "87": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "88": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0xA9059CBB"
    },
    "93": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "94": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x180"
    },
    "97": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "98": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "99": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0xDD62ED3E"
    },
    "104": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "105": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x193"
    },
    "108": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "109": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "112": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "REVERT",
      "path": "65"
    },
    "113": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "114": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "115": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x6FDDE03"
    },
    "120": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "121": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "125": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "126": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x95EA7B3"
    },
    "131": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "132": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xCC"
    },
    "135": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "136": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "137": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x18160DDD"
    },
    "142": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "143": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xEF"
    },
    "146": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "147": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "148": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x23B872DD"
    },
    "153": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "154": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x101"
    },
    "157": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "158": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "159": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH4",
      "path": "65",
      "value": "0x313CE567"
    },
    "164": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "EQ",
      "path": "65"
    },
    "165": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x114"
    },
    "168": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "169": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "170": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "DUP1",
      "path": "65"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1431,
        11942
      ],
      "op": "REVERT",
      "path": "65"
    },
    "174": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "175": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xB6"
    },
    "178": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x1CC"
    },
    "181": {
      "fn": "MockERC20Decimals.name",
      "jump": "i",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMP",
      "path": "65"
    },
    "182": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "183": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "185": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "186": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xC3"
    },
    "189": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "190": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "191": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x707"
    },
    "194": {
      "fn": "MockERC20Decimals.name",
      "jump": "i",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMP",
      "path": "65"
    },
    "195": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "196": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "198": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "199": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "DUP1",
      "path": "65"
    },
    "200": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "201": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "SUB",
      "path": "65"
    },
    "202": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "203": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "RETURN",
      "path": "65"
    },
    "204": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "205": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xDF"
    },
    "208": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xDA"
    },
    "211": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "212": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "214": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x778"
    },
    "217": {
      "fn": "MockERC20Decimals.approve",
      "jump": "i",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMP",
      "path": "65"
    },
    "218": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "219": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x25E"
    },
    "222": {
      "fn": "MockERC20Decimals.approve",
      "jump": "i",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMP",
      "path": "65"
    },
    "223": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "224": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "226": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "227": {
      "op": "SWAP1"
    },
    "228": {
      "op": "ISZERO"
    },
    "229": {
      "op": "ISZERO"
    },
    "230": {
      "op": "DUP2"
    },
    "231": {
      "op": "MSTORE"
    },
    "232": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "234": {
      "op": "ADD"
    },
    "235": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xC3"
    },
    "238": {
      "op": "JUMP"
    },
    "239": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3367,
        3473
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "240": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3454,
        3466
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 0,
      "value": "0x2"
    },
    "242": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3454,
        3466
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "243": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3367,
        3473
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "244": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3367,
        3473
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "246": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3367,
        3473
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "247": {
      "op": "SWAP1"
    },
    "248": {
      "op": "DUP2"
    },
    "249": {
      "op": "MSTORE"
    },
    "250": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "252": {
      "op": "ADD"
    },
    "253": {
      "fn": "MockERC20Decimals.totalSupply",
      "offset": [
        3367,
        3473
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xC3"
    },
    "256": {
      "op": "JUMP"
    },
    "257": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "258": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xDF"
    },
    "261": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x10F"
    },
    "264": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "265": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "267": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x7A2"
    },
    "270": {
      "fn": "MockERC20Decimals.transferFrom",
      "jump": "i",
      "offset": [
        5009,
        5487
      ],
      "op": "JUMP",
      "path": "65"
    },
    "271": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "272": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x274"
    },
    "275": {
      "fn": "MockERC20Decimals.transferFrom",
      "jump": "i",
      "offset": [
        5009,
        5487
      ],
      "op": "JUMP",
      "path": "65"
    },
    "276": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3209,
        3307
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "277": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3291,
        3300
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 1,
      "value": "0x5"
    },
    "279": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3291,
        3300
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "280": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3209,
        3307
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "282": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3209,
        3307
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "283": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3291,
        3300
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0xFF"
    },
    "285": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3291,
        3300
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "286": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3291,
        3300
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "287": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3291,
        3300
      ],
      "op": "AND",
      "path": "65"
    },
    "288": {
      "op": "DUP2"
    },
    "289": {
      "op": "MSTORE"
    },
    "290": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "292": {
      "op": "ADD"
    },
    "293": {
      "fn": "MockERC20Decimals.decimals",
      "offset": [
        3209,
        3307
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xC3"
    },
    "296": {
      "op": "JUMP"
    },
    "297": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "298": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xDF"
    },
    "301": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x137"
    },
    "304": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "305": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "307": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x778"
    },
    "310": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "jump": "i",
      "offset": [
        5882,
        6094
      ],
      "op": "JUMP",
      "path": "65"
    },
    "311": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "312": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x323"
    },
    "315": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "jump": "i",
      "offset": [
        5882,
        6094
      ],
      "op": "JUMP",
      "path": "65"
    },
    "316": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "317": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xF3"
    },
    "320": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x14A"
    },
    "323": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "324": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "326": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x7DE"
    },
    "329": {
      "fn": "MockERC20Decimals.balanceOf",
      "jump": "i",
      "offset": [
        3531,
        3656
      ],
      "op": "JUMP",
      "path": "65"
    },
    "330": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "333": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "335": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "337": {
      "op": "SHL"
    },
    "338": {
      "op": "SUB"
    },
    "339": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "AND",
      "path": "65",
      "statement": 2
    },
    "340": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3605,
        3612
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "342": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "343": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "DUP2",
      "path": "65"
    },
    "344": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "345": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "347": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "DUP2",
      "path": "65"
    },
    "348": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "349": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "350": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "352": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "353": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "354": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "355": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3631,
        3649
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "356": {
      "fn": "MockERC20Decimals.balanceOf",
      "offset": [
        3531,
        3656
      ],
      "op": "JUMP",
      "path": "65"
    },
    "357": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2492,
        2585
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "358": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2492,
        2585
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xB6"
    },
    "361": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2492,
        2585
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x35F"
    },
    "364": {
      "fn": "MockERC20Decimals.symbol",
      "jump": "i",
      "offset": [
        2492,
        2585
      ],
      "op": "JUMP",
      "path": "65"
    },
    "365": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "366": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xDF"
    },
    "369": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x17B"
    },
    "372": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "373": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "375": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x778"
    },
    "378": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "jump": "i",
      "offset": [
        6581,
        6986
      ],
      "op": "JUMP",
      "path": "65"
    },
    "379": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "380": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x36E"
    },
    "383": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "jump": "i",
      "offset": [
        6581,
        6986
      ],
      "op": "JUMP",
      "path": "65"
    },
    "384": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "385": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xDF"
    },
    "388": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x18E"
    },
    "391": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "392": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "394": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x778"
    },
    "397": {
      "fn": "MockERC20Decimals.transfer",
      "jump": "i",
      "offset": [
        3859,
        4031
      ],
      "op": "JUMP",
      "path": "65"
    },
    "398": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "399": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x407"
    },
    "402": {
      "fn": "MockERC20Decimals.transfer",
      "jump": "i",
      "offset": [
        3859,
        4031
      ],
      "op": "JUMP",
      "path": "65"
    },
    "403": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "404": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0xF3"
    },
    "407": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x1A1"
    },
    "410": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "CALLDATASIZE",
      "path": "65"
    },
    "411": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "413": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x800"
    },
    "416": {
      "fn": "MockERC20Decimals.allowance",
      "jump": "i",
      "offset": [
        4089,
        4238
      ],
      "op": "JUMP",
      "path": "65"
    },
    "417": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "424": {
      "op": "SHL"
    },
    "425": {
      "op": "SUB"
    },
    "426": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "SWAP2",
      "path": "65",
      "statement": 3
    },
    "427": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "DUP3",
      "path": "65"
    },
    "428": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "AND",
      "path": "65"
    },
    "429": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4178,
        4185
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "431": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "432": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "DUP2",
      "path": "65"
    },
    "433": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "434": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4215
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1"
    },
    "436": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "438": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "439": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "DUP2",
      "path": "65"
    },
    "440": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "441": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "443": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "DUP1",
      "path": "65"
    },
    "444": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "DUP4",
      "path": "65"
    },
    "445": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4222
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "446": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP4",
      "path": "65"
    },
    "447": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "448": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP5",
      "path": "65"
    },
    "449": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "AND",
      "path": "65"
    },
    "450": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "DUP3",
      "path": "65"
    },
    "451": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "452": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "453": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "454": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "455": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "456": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "457": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "458": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4204,
        4231
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "459": {
      "fn": "MockERC20Decimals.allowance",
      "offset": [
        4089,
        4238
      ],
      "op": "JUMP",
      "path": "65"
    },
    "460": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "461": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2335,
        2348
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x60"
    },
    "463": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2367,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 4,
      "value": "0x3"
    },
    "465": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "466": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "467": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x1DB"
    },
    "470": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "471": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x833"
    },
    "474": {
      "fn": "MockERC20Decimals.name",
      "jump": "i",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMP",
      "path": "65"
    },
    "475": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "476": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "477": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1F"
    },
    "479": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "480": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "482": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "483": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "484": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DIV",
      "path": "65"
    },
    "485": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MUL",
      "path": "65"
    },
    "486": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "488": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "489": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "491": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "492": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "493": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP2",
      "path": "65"
    },
    "494": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "495": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "497": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "498": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "499": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP3",
      "path": "65"
    },
    "500": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "501": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "502": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP2",
      "path": "65"
    },
    "503": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP2",
      "path": "65"
    },
    "504": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "505": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "507": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "508": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP3",
      "path": "65"
    },
    "509": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "510": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "511": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x207"
    },
    "514": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "515": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x833"
    },
    "518": {
      "fn": "MockERC20Decimals.name",
      "jump": "i",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMP",
      "path": "65"
    },
    "519": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "520": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "521": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "522": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x254"
    },
    "525": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "526": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "527": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1F"
    },
    "529": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "LT",
      "path": "65"
    },
    "530": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x229"
    },
    "533": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "534": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x100"
    },
    "537": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "538": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP4",
      "path": "65"
    },
    "539": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "540": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DIV",
      "path": "65"
    },
    "541": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MUL",
      "path": "65"
    },
    "542": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP4",
      "path": "65"
    },
    "543": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "544": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "545": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "547": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "548": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "549": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x254"
    },
    "552": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMP",
      "path": "65"
    },
    "553": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "554": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP3",
      "path": "65"
    },
    "555": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "556": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "557": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "558": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "560": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "561": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "563": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "565": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "566": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "567": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "568": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP2",
      "path": "65"
    },
    "569": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "570": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP2",
      "path": "65"
    },
    "571": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "572": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "573": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1"
    },
    "575": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "576": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "577": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "579": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "580": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP1",
      "path": "65"
    },
    "581": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP4",
      "path": "65"
    },
    "582": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "GT",
      "path": "65"
    },
    "583": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x237"
    },
    "586": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "587": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP3",
      "path": "65"
    },
    "588": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "589": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SUB",
      "path": "65"
    },
    "590": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1F"
    },
    "592": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "AND",
      "path": "65"
    },
    "593": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "DUP3",
      "path": "65"
    },
    "594": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "ADD",
      "path": "65"
    },
    "595": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "596": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "597": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "POP",
      "path": "65"
    },
    "598": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "POP",
      "path": "65"
    },
    "599": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "POP",
      "path": "65"
    },
    "600": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "POP",
      "path": "65"
    },
    "601": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "POP",
      "path": "65"
    },
    "602": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "603": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2360,
        2372
      ],
      "op": "POP",
      "path": "65"
    },
    "604": {
      "fn": "MockERC20Decimals.name",
      "offset": [
        2290,
        2379
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "605": {
      "fn": "MockERC20Decimals.name",
      "jump": "o",
      "offset": [
        2290,
        2379
      ],
      "op": "JUMP",
      "path": "65"
    },
    "606": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "607": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4459,
        4463
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "609": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4475,
        4514
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 5,
      "value": "0x26B"
    },
    "612": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48",
      "statement": 6
    },
    "613": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4498,
        4505
      ],
      "op": "DUP5",
      "path": "65"
    },
    "614": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4507,
        4513
      ],
      "op": "DUP5",
      "path": "65"
    },
    "615": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4475,
        4483
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x414"
    },
    "618": {
      "fn": "MockERC20Decimals.approve",
      "jump": "i",
      "offset": [
        4475,
        4514
      ],
      "op": "JUMP",
      "path": "65"
    },
    "619": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4475,
        4514
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "620": {
      "op": "POP"
    },
    "621": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4531,
        4535
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 7,
      "value": "0x1"
    },
    "623": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "SWAP3",
      "path": "65"
    },
    "624": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "625": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "POP",
      "path": "65"
    },
    "626": {
      "fn": "MockERC20Decimals.approve",
      "offset": [
        4376,
        4542
      ],
      "op": "POP",
      "path": "65"
    },
    "627": {
      "fn": "MockERC20Decimals.approve",
      "jump": "o",
      "offset": [
        4376,
        4542
      ],
      "op": "JUMP",
      "path": "65"
    },
    "628": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "629": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5145,
        5149
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "631": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5161,
        5197
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 8,
      "value": "0x281"
    },
    "634": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5171,
        5177
      ],
      "op": "DUP5",
      "path": "65"
    },
    "635": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5179,
        5188
      ],
      "op": "DUP5",
      "path": "65"
    },
    "636": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5190,
        5196
      ],
      "op": "DUP5",
      "path": "65"
    },
    "637": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5161,
        5170
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x538"
    },
    "640": {
      "fn": "MockERC20Decimals.transferFrom",
      "jump": "i",
      "offset": [
        5161,
        5197
      ],
      "op": "JUMP",
      "path": "65"
    },
    "641": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5161,
        5197
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "642": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "644": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "646": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "648": {
      "op": "SHL"
    },
    "649": {
      "op": "SUB"
    },
    "650": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "DUP5",
      "path": "65"
    },
    "651": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "AND",
      "path": "65"
    },
    "652": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5208,
        5232
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "654": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "655": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "DUP2",
      "path": "65"
    },
    "656": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "657": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5246
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1"
    },
    "659": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "661": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "662": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "DUP2",
      "path": "65"
    },
    "663": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "664": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "666": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "DUP1",
      "path": "65"
    },
    "667": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "DUP4",
      "path": "65"
    },
    "668": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5254
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "669": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48"
    },
    "670": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "DUP5",
      "path": "65"
    },
    "671": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "672": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "673": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "674": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "675": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "676": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "677": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5235,
        5268
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "678": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5286,
        5312
      ],
      "op": "DUP3",
      "path": "65",
      "statement": 9
    },
    "679": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5286,
        5312
      ],
      "op": "DUP2",
      "path": "65"
    },
    "680": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5286,
        5312
      ],
      "op": "LT",
      "path": "65"
    },
    "681": {
      "branch": 28,
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5286,
        5312
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "682": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x30B"
    },
    "685": {
      "branch": 28,
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "686": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "688": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "689": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "693": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "695": {
      "op": "SHL"
    },
    "696": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "DUP2",
      "path": "65"
    },
    "697": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "698": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "700": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "702": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "DUP3",
      "path": "65"
    },
    "703": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "ADD",
      "path": "65"
    },
    "704": {
      "op": "MSTORE"
    },
    "705": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "707": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "709": {
      "op": "DUP3"
    },
    "710": {
      "op": "ADD"
    },
    "711": {
      "op": "MSTORE"
    },
    "712": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "745": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "747": {
      "op": "DUP3"
    },
    "748": {
      "op": "ADD"
    },
    "749": {
      "op": "MSTORE"
    },
    "750": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "759": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "761": {
      "op": "SHL"
    },
    "762": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "764": {
      "op": "DUP3"
    },
    "765": {
      "op": "ADD"
    },
    "766": {
      "op": "MSTORE"
    },
    "767": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "769": {
      "op": "ADD"
    },
    "770": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "771": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "773": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "774": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "DUP1",
      "path": "65"
    },
    "775": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "776": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "SUB",
      "path": "65"
    },
    "777": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "778": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "65"
    },
    "779": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5278,
        5357
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "780": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5391,
        5448
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 10,
      "value": "0x318"
    },
    "783": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5400,
        5406
      ],
      "op": "DUP6",
      "path": "65"
    },
    "784": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48"
    },
    "785": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5441,
        5447
      ],
      "op": "DUP6",
      "path": "65"
    },
    "786": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5422,
        5438
      ],
      "op": "DUP5",
      "path": "65"
    },
    "787": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5422,
        5447
      ],
      "op": "SUB",
      "path": "65"
    },
    "788": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5391,
        5399
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x414"
    },
    "791": {
      "fn": "MockERC20Decimals.transferFrom",
      "jump": "i",
      "offset": [
        5391,
        5448
      ],
      "op": "JUMP",
      "path": "65"
    },
    "792": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5391,
        5448
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "793": {
      "op": "POP"
    },
    "794": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5476,
        5480
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 11,
      "value": "0x1"
    },
    "796": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5476,
        5480
      ],
      "op": "SWAP5",
      "path": "65"
    },
    "797": {
      "fn": "MockERC20Decimals.transferFrom",
      "offset": [
        5009,
        5487
      ],
      "op": "SWAP4",
      "path": "65"
    },
    "798": {
      "op": "POP"
    },
    "799": {
      "op": "POP"
    },
    "800": {
      "op": "POP"
    },
    "801": {
      "op": "POP"
    },
    "802": {
      "fn": "MockERC20Decimals.transferFrom",
      "jump": "o",
      "offset": [
        5009,
        5487
      ],
      "op": "JUMP",
      "path": "65"
    },
    "803": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5882,
        6094
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "804": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48"
    },
    "805": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5970,
        5974
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "807": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "DUP2",
      "path": "65",
      "statement": 12
    },
    "808": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "DUP2",
      "path": "65"
    },
    "809": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "810": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6029
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1"
    },
    "812": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "814": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "815": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "DUP2",
      "path": "65"
    },
    "816": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "817": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "819": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "DUP1",
      "path": "65"
    },
    "820": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "DUP4",
      "path": "65"
    },
    "821": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6043
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "824": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "826": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "828": {
      "op": "SHL"
    },
    "829": {
      "op": "SUB"
    },
    "830": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "DUP8",
      "path": "65"
    },
    "831": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "AND",
      "path": "65"
    },
    "832": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "DUP5",
      "path": "65"
    },
    "833": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "834": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "835": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "836": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "837": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "DUP2",
      "path": "65"
    },
    "838": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "839": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6052
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "840": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5970,
        5974
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "841": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5970,
        5974
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "842": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5986,
        6066
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x26B"
    },
    "845": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5986,
        6066
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "846": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6009,
        6016
      ],
      "op": "DUP6",
      "path": "65"
    },
    "847": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6009,
        6016
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "848": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6065
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x35A"
    },
    "851": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6065
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "852": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6055,
        6065
      ],
      "op": "DUP7",
      "path": "65"
    },
    "853": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6055,
        6065
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "854": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6065
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x86E"
    },
    "857": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "jump": "i",
      "offset": [
        6018,
        6065
      ],
      "op": "JUMP",
      "path": "65"
    },
    "858": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        6018,
        6065
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "859": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "offset": [
        5986,
        5994
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x414"
    },
    "862": {
      "fn": "MockERC20Decimals.increaseAllowance",
      "jump": "i",
      "offset": [
        5986,
        6066
      ],
      "op": "JUMP",
      "path": "65"
    },
    "863": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2492,
        2585
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "864": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2539,
        2552
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x60"
    },
    "866": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2571,
        2578
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 13,
      "value": "0x4"
    },
    "868": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2564,
        2578
      ],
      "op": "DUP1",
      "path": "65"
    },
    "869": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2564,
        2578
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "870": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2564,
        2578
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x1DB"
    },
    "873": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2564,
        2578
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "874": {
      "fn": "MockERC20Decimals.symbol",
      "offset": [
        2564,
        2578
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x833"
    },
    "877": {
      "fn": "MockERC20Decimals.symbol",
      "jump": "i",
      "offset": [
        2564,
        2578
      ],
      "op": "JUMP",
      "path": "65"
    },
    "878": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "879": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48"
    },
    "880": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6674,
        6678
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "882": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "883": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "DUP2",
      "path": "65"
    },
    "884": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "885": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6728
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1"
    },
    "887": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "889": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "890": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "DUP2",
      "path": "65"
    },
    "891": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "892": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "894": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "DUP1",
      "path": "65"
    },
    "895": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "DUP4",
      "path": "65"
    },
    "896": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6742
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "897": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "899": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "901": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "903": {
      "op": "SHL"
    },
    "904": {
      "op": "SUB"
    },
    "905": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "DUP7",
      "path": "65"
    },
    "906": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "AND",
      "path": "65"
    },
    "907": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "DUP5",
      "path": "65"
    },
    "908": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "909": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "910": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "911": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "912": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "DUP2",
      "path": "65"
    },
    "913": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "914": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6717,
        6751
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "915": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6769,
        6804
      ],
      "op": "DUP3",
      "path": "65",
      "statement": 14
    },
    "916": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6769,
        6804
      ],
      "op": "DUP2",
      "path": "65"
    },
    "917": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6769,
        6804
      ],
      "op": "LT",
      "path": "65"
    },
    "918": {
      "branch": 29,
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6769,
        6804
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "919": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x3F0"
    },
    "922": {
      "branch": 29,
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "923": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "925": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "926": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "930": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "932": {
      "op": "SHL"
    },
    "933": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "DUP2",
      "path": "65"
    },
    "934": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "935": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "937": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "939": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "DUP3",
      "path": "65"
    },
    "940": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "ADD",
      "path": "65"
    },
    "941": {
      "op": "MSTORE"
    },
    "942": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "944": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "946": {
      "op": "DUP3"
    },
    "947": {
      "op": "ADD"
    },
    "948": {
      "op": "MSTORE"
    },
    "949": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "982": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "984": {
      "op": "DUP3"
    },
    "985": {
      "op": "ADD"
    },
    "986": {
      "op": "MSTORE"
    },
    "987": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "993": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "995": {
      "op": "SHL"
    },
    "996": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "998": {
      "op": "DUP3"
    },
    "999": {
      "op": "ADD"
    },
    "1000": {
      "op": "MSTORE"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1003": {
      "op": "ADD"
    },
    "1004": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x302"
    },
    "1007": {
      "op": "JUMP"
    },
    "1008": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6761,
        6846
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1009": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6880,
        6947
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 15,
      "value": "0x3FD"
    },
    "1012": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48"
    },
    "1013": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6903,
        6910
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1014": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6931,
        6946
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1015": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6912,
        6928
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1016": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6912,
        6946
      ],
      "op": "SUB",
      "path": "65"
    },
    "1017": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6880,
        6888
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x414"
    },
    "1020": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "jump": "i",
      "offset": [
        6880,
        6947
      ],
      "op": "JUMP",
      "path": "65"
    },
    "1021": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6880,
        6947
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1022": {
      "op": "POP"
    },
    "1023": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6975,
        6979
      ],
      "op": "PUSH1",
      "path": "65",
      "statement": 16,
      "value": "0x1"
    },
    "1025": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6975,
        6979
      ],
      "op": "SWAP4",
      "path": "65"
    },
    "1026": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "offset": [
        6581,
        6986
      ],
      "op": "SWAP3",
      "path": "65"
    },
    "1027": {
      "op": "POP"
    },
    "1028": {
      "op": "POP"
    },
    "1029": {
      "op": "POP"
    },
    "1030": {
      "fn": "MockERC20Decimals.decreaseAllowance",
      "jump": "o",
      "offset": [
        6581,
        6986
      ],
      "op": "JUMP",
      "path": "65"
    },
    "1031": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3859,
        4031
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1032": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3945,
        3949
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "1034": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3961,
        4003
      ],
      "op": "PUSH2",
      "path": "65",
      "statement": 17,
      "value": "0x26B"
    },
    "1037": {
      "fn": "Context._msgSender",
      "offset": [
        687,
        697
      ],
      "op": "CALLER",
      "path": "48"
    },
    "1038": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3985,
        3994
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1039": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3996,
        4002
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1040": {
      "fn": "MockERC20Decimals.transfer",
      "offset": [
        3961,
        3970
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x538"
    },
    "1043": {
      "fn": "MockERC20Decimals.transfer",
      "jump": "i",
      "offset": [
        3961,
        4003
      ],
      "op": "JUMP",
      "path": "65"
    },
    "1044": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10157,
        10527
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1045": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1049": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1051": {
      "op": "SHL"
    },
    "1052": {
      "op": "SUB"
    },
    "1053": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10288,
        10307
      ],
      "op": "DUP4",
      "path": "65",
      "statement": 18
    },
    "1054": {
      "branch": 30,
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10288,
        10307
      ],
      "op": "AND",
      "path": "65"
    },
    "1055": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x476"
    },
    "1058": {
      "branch": 30,
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "1059": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1061": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1062": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1066": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1068": {
      "op": "SHL"
    },
    "1069": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1070": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1071": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1073": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "1075": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1076": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "ADD",
      "path": "65"
    },
    "1077": {
      "op": "MSTORE"
    },
    "1078": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1080": {
      "op": "DUP1"
    },
    "1081": {
      "op": "DUP3"
    },
    "1082": {
      "op": "ADD"
    },
    "1083": {
      "op": "MSTORE"
    },
    "1084": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "1117": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1119": {
      "op": "DUP3"
    },
    "1120": {
      "op": "ADD"
    },
    "1121": {
      "op": "MSTORE"
    },
    "1122": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "1127": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1129": {
      "op": "SHL"
    },
    "1130": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1132": {
      "op": "DUP3"
    },
    "1133": {
      "op": "ADD"
    },
    "1134": {
      "op": "MSTORE"
    },
    "1135": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1137": {
      "op": "ADD"
    },
    "1138": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x302"
    },
    "1141": {
      "op": "JUMP"
    },
    "1142": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10280,
        10348
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1143": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1145": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1147": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1149": {
      "op": "SHL"
    },
    "1150": {
      "op": "SUB"
    },
    "1151": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10366,
        10387
      ],
      "op": "DUP3",
      "path": "65",
      "statement": 19
    },
    "1152": {
      "branch": 31,
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10366,
        10387
      ],
      "op": "AND",
      "path": "65"
    },
    "1153": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x4D7"
    },
    "1156": {
      "branch": 31,
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "1157": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1159": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1160": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1164": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1166": {
      "op": "SHL"
    },
    "1167": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1168": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1169": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1171": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "1173": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1174": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "ADD",
      "path": "65"
    },
    "1175": {
      "op": "MSTORE"
    },
    "1176": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1178": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1180": {
      "op": "DUP3"
    },
    "1181": {
      "op": "ADD"
    },
    "1182": {
      "op": "MSTORE"
    },
    "1183": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "1216": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1218": {
      "op": "DUP3"
    },
    "1219": {
      "op": "ADD"
    },
    "1220": {
      "op": "MSTORE"
    },
    "1221": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "1224": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "1226": {
      "op": "SHL"
    },
    "1227": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1229": {
      "op": "DUP3"
    },
    "1230": {
      "op": "ADD"
    },
    "1231": {
      "op": "MSTORE"
    },
    "1232": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1234": {
      "op": "ADD"
    },
    "1235": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x302"
    },
    "1238": {
      "op": "JUMP"
    },
    "1239": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10358,
        10426
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1242": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1244": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1246": {
      "op": "SHL"
    },
    "1247": {
      "op": "SUB"
    },
    "1248": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP4",
      "path": "65",
      "statement": 20
    },
    "1249": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1250": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "AND",
      "path": "65"
    },
    "1251": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "1253": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1254": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1255": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1256": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10448
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x1"
    },
    "1258": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "1260": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1261": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1262": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1263": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1265": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP1",
      "path": "65"
    },
    "1266": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "DUP4",
      "path": "65"
    },
    "1267": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10455
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "1268": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "SWAP5",
      "path": "65"
    },
    "1269": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "DUP8",
      "path": "65"
    },
    "1270": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "AND",
      "path": "65"
    },
    "1271": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "DUP1",
      "path": "65"
    },
    "1272": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1273": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1274": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "SWAP5",
      "path": "65"
    },
    "1275": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1276": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1277": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "1278": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1279": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1280": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10464
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "1281": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10473
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1282": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10473
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1283": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10437,
        10473
      ],
      "op": "SSTORE",
      "path": "65"
    },
    "1284": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "SWAP1",
      "path": "65",
      "statement": 21
    },
    "1285": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1286": {
      "op": "DUP5"
    },
    "1287": {
      "op": "DUP2"
    },
    "1288": {
      "op": "MSTORE"
    },
    "1289": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "PUSH32",
      "path": "65",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "1322": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "1323": {
      "op": "ADD"
    },
    "1324": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1326": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1327": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "DUP1",
      "path": "65"
    },
    "1328": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "1329": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "SUB",
      "path": "65"
    },
    "1330": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1331": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10488,
        10520
      ],
      "op": "LOG3",
      "path": "65"
    },
    "1332": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10157,
        10527
      ],
      "op": "POP",
      "path": "65"
    },
    "1333": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10157,
        10527
      ],
      "op": "POP",
      "path": "65"
    },
    "1334": {
      "fn": "MockERC20Decimals._approve",
      "offset": [
        10157,
        10527
      ],
      "op": "POP",
      "path": "65"
    },
    "1335": {
      "fn": "MockERC20Decimals._approve",
      "jump": "o",
      "offset": [
        10157,
        10527
      ],
      "op": "JUMP",
      "path": "65"
    },
    "1336": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7460,
        8173
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1341": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1343": {
      "op": "SHL"
    },
    "1344": {
      "op": "SUB"
    },
    "1345": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7595,
        7615
      ],
      "op": "DUP4",
      "path": "65",
      "statement": 22
    },
    "1346": {
      "branch": 32,
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7595,
        7615
      ],
      "op": "AND",
      "path": "65"
    },
    "1347": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x59C"
    },
    "1350": {
      "branch": 32,
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "1351": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1353": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1354": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1358": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1360": {
      "op": "SHL"
    },
    "1361": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1362": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1363": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1365": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "1367": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1368": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "ADD",
      "path": "65"
    },
    "1369": {
      "op": "MSTORE"
    },
    "1370": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "1372": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1374": {
      "op": "DUP3"
    },
    "1375": {
      "op": "ADD"
    },
    "1376": {
      "op": "MSTORE"
    },
    "1377": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1412": {
      "op": "DUP3"
    },
    "1413": {
      "op": "ADD"
    },
    "1414": {
      "op": "MSTORE"
    },
    "1415": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "1421": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "1423": {
      "op": "SHL"
    },
    "1424": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1426": {
      "op": "DUP3"
    },
    "1427": {
      "op": "ADD"
    },
    "1428": {
      "op": "MSTORE"
    },
    "1429": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1431": {
      "op": "ADD"
    },
    "1432": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x302"
    },
    "1435": {
      "op": "JUMP"
    },
    "1436": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7587,
        7657
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1439": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1441": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1443": {
      "op": "SHL"
    },
    "1444": {
      "op": "SUB"
    },
    "1445": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7675,
        7698
      ],
      "op": "DUP3",
      "path": "65",
      "statement": 23
    },
    "1446": {
      "branch": 33,
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7675,
        7698
      ],
      "op": "AND",
      "path": "65"
    },
    "1447": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x5FE"
    },
    "1450": {
      "branch": 33,
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "1451": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1453": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1454": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1460": {
      "op": "SHL"
    },
    "1461": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1462": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1465": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "1467": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1468": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "ADD",
      "path": "65"
    },
    "1469": {
      "op": "MSTORE"
    },
    "1470": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "1472": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1474": {
      "op": "DUP3"
    },
    "1475": {
      "op": "ADD"
    },
    "1476": {
      "op": "MSTORE"
    },
    "1477": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "1510": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1512": {
      "op": "DUP3"
    },
    "1513": {
      "op": "ADD"
    },
    "1514": {
      "op": "MSTORE"
    },
    "1515": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "1519": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "1521": {
      "op": "SHL"
    },
    "1522": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1524": {
      "op": "DUP3"
    },
    "1525": {
      "op": "ADD"
    },
    "1526": {
      "op": "MSTORE"
    },
    "1527": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1529": {
      "op": "ADD"
    },
    "1530": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x302"
    },
    "1533": {
      "op": "JUMP"
    },
    "1534": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7667,
        7738
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1535": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1537": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1539": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1541": {
      "op": "SHL"
    },
    "1542": {
      "op": "SUB"
    },
    "1543": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "DUP4",
      "path": "65"
    },
    "1544": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "AND",
      "path": "65"
    },
    "1545": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7807,
        7828
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "1547": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1548": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1549": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1550": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "1552": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1553": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1554": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1555": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1557": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1558": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "1559": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7831,
        7848
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "1560": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7866,
        7889
      ],
      "op": "DUP2",
      "path": "65",
      "statement": 24
    },
    "1561": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7866,
        7889
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1562": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7866,
        7889
      ],
      "op": "LT",
      "path": "65"
    },
    "1563": {
      "branch": 34,
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7866,
        7889
      ],
      "op": "ISZERO",
      "path": "65"
    },
    "1564": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x676"
    },
    "1567": {
      "branch": 34,
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "JUMPI",
      "path": "65"
    },
    "1568": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1570": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1571": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1577": {
      "op": "SHL"
    },
    "1578": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1579": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1580": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1582": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x4"
    },
    "1584": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1585": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "ADD",
      "path": "65"
    },
    "1586": {
      "op": "MSTORE"
    },
    "1587": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1589": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1591": {
      "op": "DUP3"
    },
    "1592": {
      "op": "ADD"
    },
    "1593": {
      "op": "MSTORE"
    },
    "1594": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "1627": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1629": {
      "op": "DUP3"
    },
    "1630": {
      "op": "ADD"
    },
    "1631": {
      "op": "MSTORE"
    },
    "1632": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "1639": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "1641": {
      "op": "SHL"
    },
    "1642": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1644": {
      "op": "DUP3"
    },
    "1645": {
      "op": "ADD"
    },
    "1646": {
      "op": "MSTORE"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1649": {
      "op": "ADD"
    },
    "1650": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x302"
    },
    "1653": {
      "op": "JUMP"
    },
    "1654": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7858,
        7932
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1655": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1657": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1659": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1661": {
      "op": "SHL"
    },
    "1662": {
      "op": "SUB"
    },
    "1663": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "DUP1",
      "path": "65",
      "statement": 25
    },
    "1664": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1665": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "AND",
      "path": "65"
    },
    "1666": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7975
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x0"
    },
    "1668": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1669": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1670": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1671": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x20"
    },
    "1673": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1674": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1675": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1676": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1678": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "DUP1",
      "path": "65"
    },
    "1679": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "DUP3",
      "path": "65"
    },
    "1680": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7983
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "1681": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7986,
        8008
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1682": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7986,
        8008
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1683": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7986,
        8008
      ],
      "op": "SUB",
      "path": "65"
    },
    "1684": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        8008
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1685": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        8008
      ],
      "op": "SSTORE",
      "path": "65"
    },
    "1686": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "SWAP2",
      "path": "65",
      "statement": 26
    },
    "1687": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "DUP6",
      "path": "65"
    },
    "1688": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "AND",
      "path": "65"
    },
    "1689": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1690": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "MSTORE",
      "path": "65"
    },
    "1691": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1692": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1693": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8048
      ],
      "op": "KECCAK256",
      "path": "65"
    },
    "1694": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "DUP1",
      "path": "65"
    },
    "1695": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "SLOAD",
      "path": "65"
    },
    "1696": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8002,
        8008
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1697": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8002,
        8008
      ],
      "op": "SWAP3",
      "path": "65"
    },
    "1698": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7966,
        7975
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1699": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x6AD"
    },
    "1702": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1703": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8002,
        8008
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1704": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8002,
        8008
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1705": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x86E"
    },
    "1708": {
      "fn": "MockERC20Decimals._transfer",
      "jump": "i",
      "offset": [
        8028,
        8058
      ],
      "op": "JUMP",
      "path": "65"
    },
    "1709": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1710": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "SWAP3",
      "path": "65"
    },
    "1711": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "POP",
      "path": "65"
    },
    "1712": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "POP",
      "path": "65"
    },
    "1713": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "DUP2",
      "path": "65"
    },
    "1714": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1715": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "SSTORE",
      "path": "65"
    },
    "1716": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8028,
        8058
      ],
      "op": "POP",
      "path": "65"
    },
    "1717": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8091,
        8100
      ],
      "op": "DUP3",
      "path": "65",
      "statement": 27
    },
    "1718": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1722": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1724": {
      "op": "SHL"
    },
    "1725": {
      "op": "SUB"
    },
    "1726": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "AND",
      "path": "65"
    },
    "1727": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8083,
        8089
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1728": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1730": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1732": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1734": {
      "op": "SHL"
    },
    "1735": {
      "op": "SUB"
    },
    "1736": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "AND",
      "path": "65"
    },
    "1737": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "PUSH32",
      "path": "65",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "1770": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8102,
        8108
      ],
      "op": "DUP5",
      "path": "65"
    },
    "1771": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1773": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1774": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "PUSH2",
      "path": "65",
      "value": "0x6F9"
    },
    "1777": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "1778": {
      "op": "DUP2"
    },
    "1779": {
      "op": "MSTORE"
    },
    "1780": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1782": {
      "op": "ADD"
    },
    "1783": {
      "op": "SWAP1"
    },
    "1784": {
      "op": "JUMP"
    },
    "1785": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "JUMPDEST",
      "path": "65"
    },
    "1786": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "PUSH1",
      "path": "65",
      "value": "0x40"
    },
    "1788": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "MLOAD",
      "path": "65"
    },
    "1789": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "DUP1",
      "path": "65"
    },
    "1790": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "SWAP2",
      "path": "65"
    },
    "1791": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "SUB",
      "path": "65"
    },
    "1792": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "SWAP1",
      "path": "65"
    },
    "1793": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        8074,
        8109
      ],
      "op": "LOG3",
      "path": "65"
    },
    "1794": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7577,
        8173
      ],
      "op": "POP",
      "path": "65"
    },
    "1795": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7460,
        8173
      ],
      "op": "POP",
      "path": "65"
    },
    "1796": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7460,
        8173
      ],
      "op": "POP",
      "path": "65"
    },
    "1797": {
      "fn": "MockERC20Decimals._transfer",
      "offset": [
        7460,
        8173
      ],
      "op": "POP",
      "path": "65"
    },
    "1798": {
      "fn": "MockERC20Decimals._transfer",
      "jump": "o",
      "offset": [
        7460,
        8173
      ],
      "op": "JUMP",
      "path": "65"
    },
    "1799": {
      "op": "JUMPDEST"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1802": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1804": {
      "op": "DUP1"
    },
    "1805": {
      "op": "DUP4"
    },
    "1806": {
      "op": "MSTORE"
    },
    "1807": {
      "op": "DUP4"
    },
    "1808": {
      "op": "MLOAD"
    },
    "1809": {
      "op": "DUP1"
    },
    "1810": {
      "op": "DUP3"
    },
    "1811": {
      "op": "DUP6"
    },
    "1812": {
      "op": "ADD"
    },
    "1813": {
      "op": "MSTORE"
    },
    "1814": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1816": {
      "op": "JUMPDEST"
    },
    "1817": {
      "op": "DUP2"
    },
    "1818": {
      "op": "DUP2"
    },
    "1819": {
      "op": "LT"
    },
    "1820": {
      "op": "ISZERO"
    },
    "1821": {
      "op": "PUSH2",
      "value": "0x734"
    },
    "1824": {
      "op": "JUMPI"
    },
    "1825": {
      "op": "DUP6"
    },
    "1826": {
      "op": "DUP2"
    },
    "1827": {
      "op": "ADD"
    },
    "1828": {
      "op": "DUP4"
    },
    "1829": {
      "op": "ADD"
    },
    "1830": {
      "op": "MLOAD"
    },
    "1831": {
      "op": "DUP6"
    },
    "1832": {
      "op": "DUP3"
    },
    "1833": {
      "op": "ADD"
    },
    "1834": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1836": {
      "op": "ADD"
    },
    "1837": {
      "op": "MSTORE"
    },
    "1838": {
      "op": "DUP3"
    },
    "1839": {
      "op": "ADD"
    },
    "1840": {
      "op": "PUSH2",
      "value": "0x718"
    },
    "1843": {
      "op": "JUMP"
    },
    "1844": {
      "op": "JUMPDEST"
    },
    "1845": {
      "op": "DUP2"
    },
    "1846": {
      "op": "DUP2"
    },
    "1847": {
      "op": "GT"
    },
    "1848": {
      "op": "ISZERO"
    },
    "1849": {
      "op": "PUSH2",
      "value": "0x746"
    },
    "1852": {
      "op": "JUMPI"
    },
    "1853": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1855": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1857": {
      "op": "DUP4"
    },
    "1858": {
      "op": "DUP8"
    },
    "1859": {
      "op": "ADD"
    },
    "1860": {
      "op": "ADD"
    },
    "1861": {
      "op": "MSTORE"
    },
    "1862": {
      "op": "JUMPDEST"
    },
    "1863": {
      "op": "POP"
    },
    "1864": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1866": {
      "op": "ADD"
    },
    "1867": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1869": {
      "op": "NOT"
    },
    "1870": {
      "op": "AND"
    },
    "1871": {
      "op": "SWAP3"
    },
    "1872": {
      "op": "SWAP1"
    },
    "1873": {
      "op": "SWAP3"
    },
    "1874": {
      "op": "ADD"
    },
    "1875": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1877": {
      "op": "ADD"
    },
    "1878": {
      "op": "SWAP4"
    },
    "1879": {
      "op": "SWAP3"
    },
    "1880": {
      "op": "POP"
    },
    "1881": {
      "op": "POP"
    },
    "1882": {
      "op": "POP"
    },
    "1883": {
      "jump": "o",
      "op": "JUMP"
    },
    "1884": {
      "op": "JUMPDEST"
    },
    "1885": {
      "op": "DUP1"
    },
    "1886": {
      "op": "CALLDATALOAD"
    },
    "1887": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1889": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1893": {
      "op": "SHL"
    },
    "1894": {
      "op": "SUB"
    },
    "1895": {
      "op": "DUP2"
    },
    "1896": {
      "op": "AND"
    },
    "1897": {
      "op": "DUP2"
    },
    "1898": {
      "op": "EQ"
    },
    "1899": {
      "op": "PUSH2",
      "value": "0x773"
    },
    "1902": {
      "op": "JUMPI"
    },
    "1903": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1905": {
      "op": "DUP1"
    },
    "1906": {
      "op": "REVERT"
    },
    "1907": {
      "op": "JUMPDEST"
    },
    "1908": {
      "op": "SWAP2"
    },
    "1909": {
      "op": "SWAP1"
    },
    "1910": {
      "op": "POP"
    },
    "1911": {
      "jump": "o",
      "op": "JUMP"
    },
    "1912": {
      "op": "JUMPDEST"
    },
    "1913": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1915": {
      "op": "DUP1"
    },
    "1916": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1918": {
      "op": "DUP4"
    },
    "1919": {
      "op": "DUP6"
    },
    "1920": {
      "op": "SUB"
    },
    "1921": {
      "op": "SLT"
    },
    "1922": {
      "op": "ISZERO"
    },
    "1923": {
      "op": "PUSH2",
      "value": "0x78B"
    },
    "1926": {
      "op": "JUMPI"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1929": {
      "op": "DUP1"
    },
    "1930": {
      "op": "REVERT"
    },
    "1931": {
      "op": "JUMPDEST"
    },
    "1932": {
      "op": "PUSH2",
      "value": "0x794"
    },
    "1935": {
      "op": "DUP4"
    },
    "1936": {
      "op": "PUSH2",
      "value": "0x75C"
    },
    "1939": {
      "jump": "i",
      "op": "JUMP"
    },
    "1940": {
      "op": "JUMPDEST"
    },
    "1941": {
      "op": "SWAP5"
    },
    "1942": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1944": {
      "op": "SWAP4"
    },
    "1945": {
      "op": "SWAP1"
    },
    "1946": {
      "op": "SWAP4"
    },
    "1947": {
      "op": "ADD"
    },
    "1948": {
      "op": "CALLDATALOAD"
    },
    "1949": {
      "op": "SWAP4"
    },
    "1950": {
      "op": "POP"
    },
    "1951": {
      "op": "POP"
    },
    "1952": {
      "op": "POP"
    },
    "1953": {
      "jump": "o",
      "op": "JUMP"
    },
    "1954": {
      "op": "JUMPDEST"
    },
    "1955": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1957": {
      "op": "DUP1"
    },
    "1958": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1960": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1962": {
      "op": "DUP5"
    },
    "1963": {
      "op": "DUP7"
    },
    "1964": {
      "op": "SUB"
    },
    "1965": {
      "op": "SLT"
    },
    "1966": {
      "op": "ISZERO"
    },
    "1967": {
      "op": "PUSH2",
      "value": "0x7B7"
    },
    "1970": {
      "op": "JUMPI"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1973": {
      "op": "DUP1"
    },
    "1974": {
      "op": "REVERT"
    },
    "1975": {
      "op": "JUMPDEST"
    },
    "1976": {
      "op": "PUSH2",
      "value": "0x7C0"
    },
    "1979": {
      "op": "DUP5"
    },
    "1980": {
      "op": "PUSH2",
      "value": "0x75C"
    },
    "1983": {
      "jump": "i",
      "op": "JUMP"
    },
    "1984": {
      "op": "JUMPDEST"
    },
    "1985": {
      "op": "SWAP3"
    },
    "1986": {
      "op": "POP"
    },
    "1987": {
      "op": "PUSH2",
      "value": "0x7CE"
    },
    "1990": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1992": {
      "op": "DUP6"
    },
    "1993": {
      "op": "ADD"
    },
    "1994": {
      "op": "PUSH2",
      "value": "0x75C"
    },
    "1997": {
      "jump": "i",
      "op": "JUMP"
    },
    "1998": {
      "op": "JUMPDEST"
    },
    "1999": {
      "op": "SWAP2"
    },
    "2000": {
      "op": "POP"
    },
    "2001": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2003": {
      "op": "DUP5"
    },
    "2004": {
      "op": "ADD"
    },
    "2005": {
      "op": "CALLDATALOAD"
    },
    "2006": {
      "op": "SWAP1"
    },
    "2007": {
      "op": "POP"
    },
    "2008": {
      "op": "SWAP3"
    },
    "2009": {
      "op": "POP"
    },
    "2010": {
      "op": "SWAP3"
    },
    "2011": {
      "op": "POP"
    },
    "2012": {
      "op": "SWAP3"
    },
    "2013": {
      "jump": "o",
      "op": "JUMP"
    },
    "2014": {
      "op": "JUMPDEST"
    },
    "2015": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2017": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2019": {
      "op": "DUP3"
    },
    "2020": {
      "op": "DUP5"
    },
    "2021": {
      "op": "SUB"
    },
    "2022": {
      "op": "SLT"
    },
    "2023": {
      "op": "ISZERO"
    },
    "2024": {
      "op": "PUSH2",
      "value": "0x7F0"
    },
    "2027": {
      "op": "JUMPI"
    },
    "2028": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2030": {
      "op": "DUP1"
    },
    "2031": {
      "op": "REVERT"
    },
    "2032": {
      "op": "JUMPDEST"
    },
    "2033": {
      "op": "PUSH2",
      "value": "0x7F9"
    },
    "2036": {
      "op": "DUP3"
    },
    "2037": {
      "op": "PUSH2",
      "value": "0x75C"
    },
    "2040": {
      "jump": "i",
      "op": "JUMP"
    },
    "2041": {
      "op": "JUMPDEST"
    },
    "2042": {
      "op": "SWAP4"
    },
    "2043": {
      "op": "SWAP3"
    },
    "2044": {
      "op": "POP"
    },
    "2045": {
      "op": "POP"
    },
    "2046": {
      "op": "POP"
    },
    "2047": {
      "jump": "o",
      "op": "JUMP"
    },
    "2048": {
      "op": "JUMPDEST"
    },
    "2049": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2051": {
      "op": "DUP1"
    },
    "2052": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2054": {
      "op": "DUP4"
    },
    "2055": {
      "op": "DUP6"
    },
    "2056": {
      "op": "SUB"
    },
    "2057": {
      "op": "SLT"
    },
    "2058": {
      "op": "ISZERO"
    },
    "2059": {
      "op": "PUSH2",
      "value": "0x813"
    },
    "2062": {
      "op": "JUMPI"
    },
    "2063": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2065": {
      "op": "DUP1"
    },
    "2066": {
      "op": "REVERT"
    },
    "2067": {
      "op": "JUMPDEST"
    },
    "2068": {
      "op": "PUSH2",
      "value": "0x81C"
    },
    "2071": {
      "op": "DUP4"
    },
    "2072": {
      "op": "PUSH2",
      "value": "0x75C"
    },
    "2075": {
      "jump": "i",
      "op": "JUMP"
    },
    "2076": {
      "op": "JUMPDEST"
    },
    "2077": {
      "op": "SWAP2"
    },
    "2078": {
      "op": "POP"
    },
    "2079": {
      "op": "PUSH2",
      "value": "0x82A"
    },
    "2082": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2084": {
      "op": "DUP5"
    },
    "2085": {
      "op": "ADD"
    },
    "2086": {
      "op": "PUSH2",
      "value": "0x75C"
    },
    "2089": {
      "jump": "i",
      "op": "JUMP"
    },
    "2090": {
      "op": "JUMPDEST"
    },
    "2091": {
      "op": "SWAP1"
    },
    "2092": {
      "op": "POP"
    },
    "2093": {
      "op": "SWAP3"
    },
    "2094": {
      "op": "POP"
    },
    "2095": {
      "op": "SWAP3"
    },
    "2096": {
      "op": "SWAP1"
    },
    "2097": {
      "op": "POP"
    },
    "2098": {
      "jump": "o",
      "op": "JUMP"
    },
    "2099": {
      "op": "JUMPDEST"
    },
    "2100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2102": {
      "op": "DUP2"
    },
    "2103": {
      "op": "DUP2"
    },
    "2104": {
      "op": "SHR"
    },
    "2105": {
      "op": "SWAP1"
    },
    "2106": {
      "op": "DUP3"
    },
    "2107": {
      "op": "AND"
    },
    "2108": {
      "op": "DUP1"
    },
    "2109": {
      "op": "PUSH2",
      "value": "0x847"
    },
    "2112": {
      "op": "JUMPI"
    },
    "2113": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "2115": {
      "op": "DUP3"
    },
    "2116": {
      "op": "AND"
    },
    "2117": {
      "op": "SWAP2"
    },
    "2118": {
      "op": "POP"
    },
    "2119": {
      "op": "JUMPDEST"
    },
    "2120": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2122": {
      "op": "DUP3"
    },
    "2123": {
      "op": "LT"
    },
    "2124": {
      "op": "DUP2"
    },
    "2125": {
      "op": "EQ"
    },
    "2126": {
      "op": "ISZERO"
    },
    "2127": {
      "op": "PUSH2",
      "value": "0x868"
    },
    "2130": {
      "op": "JUMPI"
    },
    "2131": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2136": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2138": {
      "op": "SHL"
    },
    "2139": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2141": {
      "op": "MSTORE"
    },
    "2142": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "2144": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2146": {
      "op": "MSTORE"
    },
    "2147": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2151": {
      "op": "REVERT"
    },
    "2152": {
      "op": "JUMPDEST"
    },
    "2153": {
      "op": "POP"
    },
    "2154": {
      "op": "SWAP2"
    },
    "2155": {
      "op": "SWAP1"
    },
    "2156": {
      "op": "POP"
    },
    "2157": {
      "jump": "o",
      "op": "JUMP"
    },
    "2158": {
      "op": "JUMPDEST"
    },
    "2159": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2161": {
      "op": "DUP3"
    },
    "2162": {
      "op": "NOT"
    },
    "2163": {
      "op": "DUP3"
    },
    "2164": {
      "op": "GT"
    },
    "2165": {
      "op": "ISZERO"
    },
    "2166": {
      "op": "PUSH2",
      "value": "0x88F"
    },
    "2169": {
      "op": "JUMPI"
    },
    "2170": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2175": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2177": {
      "op": "SHL"
    },
    "2178": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2180": {
      "op": "MSTORE"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2183": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2185": {
      "op": "MSTORE"
    },
    "2186": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2188": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2190": {
      "op": "REVERT"
    },
    "2191": {
      "op": "JUMPDEST"
    },
    "2192": {
      "op": "POP"
    },
    "2193": {
      "op": "ADD"
    },
    "2194": {
      "op": "SWAP1"
    },
    "2195": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "aae86a4d84a0ec1c056045d641c942c590a623cf",
  "source": "pragma solidity 0.8.12;\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n// Code is Apache-2.0 and docs are CC-BY-4.0\n\nimport \"../../interfaces/IERC20.sol\";\n\nimport \"../ERC721/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract MockERC20Decimals is Context, IERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        _mint(msg.sender,10e22);\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public override view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}",
  "sourceMap": "1431:10511:65:-:0;;;2031:194;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2114:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2137:17:65;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2164:9:65;:21;;-1:-1:-1;;2164:21:65;;;;;;;2195:23;2201:10;2212:5;2195;:23::i;:::-;2031:194;;;1431:10511;;8449:389;-1:-1:-1;;;;;8532:21:65;;8524:65;;;;-1:-1:-1;;;8524:65:65;;1955:2:75;8524:65:65;;;1937:21:75;1994:2;1974:18;;;1967:30;2033:33;2013:18;;;2006:61;2084:18;;8524:65:65;;;;;;;;8676:6;8660:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8692:18:65;;:9;:18;;;;;;;;;;:28;;8714:6;;8692:9;:28;;8714:6;;8692:28;:::i;:::-;;;;-1:-1:-1;;8735:37:65;;2489:25:75;;;-1:-1:-1;;;;;8735:37:65;;;8752:1;;8735:37;;2477:2:75;2462:18;8735:37:65;;;;;;;8449:389;;:::o;1431:10511::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1431:10511:65;;;-1:-1:-1;1431:10511:65;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:75;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:75;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:75;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:75:o;1036:712::-;1142:6;1150;1158;1211:2;1199:9;1190:7;1186:23;1182:32;1179:52;;;1227:1;1224;1217:12;1179:52;1254:16;;-1:-1:-1;;;;;1319:14:75;;;1316:34;;;1346:1;1343;1336:12;1316:34;1369:61;1422:7;1413:6;1402:9;1398:22;1369:61;:::i;:::-;1359:71;;1476:2;1465:9;1461:18;1455:25;1439:41;;1505:2;1495:8;1492:16;1489:36;;;1521:1;1518;1511:12;1489:36;;1544:63;1599:7;1588:8;1577:9;1573:24;1544:63;:::i;:::-;1534:73;;;1650:2;1639:9;1635:18;1629:25;1694:4;1687:5;1683:16;1676:5;1673:27;1663:55;;1714:1;1711;1704:12;1663:55;1737:5;1727:15;;;1036:712;;;;;:::o;2113:225::-;2153:3;2184:1;2180:6;2177:1;2174:13;2171:136;;;2229:10;2224:3;2220:20;2217:1;2210:31;2264:4;2261:1;2254:15;2292:4;2289:1;2282:15;2171:136;-1:-1:-1;2323:9:75;;2113:225::o;2525:380::-;2604:1;2600:12;;;;2647;;;2668:61;;2722:4;2714:6;2710:17;2700:27;;2668:61;2775:2;2767:6;2764:14;2744:18;2741:38;2738:161;;;2821:10;2816:3;2812:20;2809:1;2802:31;2856:4;2853:1;2846:15;2884:4;2881:1;2874:15;2738:161;;2525:380;;;:::o;:::-;1431:10511:65;;;;;;",
  "sourcePath": "contracts/oceanv4/utils/mock/MockERC20Decimals.sol",
  "type": "contract"
}