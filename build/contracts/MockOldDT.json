{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "currentMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderTxId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OrderFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "mrktFeeCollector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketFee",
          "type": "uint256"
        }
      ],
      "name": "OrderStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_COMMUNITY_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_MARKET_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blob",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feePercentage",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderTxId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        }
      ],
      "name": "finishOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "minterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "blob_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "feeCollector",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "proposeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "serviceId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mrktFeeCollector",
          "type": "address"
        }
      ],
      "name": "startOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "11": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol",
    "3": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
    "4": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/IERC20.sol",
    "6": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "68": "contracts/oceanv4/utils/mock/MockOldDT.sol",
    "9": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/oceanv4/utils/mock/MockOldDT.sol",
    "exportedSymbols": {
      "Context": [
        29252
      ],
      "ERC20": [
        29058
      ],
      "IERC20": [
        27843
      ],
      "IERC20Metadata": [
        29906
      ],
      "MockOldDT": [
        27023
      ],
      "SafeMath": [
        28379
      ]
    },
    "id": 27024,
    "license": "(Apache-2.0 AND CC-BY-4.0)",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 26511,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:68"
      },
      {
        "absolutePath": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol",
        "id": 26512,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27024,
        "sourceUnit": 29059,
        "src": "231:83:68",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol",
        "id": 26513,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 27024,
        "sourceUnit": 28380,
        "src": "315:85:68",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": [
              {
                "hexValue": "54657374",
                "id": 26516,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "624:6:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_85cc825a98ec217d960f113f5f80a95d7fd18e3725d37df428eb14f880bdfc12",
                  "typeString": "literal_string \"Test\""
                },
                "value": "Test"
              },
              {
                "hexValue": "5445535453594d424f4c",
                "id": 26517,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "631:12:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_515738755f97e96d6053b1bc326ebb2955d5226b2a42134abc10e873288555c8",
                  "typeString": "literal_string \"TESTSYMBOL\""
                },
                "value": "TESTSYMBOL"
              }
            ],
            "baseName": {
              "id": 26515,
              "name": "ERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29058,
              "src": "618:5:68"
            },
            "id": 26518,
            "nodeType": "InheritanceSpecifier",
            "src": "618:26:68"
          }
        ],
        "canonicalName": "MockOldDT",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 26514,
          "nodeType": "StructuredDocumentation",
          "src": "402:193:68",
          "text": " @title DatatokenTemplate\n  \n @dev DatatokenTemplate is an ERC20 compliant token template\n      Used by the factory contract as a bytecode reference to \n      deploy new Datatokens."
        },
        "fullyImplemented": true,
        "id": 27023,
        "linearizedBaseContracts": [
          27023,
          29058,
          29906,
          27843,
          29252
        ],
        "name": "MockOldDT",
        "nameLocation": "605:9:68",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 26521,
            "libraryName": {
              "id": 26519,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 28379,
              "src": "657:8:68"
            },
            "nodeType": "UsingForDirective",
            "src": "651:27:68",
            "typeName": {
              "id": 26520,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "670:7:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 26524,
            "mutability": "mutable",
            "name": "_name",
            "nameLocation": "700:5:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "684:34:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 26522,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "684:6:68",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "4d4f434b56334454",
              "id": 26523,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "708:10:68",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_76522d05f5d00db145aaf65d0daa578df9b18cd55ca4fffc39842aebe2bed2bc",
                "typeString": "literal_string \"MOCKV3DT\""
              },
              "value": "MOCKV3DT"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26527,
            "mutability": "mutable",
            "name": "_symbol",
            "nameLocation": "740:7:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "724:32:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 26525,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "724:6:68",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "56334454",
              "id": 26526,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "750:6:68",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_e442f44e2364bcbb54499f50c09482108a0741d233bcf0156588d1aeb67f5667",
                "typeString": "literal_string \"V3DT\""
              },
              "value": "V3DT"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26530,
            "mutability": "mutable",
            "name": "_blob",
            "nameLocation": "778:5:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "762:30:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 26528,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "762:6:68",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "626c6f62",
              "id": 26529,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "786:6:68",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8cc1dfa573acb2783172c35d98a582e999384acb5250c35634b461d8d795cde2",
                "typeString": "literal_string \"blob\""
              },
              "value": "blob"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26533,
            "mutability": "mutable",
            "name": "_cap",
            "nameLocation": "814:4:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "798:27:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26531,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "798:7:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31653231",
              "id": 26532,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "821:4:68",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000000000000000000_by_1",
                "typeString": "int_const 1000000000000000000000"
              },
              "value": "1e21"
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 26536,
            "mutability": "constant",
            "name": "_decimals",
            "nameLocation": "854:9:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "831:37:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 26534,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "831:5:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "hexValue": "3138",
              "id": 26535,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "866:2:68",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26542,
            "mutability": "mutable",
            "name": "_communityFeeCollector",
            "nameLocation": "890:22:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "874:51:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 26537,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "874:7:68",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "30",
                  "id": 26540,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "923:1:68",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }
                ],
                "id": 26539,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "915:7:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_address_$",
                  "typeString": "type(address)"
                },
                "typeName": {
                  "id": 26538,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "915:7:68",
                  "typeDescriptions": {}
                }
              },
              "id": 26541,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "915:10:68",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26545,
            "mutability": "mutable",
            "name": "initialized",
            "nameLocation": "947:11:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "931:35:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 26543,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "931:4:68",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "value": {
              "hexValue": "66616c7365",
              "id": 26544,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "bool",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "961:5:68",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "value": "false"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26547,
            "mutability": "mutable",
            "name": "_minter",
            "nameLocation": "988:7:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "972:23:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 26546,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "972:7:68",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 26549,
            "mutability": "mutable",
            "name": "_proposedMinter",
            "nameLocation": "1017:15:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "1001:31:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 26548,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1001:7:68",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "functionSelector": "ec342ad0",
            "id": 26554,
            "mutability": "constant",
            "name": "BASE",
            "nameLocation": "1062:4:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "1038:37:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26550,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1038:7:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                "typeString": "int_const 1000000000000000000"
              },
              "id": 26553,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "hexValue": "3130",
                "id": 26551,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1069:2:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_10_by_1",
                  "typeString": "int_const 10"
                },
                "value": "10"
              },
              "nodeType": "BinaryOperation",
              "operator": "**",
              "rightExpression": {
                "hexValue": "3138",
                "id": 26552,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1073:2:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_18_by_1",
                  "typeString": "int_const 18"
                },
                "value": "18"
              },
              "src": "1069:6:68",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                "typeString": "int_const 1000000000000000000"
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "b2263a5d",
            "id": 26559,
            "mutability": "constant",
            "name": "BASE_COMMUNITY_FEE_PERCENTAGE",
            "nameLocation": "1105:29:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "1081:67:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26555,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1081:7:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 26558,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "id": 26556,
                "name": "BASE",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 26554,
                "src": "1137:4:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "/",
              "rightExpression": {
                "hexValue": "31303030",
                "id": 26557,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1144:4:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1000_by_1",
                  "typeString": "int_const 1000"
                },
                "value": "1000"
              },
              "src": "1137:11:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "294541c7",
            "id": 26564,
            "mutability": "constant",
            "name": "BASE_MARKET_FEE_PERCENTAGE",
            "nameLocation": "1178:26:68",
            "nodeType": "VariableDeclaration",
            "scope": 27023,
            "src": "1154:64:68",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26560,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1154:7:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 26563,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "lValueRequested": false,
              "leftExpression": {
                "id": 26561,
                "name": "BASE",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 26554,
                "src": "1207:4:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "/",
              "rightExpression": {
                "hexValue": "31303030",
                "id": 26562,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1214:4:68",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1000_by_1",
                  "typeString": "int_const 1000"
                },
                "value": "1000"
              },
              "src": "1207:11:68",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 26580,
            "name": "OrderStarted",
            "nameLocation": "1231:12:68",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 26579,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26566,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "1273:8:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1257:24:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26565,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1257:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26568,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "payer",
                  "nameLocation": "1311:5:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1295:21:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26567,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1295:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26570,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1338:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1330:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26569,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1330:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26572,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "serviceId",
                  "nameLocation": "1367:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1359:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26571,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1359:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26574,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "timestamp",
                  "nameLocation": "1399:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1391:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26573,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1391:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26576,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "mrktFeeCollector",
                  "nameLocation": "1438:16:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1422:32:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26575,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1422:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26578,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "marketFee",
                  "nameLocation": "1476:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26580,
                  "src": "1468:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26577,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1468:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1243:248:68"
            },
            "src": "1225:267:68"
          },
          {
            "anonymous": false,
            "id": 26594,
            "name": "OrderFinished",
            "nameLocation": "1504:13:68",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 26593,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26582,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "orderTxId",
                  "nameLocation": "1539:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26594,
                  "src": "1531:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 26581,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1531:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26584,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "1579:8:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26594,
                  "src": "1563:24:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26583,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1563:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26586,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1609:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26594,
                  "src": "1601:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26585,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1601:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26588,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "serviceId",
                  "nameLocation": "1638:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26594,
                  "src": "1630:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26587,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1630:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26590,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "provider",
                  "nameLocation": "1678:8:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26594,
                  "src": "1662:24:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26589,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1662:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26592,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "timestamp",
                  "nameLocation": "1708:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26594,
                  "src": "1700:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26591,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1700:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1517:206:68"
            },
            "src": "1498:226:68"
          },
          {
            "anonymous": false,
            "id": 26600,
            "name": "MinterProposed",
            "nameLocation": "1736:14:68",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 26599,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26596,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "currentMinter",
                  "nameLocation": "1768:13:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26600,
                  "src": "1760:21:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26595,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1760:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26598,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newMinter",
                  "nameLocation": "1799:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26600,
                  "src": "1791:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26597,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1791:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1750:64:68"
            },
            "src": "1730:85:68"
          },
          {
            "anonymous": false,
            "id": 26606,
            "name": "MinterApproved",
            "nameLocation": "1827:14:68",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 26605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26602,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "currentMinter",
                  "nameLocation": "1859:13:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26606,
                  "src": "1851:21:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26601,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1851:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26604,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newMinter",
                  "nameLocation": "1890:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26606,
                  "src": "1882:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26603,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1882:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1841:64:68"
            },
            "src": "1821:85:68"
          },
          {
            "body": {
              "id": 26615,
              "nodeType": "Block",
              "src": "1942:140:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "1973:12:68",
                        "subExpression": {
                          "id": 26609,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26545,
                          "src": "1974:11:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20746f6b656e20696e7374616e636520616c726561647920696e697469616c697a6564",
                        "id": 26611,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1999:55:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_59a189f3f828a99a28c06e7fb4f5d0403e7cf082d53ffb03f18997b78d332dce",
                          "typeString": "literal_string \"DatatokenTemplate: token instance already initialized\""
                        },
                        "value": "DatatokenTemplate: token instance already initialized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_59a189f3f828a99a28c06e7fb4f5d0403e7cf082d53ffb03f18997b78d332dce",
                          "typeString": "literal_string \"DatatokenTemplate: token instance already initialized\""
                        }
                      ],
                      "id": 26608,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1952:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1952:112:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26613,
                  "nodeType": "ExpressionStatement",
                  "src": "1952:112:68"
                },
                {
                  "id": 26614,
                  "nodeType": "PlaceholderStatement",
                  "src": "2074:1:68"
                }
              ]
            },
            "id": 26616,
            "name": "onlyNotInitialized",
            "nameLocation": "1921:18:68",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 26607,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1939:2:68"
            },
            "src": "1912:170:68",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26627,
              "nodeType": "Block",
              "src": "2114:130:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26622,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 26619,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2145:3:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 26620,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2145:10:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 26621,
                          "name": "_minter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26547,
                          "src": "2159:7:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2145:21:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20696e76616c6964206d696e746572",
                        "id": 26623,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2180:35:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d8ba23cbe2409428e39b95dd1ad87641cd75bfcf06590fca3397a11d9b47f592",
                          "typeString": "literal_string \"DatatokenTemplate: invalid minter\""
                        },
                        "value": "DatatokenTemplate: invalid minter"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d8ba23cbe2409428e39b95dd1ad87641cd75bfcf06590fca3397a11d9b47f592",
                          "typeString": "literal_string \"DatatokenTemplate: invalid minter\""
                        }
                      ],
                      "id": 26618,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2124:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26624,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2124:102:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26625,
                  "nodeType": "ExpressionStatement",
                  "src": "2124:102:68"
                },
                {
                  "id": 26626,
                  "nodeType": "PlaceholderStatement",
                  "src": "2236:1:68"
                }
              ]
            },
            "id": 26628,
            "name": "onlyMinter",
            "nameLocation": "2101:10:68",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 26617,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2111:2:68"
            },
            "src": "2092:152:68",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 26642,
              "nodeType": "Block",
              "src": "2278:163:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26632,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26524,
                        "src": "2313:5:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "id": 26633,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26527,
                        "src": "2332:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "expression": {
                          "id": 26634,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2353:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 26635,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2353:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26636,
                        "name": "_cap",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26533,
                        "src": "2377:4:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 26637,
                        "name": "_blob",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26530,
                        "src": "2395:5:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "expression": {
                          "id": 26638,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2414:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 26639,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2414:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 26631,
                      "name": "_initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26757,
                      "src": "2288:11:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$_t_bool_$",
                        "typeString": "function (string memory,string memory,address,uint256,string memory,address) returns (bool)"
                      }
                    },
                    "id": 26640,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2288:146:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26641,
                  "nodeType": "ExpressionStatement",
                  "src": "2288:146:68"
                }
              ]
            },
            "id": 26643,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26629,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2261:2:68"
            },
            "returnParameters": {
              "id": 26630,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2278:0:68"
            },
            "scope": 27023,
            "src": "2250:191:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 26671,
              "nodeType": "Block",
              "src": "2728:173:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26663,
                        "name": "name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26645,
                        "src": "2770:4:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 26664,
                        "name": "symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26647,
                        "src": "2788:6:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 26665,
                        "name": "minterAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26649,
                        "src": "2808:13:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26666,
                        "name": "cap_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26651,
                        "src": "2835:4:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 26667,
                        "name": "blob_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26653,
                        "src": "2853:5:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 26668,
                        "name": "feeCollector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26655,
                        "src": "2872:12:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 26662,
                      "name": "_initialize",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26757,
                      "src": "2745:11:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_string_memory_ptr_$_t_address_$returns$_t_bool_$",
                        "typeString": "function (string memory,string memory,address,uint256,string memory,address) returns (bool)"
                      }
                    },
                    "id": 26669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2745:149:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 26661,
                  "id": 26670,
                  "nodeType": "Return",
                  "src": "2738:156:68"
                }
              ]
            },
            "functionSelector": "9070d2f8",
            "id": 26672,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 26658,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 26657,
                  "name": "onlyNotInitialized",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26616,
                  "src": "2683:18:68"
                },
                "nodeType": "ModifierInvocation",
                "src": "2683:18:68"
              }
            ],
            "name": "initialize",
            "nameLocation": "2464:10:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26656,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26645,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "2500:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2484:20:68",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26644,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2484:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26647,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "2530:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2514:22:68",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26646,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2514:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26649,
                  "mutability": "mutable",
                  "name": "minterAddress",
                  "nameLocation": "2554:13:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2546:21:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26648,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2546:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26651,
                  "mutability": "mutable",
                  "name": "cap_",
                  "nameLocation": "2585:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2577:12:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26650,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2577:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26653,
                  "mutability": "mutable",
                  "name": "blob_",
                  "nameLocation": "2615:5:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2599:21:68",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26652,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2599:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26655,
                  "mutability": "mutable",
                  "name": "feeCollector",
                  "nameLocation": "2638:12:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2630:20:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26654,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2630:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2474:182:68"
            },
            "returnParameters": {
              "id": 26661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26660,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26672,
                  "src": "2718:4:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26659,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2718:4:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2717:6:68"
            },
            "scope": 27023,
            "src": "2455:446:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26756,
              "nodeType": "Block",
              "src": "3150:746:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26695,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26690,
                          "name": "minterAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26678,
                          "src": "3181:13:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26693,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3206:1:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26692,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3198:7:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26691,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3198:7:68",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26694,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3198:10:68",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3181:27:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20496e76616c6964206d696e7465722c20207a65726f2061646472657373",
                        "id": 26696,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3223:50:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a0236e545e0c68760b7a9e15efcd1779d431a1f5402ff8a22a657fc1a6e077af",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid minter,  zero address\""
                        },
                        "value": "DatatokenTemplate: Invalid minter,  zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a0236e545e0c68760b7a9e15efcd1779d431a1f5402ff8a22a657fc1a6e077af",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid minter,  zero address\""
                        }
                      ],
                      "id": 26689,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3160:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3160:123:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26698,
                  "nodeType": "ExpressionStatement",
                  "src": "3160:123:68"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26700,
                          "name": "_minter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26547,
                          "src": "3315:7:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26703,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3334:1:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26702,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3326:7:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26701,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3326:7:68",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26704,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3326:10:68",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3315:21:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20496e76616c6964206d696e7465722c207a65726f2061646472657373",
                        "id": 26706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3351:49:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7c167252b268b00f7e1e22975ca9e79fe93744a43ab33cb02c7501a1e273bf7b",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid minter, zero address\""
                        },
                        "value": "DatatokenTemplate: Invalid minter, zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7c167252b268b00f7e1e22975ca9e79fe93744a43ab33cb02c7501a1e273bf7b",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid minter, zero address\""
                        }
                      ],
                      "id": 26699,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3294:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3294:116:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26708,
                  "nodeType": "ExpressionStatement",
                  "src": "3294:116:68"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26715,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26710,
                          "name": "feeCollector",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26684,
                          "src": "3442:12:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 26713,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3466:1:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 26712,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "3458:7:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 26711,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "3458:7:68",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 26714,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3458:10:68",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3442:26:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20496e76616c696420636f6d6d756e6974792066656520636f6c6c6563746f722c207a65726f2061646472657373",
                        "id": 26716,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3482:66:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c3bc60b8fdeafffd68d8d813224b7d1ff5b55dedc75a294390e018695257af9",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid community fee collector, zero address\""
                        },
                        "value": "DatatokenTemplate: Invalid community fee collector, zero address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c3bc60b8fdeafffd68d8d813224b7d1ff5b55dedc75a294390e018695257af9",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid community fee collector, zero address\""
                        }
                      ],
                      "id": 26709,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3421:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26717,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3421:137:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26718,
                  "nodeType": "ExpressionStatement",
                  "src": "3421:137:68"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26720,
                          "name": "cap_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26680,
                          "src": "3590:4:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 26721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3598:1:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3590:9:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20496e76616c6964206361702076616c7565",
                        "id": 26723,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3613:38:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_acb03c407acdd98ba0beb9385a0f4552c47de9bbd80646ae98f2087c121ff73b",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid cap value\""
                        },
                        "value": "DatatokenTemplate: Invalid cap value"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_acb03c407acdd98ba0beb9385a0f4552c47de9bbd80646ae98f2087c121ff73b",
                          "typeString": "literal_string \"DatatokenTemplate: Invalid cap value\""
                        }
                      ],
                      "id": 26719,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3569:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26724,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3569:92:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26725,
                  "nodeType": "ExpressionStatement",
                  "src": "3569:92:68"
                },
                {
                  "expression": {
                    "id": 26728,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26726,
                      "name": "_cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26533,
                      "src": "3671:4:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26727,
                      "name": "cap_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26680,
                      "src": "3678:4:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3671:11:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 26729,
                  "nodeType": "ExpressionStatement",
                  "src": "3671:11:68"
                },
                {
                  "expression": {
                    "id": 26732,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26730,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26524,
                      "src": "3692:5:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26731,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26674,
                      "src": "3700:4:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3692:12:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 26733,
                  "nodeType": "ExpressionStatement",
                  "src": "3692:12:68"
                },
                {
                  "expression": {
                    "id": 26736,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26734,
                      "name": "_blob",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26530,
                      "src": "3714:5:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26735,
                      "name": "blob_",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26682,
                      "src": "3722:5:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3714:13:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 26737,
                  "nodeType": "ExpressionStatement",
                  "src": "3714:13:68"
                },
                {
                  "expression": {
                    "id": 26740,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26738,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26527,
                      "src": "3737:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26739,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26676,
                      "src": "3747:6:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "3737:16:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 26741,
                  "nodeType": "ExpressionStatement",
                  "src": "3737:16:68"
                },
                {
                  "expression": {
                    "id": 26744,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26742,
                      "name": "_minter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26547,
                      "src": "3763:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26743,
                      "name": "minterAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26678,
                      "src": "3773:13:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3763:23:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 26745,
                  "nodeType": "ExpressionStatement",
                  "src": "3763:23:68"
                },
                {
                  "expression": {
                    "id": 26748,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26746,
                      "name": "_communityFeeCollector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26542,
                      "src": "3796:22:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26747,
                      "name": "feeCollector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26684,
                      "src": "3821:12:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3796:37:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 26749,
                  "nodeType": "ExpressionStatement",
                  "src": "3796:37:68"
                },
                {
                  "expression": {
                    "id": 26752,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26750,
                      "name": "initialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26545,
                      "src": "3843:11:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 26751,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3857:4:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "3843:18:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26753,
                  "nodeType": "ExpressionStatement",
                  "src": "3843:18:68"
                },
                {
                  "expression": {
                    "id": 26754,
                    "name": "initialized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26545,
                    "src": "3878:11:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 26688,
                  "id": 26755,
                  "nodeType": "Return",
                  "src": "3871:18:68"
                }
              ]
            },
            "id": 26757,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_initialize",
            "nameLocation": "2920:11:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26685,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26674,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "2955:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "2941:18:68",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26673,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2941:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26676,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "2983:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "2969:20:68",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26675,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2969:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26678,
                  "mutability": "mutable",
                  "name": "minterAddress",
                  "nameLocation": "3007:13:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "2999:21:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26677,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2999:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26680,
                  "mutability": "mutable",
                  "name": "cap_",
                  "nameLocation": "3038:4:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "3030:12:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26679,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3030:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26682,
                  "mutability": "mutable",
                  "name": "blob_",
                  "nameLocation": "3066:5:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "3052:19:68",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26681,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3052:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26684,
                  "mutability": "mutable",
                  "name": "feeCollector",
                  "nameLocation": "3089:12:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "3081:20:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26683,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3081:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2931:176:68"
            },
            "returnParameters": {
              "id": 26688,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26687,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26757,
                  "src": "3140:4:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26686,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3140:4:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3139:6:68"
            },
            "scope": 27023,
            "src": "2911:985:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "private"
          },
          {
            "body": {
              "id": 26782,
              "nodeType": "Block",
              "src": "4018:159:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 26773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 26770,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26761,
                              "src": "4067:5:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 26767,
                                "name": "totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 28597,
                                "src": "4049:11:68",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view returns (uint256)"
                                }
                              },
                              "id": 26768,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4049:13:68",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 26769,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 28243,
                            "src": "4049:17:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 26771,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4049:24:68",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "id": 26772,
                          "name": "_cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26533,
                          "src": "4077:4:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4049:32:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20636170206578636565646564",
                        "id": 26774,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4096:33:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ba68139f57f0fbe8534105ad7a9312832aa13f0377dac6f8e73b83f9c40d5149",
                          "typeString": "literal_string \"DatatokenTemplate: cap exceeded\""
                        },
                        "value": "DatatokenTemplate: cap exceeded"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ba68139f57f0fbe8534105ad7a9312832aa13f0377dac6f8e73b83f9c40d5149",
                          "typeString": "literal_string \"DatatokenTemplate: cap exceeded\""
                        }
                      ],
                      "id": 26766,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4028:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26775,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4028:111:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26776,
                  "nodeType": "ExpressionStatement",
                  "src": "4028:111:68"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26778,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26759,
                        "src": "4155:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26779,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26761,
                        "src": "4164:5:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26777,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28918,
                      "src": "4149:5:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 26780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4149:21:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26781,
                  "nodeType": "ExpressionStatement",
                  "src": "4149:21:68"
                }
              ]
            },
            "functionSelector": "40c10f19",
            "id": 26783,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 26764,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 26763,
                  "name": "onlyMinter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26628,
                  "src": "4002:10:68"
                },
                "nodeType": "ModifierInvocation",
                "src": "4002:10:68"
              }
            ],
            "name": "mint",
            "nameLocation": "3915:4:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26762,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26759,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "3937:7:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26783,
                  "src": "3929:15:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26758,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3929:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26761,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "3962:5:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26783,
                  "src": "3954:13:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26760,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3954:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3919:54:68"
            },
            "returnParameters": {
              "id": 26765,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4018:0:68"
            },
            "scope": 27023,
            "src": "3906:271:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26857,
              "nodeType": "Block",
              "src": "4341:795:68",
              "statements": [
                {
                  "assignments": [
                    26795
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26795,
                      "mutability": "mutable",
                      "name": "marketFee",
                      "nameLocation": "4359:9:68",
                      "nodeType": "VariableDeclaration",
                      "scope": 26857,
                      "src": "4351:17:68",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26794,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4351:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26797,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 26796,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "4371:1:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4351:21:68"
                },
                {
                  "assignments": [
                    26799
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26799,
                      "mutability": "mutable",
                      "name": "communityFee",
                      "nameLocation": "4390:12:68",
                      "nodeType": "VariableDeclaration",
                      "scope": 26857,
                      "src": "4382:20:68",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26798,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4382:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26804,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 26801,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26787,
                        "src": "4431:6:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 26802,
                        "name": "BASE_COMMUNITY_FEE_PERCENTAGE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26559,
                        "src": "4452:29:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26800,
                      "name": "calculateFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27022,
                      "src": "4405:12:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 26803,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4405:86:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4382:109:68"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26806,
                        "name": "_communityFeeCollector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26542,
                        "src": "4510:22:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26807,
                        "name": "communityFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26799,
                        "src": "4534:12:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26805,
                      "name": "transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28632,
                      "src": "4501:8:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 26808,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4501:46:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26809,
                  "nodeType": "ExpressionStatement",
                  "src": "4501:46:68"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 26815,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 26810,
                      "name": "mrktFeeCollector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26791,
                      "src": "4560:16:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 26813,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4588:1:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 26812,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4580:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 26811,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4580:7:68",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 26814,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4580:10:68",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4560:30:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26829,
                  "nodeType": "IfStatement",
                  "src": "4557:217:68",
                  "trueBody": {
                    "id": 26828,
                    "nodeType": "Block",
                    "src": "4591:183:68",
                    "statements": [
                      {
                        "expression": {
                          "id": 26821,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 26816,
                            "name": "marketFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26795,
                            "src": "4605:9:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 26818,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26787,
                                "src": "4647:6:68",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 26819,
                                "name": "BASE_MARKET_FEE_PERCENTAGE",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26564,
                                "src": "4672:26:68",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 26817,
                              "name": "calculateFee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 27022,
                              "src": "4617:12:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 26820,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4617:95:68",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4605:107:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 26822,
                        "nodeType": "ExpressionStatement",
                        "src": "4605:107:68"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 26824,
                              "name": "mrktFeeCollector",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26791,
                              "src": "4735:16:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 26825,
                              "name": "marketFee",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26795,
                              "src": "4753:9:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 26823,
                            "name": "transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28632,
                            "src": "4726:8:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) returns (bool)"
                            }
                          },
                          "id": 26826,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4726:37:68",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 26827,
                        "nodeType": "ExpressionStatement",
                        "src": "4726:37:68"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    26831
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26831,
                      "mutability": "mutable",
                      "name": "totalFee",
                      "nameLocation": "4791:8:68",
                      "nodeType": "VariableDeclaration",
                      "scope": 26857,
                      "src": "4783:16:68",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26830,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4783:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 26836,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 26834,
                        "name": "marketFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26795,
                        "src": "4819:9:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 26832,
                        "name": "communityFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26799,
                        "src": "4802:12:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 26833,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "add",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28243,
                      "src": "4802:16:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 26835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4802:27:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4783:46:68"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 26838,
                        "name": "_minter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26547,
                        "src": "4848:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 26841,
                            "name": "totalFee",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26831,
                            "src": "4868:8:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 26839,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26787,
                            "src": "4857:6:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 26840,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sub",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28258,
                          "src": "4857:10:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 26842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4857:20:68",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26837,
                      "name": "transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28632,
                      "src": "4839:8:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 26843,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4839:39:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26844,
                  "nodeType": "ExpressionStatement",
                  "src": "4839:39:68"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 26846,
                        "name": "consumer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26785,
                        "src": "4919:8:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 26847,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4941:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 26848,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4941:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26849,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26787,
                        "src": "4965:6:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 26850,
                        "name": "serviceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26789,
                        "src": "4985:9:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 26851,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "5051:5:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 26852,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "5051:15:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 26853,
                        "name": "mrktFeeCollector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26791,
                        "src": "5080:16:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26854,
                        "name": "marketFee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26795,
                        "src": "5110:9:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26845,
                      "name": "OrderStarted",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26580,
                      "src": "4893:12:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256,uint256,uint256,address,uint256)"
                      }
                    },
                    "id": 26855,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4893:236:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26856,
                  "nodeType": "EmitStatement",
                  "src": "4888:241:68"
                }
              ]
            },
            "functionSelector": "ab63d2b2",
            "id": 26858,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "startOrder",
            "nameLocation": "4192:10:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26792,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26785,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "4220:8:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26858,
                  "src": "4212:16:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26784,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4212:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26787,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4246:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26858,
                  "src": "4238:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26786,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4238:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26789,
                  "mutability": "mutable",
                  "name": "serviceId",
                  "nameLocation": "4270:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26858,
                  "src": "4262:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26788,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4262:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26791,
                  "mutability": "mutable",
                  "name": "mrktFeeCollector",
                  "nameLocation": "4297:16:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26858,
                  "src": "4289:24:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26790,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4289:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4202:117:68"
            },
            "returnParameters": {
              "id": 26793,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4341:0:68"
            },
            "scope": 27023,
            "src": "4183:953:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26892,
              "nodeType": "Block",
              "src": "5301:411:68",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 26871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 26869,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26864,
                      "src": "5316:6:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 26870,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5326:1:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "5316:11:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 26880,
                  "nodeType": "IfStatement",
                  "src": "5311:159:68",
                  "trueBody": {
                    "expression": {
                      "arguments": [
                        {
                          "arguments": [
                            {
                              "id": 26874,
                              "name": "consumer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26862,
                              "src": "5378:8:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 26875,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 26864,
                              "src": "5388:6:68",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 26873,
                            "name": "transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28632,
                            "src": "5369:8:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) returns (bool)"
                            }
                          },
                          "id": 26876,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5369:26:68",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        {
                          "hexValue": "44617461746f6b656e54656d706c6174653a206661696c656420746f2066696e697368206f72646572",
                          "id": 26877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5413:43:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_4045a0442bf340330ea3c76c8a0f1bfbe9a7456d9b01a38a0512782c76540aa6",
                            "typeString": "literal_string \"DatatokenTemplate: failed to finish order\""
                          },
                          "value": "DatatokenTemplate: failed to finish order"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          {
                            "typeIdentifier": "t_stringliteral_4045a0442bf340330ea3c76c8a0f1bfbe9a7456d9b01a38a0512782c76540aa6",
                            "typeString": "literal_string \"DatatokenTemplate: failed to finish order\""
                          }
                        ],
                        "id": 26872,
                        "name": "require",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [
                          -18,
                          -18
                        ],
                        "referencedDeclaration": -18,
                        "src": "5344:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                          "typeString": "function (bool,string memory) pure"
                        }
                      },
                      "id": 26878,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5344:126:68",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 26879,
                    "nodeType": "ExpressionStatement",
                    "src": "5344:126:68"
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 26882,
                        "name": "orderTxId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26860,
                        "src": "5521:9:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 26883,
                        "name": "consumer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26862,
                        "src": "5545:8:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26884,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26864,
                        "src": "5568:6:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 26885,
                        "name": "serviceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26866,
                        "src": "5589:9:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 26886,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "5613:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 26887,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "5613:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 26888,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "5680:5:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 26889,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "5680:15:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 26881,
                      "name": "OrderFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26594,
                      "src": "5494:13:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (bytes32,address,uint256,uint256,address,uint256)"
                      }
                    },
                    "id": 26890,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5494:211:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26891,
                  "nodeType": "EmitStatement",
                  "src": "5489:216:68"
                }
              ]
            },
            "functionSelector": "8ca0c059",
            "id": 26893,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "finishOrder",
            "nameLocation": "5156:11:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26867,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26860,
                  "mutability": "mutable",
                  "name": "orderTxId",
                  "nameLocation": "5185:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26893,
                  "src": "5177:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 26859,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5177:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26862,
                  "mutability": "mutable",
                  "name": "consumer",
                  "nameLocation": "5213:8:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26893,
                  "src": "5205:16:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26861,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5205:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26864,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "5240:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26893,
                  "src": "5232:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26863,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5232:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26866,
                  "mutability": "mutable",
                  "name": "serviceId",
                  "nameLocation": "5264:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26893,
                  "src": "5256:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26865,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5256:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5167:112:68"
            },
            "returnParameters": {
              "id": 26868,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5301:0:68"
            },
            "scope": 27023,
            "src": "5147:565:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26911,
              "nodeType": "Block",
              "src": "6008:136:68",
              "statements": [
                {
                  "expression": {
                    "id": 26903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26901,
                      "name": "_proposedMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26549,
                      "src": "6018:15:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26902,
                      "name": "newMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26896,
                      "src": "6036:9:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6018:27:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 26904,
                  "nodeType": "ExpressionStatement",
                  "src": "6018:27:68"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 26906,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "6088:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 26907,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "6088:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26908,
                        "name": "_proposedMinter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26549,
                        "src": "6112:15:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 26905,
                      "name": "MinterProposed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26600,
                      "src": "6060:14:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 26909,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6060:77:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26910,
                  "nodeType": "EmitStatement",
                  "src": "6055:82:68"
                }
              ]
            },
            "documentation": {
              "id": 26894,
              "nodeType": "StructuredDocumentation",
              "src": "5718:200:68",
              "text": " @dev proposeMinter\n      It proposes a new token minter address.\n      Only the current minter can call it.\n @param newMinter refers to a new token minter address."
            },
            "functionSelector": "50d2fcc4",
            "id": 26912,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 26899,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 26898,
                  "name": "onlyMinter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 26628,
                  "src": "5992:10:68"
                },
                "nodeType": "ModifierInvocation",
                "src": "5992:10:68"
              }
            ],
            "name": "proposeMinter",
            "nameLocation": "5932:13:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26897,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26896,
                  "mutability": "mutable",
                  "name": "newMinter",
                  "nameLocation": "5954:9:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26912,
                  "src": "5946:17:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26895,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5946:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5945:19:68"
            },
            "returnParameters": {
              "id": 26900,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6008:0:68"
            },
            "scope": 27023,
            "src": "5923:221:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26940,
              "nodeType": "Block",
              "src": "6339:305:68",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26920,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 26917,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6370:3:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 26918,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6370:10:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 26919,
                          "name": "_proposedMinter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26549,
                          "src": "6384:15:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6370:29:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "44617461746f6b656e54656d706c6174653a20696e76616c69642070726f706f736564206d696e7465722061646472657373",
                        "id": 26921,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6413:52:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_9353128239779b2ee0247f348f5b2d6ad594436e7f69373d4bf8f6333065eca0",
                          "typeString": "literal_string \"DatatokenTemplate: invalid proposed minter address\""
                        },
                        "value": "DatatokenTemplate: invalid proposed minter address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_9353128239779b2ee0247f348f5b2d6ad594436e7f69373d4bf8f6333065eca0",
                          "typeString": "literal_string \"DatatokenTemplate: invalid proposed minter address\""
                        }
                      ],
                      "id": 26916,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6349:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 26922,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6349:126:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26923,
                  "nodeType": "ExpressionStatement",
                  "src": "6349:126:68"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 26925,
                        "name": "_minter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26547,
                        "src": "6518:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 26926,
                        "name": "_proposedMinter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26549,
                        "src": "6539:15:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 26924,
                      "name": "MinterApproved",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26606,
                      "src": "6490:14:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 26927,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6490:74:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 26928,
                  "nodeType": "EmitStatement",
                  "src": "6485:79:68"
                },
                {
                  "expression": {
                    "id": 26931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26929,
                      "name": "_minter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26547,
                      "src": "6574:7:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 26930,
                      "name": "_proposedMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26549,
                      "src": "6584:15:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6574:25:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 26932,
                  "nodeType": "ExpressionStatement",
                  "src": "6574:25:68"
                },
                {
                  "expression": {
                    "id": 26938,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26933,
                      "name": "_proposedMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26549,
                      "src": "6609:15:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 26936,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6635:1:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 26935,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "6627:7:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 26934,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6627:7:68",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 26937,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6627:10:68",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6609:28:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 26939,
                  "nodeType": "ExpressionStatement",
                  "src": "6609:28:68"
                }
              ]
            },
            "documentation": {
              "id": 26913,
              "nodeType": "StructuredDocumentation",
              "src": "6150:138:68",
              "text": " @dev approveMinter\n      It approves a new token minter address.\n      Only the current minter can call it."
            },
            "functionSelector": "eb40024b",
            "id": 26941,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "approveMinter",
            "nameLocation": "6302:13:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26914,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6315:2:68"
            },
            "returnParameters": {
              "id": 26915,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6339:0:68"
            },
            "scope": 27023,
            "src": "6293:351:68",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26949,
              "nodeType": "Block",
              "src": "6826:29:68",
              "statements": [
                {
                  "expression": {
                    "id": 26947,
                    "name": "_blob",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26530,
                    "src": "6843:5:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 26946,
                  "id": 26948,
                  "nodeType": "Return",
                  "src": "6836:12:68"
                }
              ]
            },
            "documentation": {
              "id": 26942,
              "nodeType": "StructuredDocumentation",
              "src": "6654:114:68",
              "text": " @dev blob\n      It returns the blob (e.g https://123.com).\n @return Datatoken blob."
            },
            "functionSelector": "fde0e7a8",
            "id": 26950,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "blob",
            "nameLocation": "6782:4:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26943,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6786:2:68"
            },
            "returnParameters": {
              "id": 26946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26945,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26950,
                  "src": "6811:13:68",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 26944,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "6811:6:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6810:15:68"
            },
            "scope": 27023,
            "src": "6773:82:68",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26958,
              "nodeType": "Block",
              "src": "7010:28:68",
              "statements": [
                {
                  "expression": {
                    "id": 26956,
                    "name": "_cap",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26533,
                    "src": "7027:4:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 26955,
                  "id": 26957,
                  "nodeType": "Return",
                  "src": "7020:11:68"
                }
              ]
            },
            "documentation": {
              "id": 26951,
              "nodeType": "StructuredDocumentation",
              "src": "6865:93:68",
              "text": " @dev cap\n      it returns the capital.\n @return Datatoken cap."
            },
            "functionSelector": "355274ea",
            "id": 26959,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "cap",
            "nameLocation": "6972:3:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26952,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6975:2:68"
            },
            "returnParameters": {
              "id": 26955,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26954,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26959,
                  "src": "7001:7:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26953,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7001:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7000:9:68"
            },
            "scope": 27023,
            "src": "6963:75:68",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26972,
              "nodeType": "Block",
              "src": "7313:44:68",
              "statements": [
                {
                  "expression": {
                    "components": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 26969,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 26967,
                          "name": "_minter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26547,
                          "src": "7331:7:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 26968,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26962,
                          "src": "7342:7:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7331:18:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "id": 26970,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "7330:20:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 26966,
                  "id": 26971,
                  "nodeType": "Return",
                  "src": "7323:27:68"
                }
              ]
            },
            "documentation": {
              "id": 26960,
              "nodeType": "StructuredDocumentation",
              "src": "7044:201:68",
              "text": " @dev isMinter\n      It takes the address and checks whether it has a minter role.\n @param account refers to the address.\n @return true if account has a minter role."
            },
            "functionSelector": "aa271e1a",
            "id": 26973,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isMinter",
            "nameLocation": "7259:8:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26963,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26962,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "7276:7:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 26973,
                  "src": "7268:15:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26961,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7268:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7267:17:68"
            },
            "returnParameters": {
              "id": 26966,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26965,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26973,
                  "src": "7307:4:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26964,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7307:4:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7306:6:68"
            },
            "scope": 27023,
            "src": "7250:107:68",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26981,
              "nodeType": "Block",
              "src": "7510:31:68",
              "statements": [
                {
                  "expression": {
                    "id": 26979,
                    "name": "_minter",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26547,
                    "src": "7527:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 26978,
                  "id": 26980,
                  "nodeType": "Return",
                  "src": "7520:14:68"
                }
              ]
            },
            "documentation": {
              "id": 26974,
              "nodeType": "StructuredDocumentation",
              "src": "7364:63:68",
              "text": " @dev minter\n @return minter's address."
            },
            "functionSelector": "07546172",
            "id": 26982,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "minter",
            "nameLocation": "7441:6:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26975,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7447:2:68"
            },
            "returnParameters": {
              "id": 26978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26977,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26982,
                  "src": "7497:7:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 26976,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7497:7:68",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7496:9:68"
            },
            "scope": 27023,
            "src": "7432:109:68",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 26990,
              "nodeType": "Block",
              "src": "7754:35:68",
              "statements": [
                {
                  "expression": {
                    "id": 26988,
                    "name": "initialized",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 26545,
                    "src": "7771:11:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 26987,
                  "id": 26989,
                  "nodeType": "Return",
                  "src": "7764:18:68"
                }
              ]
            },
            "documentation": {
              "id": 26983,
              "nodeType": "StructuredDocumentation",
              "src": "7547:148:68",
              "text": " @dev isInitialized\n      It checks whether the contract is initialized.\n @return true if the contract is initialized."
            },
            "functionSelector": "392e53cd",
            "id": 26991,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isInitialized",
            "nameLocation": "7710:13:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26984,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7723:2:68"
            },
            "returnParameters": {
              "id": 26987,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26986,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 26991,
                  "src": "7748:4:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 26985,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7748:4:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7747:6:68"
            },
            "scope": 27023,
            "src": "7701:88:68",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 27021,
              "nodeType": "Block",
              "src": "8173:134:68",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 27003,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 27001,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26994,
                      "src": "8186:6:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 27002,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8196:1:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "8186:11:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 27006,
                  "nodeType": "IfStatement",
                  "src": "8183:24:68",
                  "trueBody": {
                    "expression": {
                      "hexValue": "30",
                      "id": 27004,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8206:1:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "functionReturnParameters": 27000,
                    "id": 27005,
                    "nodeType": "Return",
                    "src": "8199:8:68"
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 27009,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 27007,
                      "name": "feePercentage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26996,
                      "src": "8220:13:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 27008,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8237:1:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "8220:18:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 27012,
                  "nodeType": "IfStatement",
                  "src": "8217:31:68",
                  "trueBody": {
                    "expression": {
                      "hexValue": "30",
                      "id": 27010,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8247:1:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "functionReturnParameters": 27000,
                    "id": 27011,
                    "nodeType": "Return",
                    "src": "8240:8:68"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27018,
                        "name": "BASE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26554,
                        "src": "8295:4:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 27015,
                            "name": "feePercentage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26996,
                            "src": "8276:13:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 27013,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 26994,
                            "src": "8265:6:68",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 27014,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 28273,
                          "src": "8265:10:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 27016,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8265:25:68",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 27017,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 28288,
                      "src": "8265:29:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 27019,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8265:35:68",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 27000,
                  "id": 27020,
                  "nodeType": "Return",
                  "src": "8258:42:68"
                }
              ]
            },
            "documentation": {
              "id": 26992,
              "nodeType": "StructuredDocumentation",
              "src": "7795:232:68",
              "text": " @dev calculateFee\n      giving a fee percentage, and amount it calculates the actual fee\n @param amount the amount of token\n @param feePercentage the fee percentage \n @return the token fee."
            },
            "functionSelector": "34e73122",
            "id": 27022,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateFee",
            "nameLocation": "8042:12:68",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 26997,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26994,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "8072:6:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 27022,
                  "src": "8064:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26993,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8064:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26996,
                  "mutability": "mutable",
                  "name": "feePercentage",
                  "nameLocation": "8096:13:68",
                  "nodeType": "VariableDeclaration",
                  "scope": 27022,
                  "src": "8088:21:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26995,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8088:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8054:61:68"
            },
            "returnParameters": {
              "id": 27000,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26999,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 27022,
                  "src": "8160:7:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26998,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8160:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8159:9:68"
            },
            "scope": 27023,
            "src": "8033:274:68",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 27024,
        "src": "596:7713:68",
        "usedErrors": []
      }
    ],
    "src": "0:8309:68"
  },
  "bytecode": "60c060405260086080819052671353d0d2d58cd11560c21b60a09081526200002b916005919062000525565b5060408051808201909152600480825263158cd11560e21b6020909201918252620000599160069162000525565b5060408051808201909152600480825263313637b160e11b6020909201918252620000879160079162000525565b50683635c9adc5dea00000600855600980546001600160a81b0319169055348015620000b257600080fd5b50604080518082018252600481526315195cdd60e21b60208083019182528351808501909452600a845269151154d514d6535093d360b21b908401528151919291620001019160039162000525565b5080516200011790600490602084019062000525565b505050620002e8600580546200012d90620005cb565b80601f01602080910402602001604051908101604052809291908181526020018280546200015b90620005cb565b8015620001ac5780601f106200018057610100808354040283529160200191620001ac565b820191906000526020600020905b8154815290600101906020018083116200018e57829003601f168201915b505050505060068054620001c090620005cb565b80601f0160208091040260200160405190810160405280929190818152602001828054620001ee90620005cb565b80156200023f5780601f1062000213576101008083540402835291602001916200023f565b820191906000526020600020905b8154815290600101906020018083116200022157829003601f168201915b505050505033600854600780546200025790620005cb565b80601f01602080910402602001604051908101604052809291908181526020018280546200028590620005cb565b8015620002d65780601f10620002aa57610100808354040283529160200191620002d6565b820191906000526020600020905b815481529060010190602001808311620002b857829003601f168201915b505050505033620002ef60201b60201c565b5062000608565b60006001600160a01b038516620003555760405162461bcd60e51b8152602060048201526030602482015260008051602062001c4283398151915260448201526f722c20207a65726f206164647265737360801b60648201526084015b60405180910390fd5b600a546001600160a01b031615620003b75760405162461bcd60e51b815260206004820152602f602482015260008051602062001c4283398151915260448201526e722c207a65726f206164647265737360881b60648201526084016200034c565b6001600160a01b03821662000437576040805162461bcd60e51b81526020600482015260248101919091527f44617461746f6b656e54656d706c6174653a20496e76616c696420636f6d6d7560448201527f6e6974792066656520636f6c6c6563746f722c207a65726f206164647265737360648201526084016200034c565b83620004925760405162461bcd60e51b8152602060048201526024808201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206361702076604482015263616c756560e01b60648201526084016200034c565b60088490558651620004ac9060059060208a019062000525565b508251620004c290600790602086019062000525565b508551620004d890600690602089019062000525565b5050600a80546001600160a01b039586166001600160a01b0319909116179055600980546001600160a81b0319169190941617600160a01b9081179384905590920460ff16949350505050565b8280546200053390620005cb565b90600052602060002090601f016020900481019282620005575760008555620005a2565b82601f106200057257805160ff1916838001178555620005a2565b82800160010185558215620005a2579182015b82811115620005a257825182559160200191906001019062000585565b50620005b0929150620005b4565b5090565b5b80821115620005b05760008155600101620005b5565b600181811c90821680620005e057607f821691505b602082108114156200060257634e487b7160e01b600052602260045260246000fd5b50919050565b61162a80620006186000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806370a08231116100de578063aa271e1a11610097578063dd62ed3e11610071578063dd62ed3e14610345578063eb40024b1461037e578063ec342ad014610386578063fde0e7a81461039557600080fd5b8063aa271e1a14610310578063ab63d2b214610332578063b2263a5d1461021457600080fd5b806370a08231146102935780638ca0c059146102bc5780639070d2f8146102cf57806395d89b41146102e2578063a457c2d7146102ea578063a9059cbb146102fd57600080fd5b8063313ce5671161014b578063392e53cd11610125578063392e53cd14610246578063395093511461025857806340c10f191461026b57806350d2fcc41461028057600080fd5b8063313ce5671461021c57806334e731221461022b578063355274ea1461023e57600080fd5b806306fdde031461019357806307546172146101b1578063095ea7b3146101cc57806318160ddd146101ef57806323b872dd14610201578063294541c714610214575b600080fd5b61019b61039d565b6040516101a8919061121a565b60405180910390f35b600a546040516001600160a01b0390911681526020016101a8565b6101df6101da36600461128b565b61042f565b60405190151581526020016101a8565b6002545b6040519081526020016101a8565b6101df61020f3660046112b5565b610446565b6101f36104f5565b604051601281526020016101a8565b6101f36102393660046112f1565b61050c565b6008546101f3565b600954600160a01b900460ff166101df565b6101df61026636600461128b565b61054b565b61027e61027936600461128b565b610587565b005b61027e61028e366004611313565b610623565b6101f36102a1366004611313565b6001600160a01b031660009081526020819052604090205490565b61027e6102ca36600461132e565b6106a8565b6101df6102dd3660046113b2565b610771565b61019b6108a7565b6101df6102f836600461128b565b6108b6565b6101df61030b36600461128b565b61094f565b6101df61031e366004611313565b600a546001600160a01b0390811691161490565b61027e610340366004611479565b61095c565b6101f36103533660046114bf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61027e610a51565b6101f3670de0b6b3a764000081565b61019b610b38565b6060600380546103ac906114f2565b80601f01602080910402602001604051908101604052809291908181526020018280546103d8906114f2565b80156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b5050505050905090565b600061043c338484610b47565b5060015b92915050565b6000610453848484610c6b565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104dd5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104ea8533858403610b47565b506001949350505050565b6105096103e8670de0b6b3a7640000611543565b81565b60008261051b57506000610440565b8161052857506000610440565b610544670de0b6b3a764000061053e8585610e2c565b90610e38565b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161043c918590610582908690611565565b610b47565b600a546001600160a01b031633146105b15760405162461bcd60e51b81526004016104d49061157d565b6008546105c7826105c160025490565b90610e44565b11156106155760405162461bcd60e51b815260206004820152601f60248201527f44617461746f6b656e54656d706c6174653a206361702065786365656465640060448201526064016104d4565b61061f8282610e50565b5050565b600a546001600160a01b0316331461064d5760405162461bcd60e51b81526004016104d49061157d565b600b80546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527fa24c529cc8b2d85b7dfb2ed0b4d7e9a816546212138b5d223bee13481e21be6b910160405180910390a150565b8115610716576106b8838361094f565b6107165760405162461bcd60e51b815260206004820152602960248201527f44617461746f6b656e54656d706c6174653a206661696c656420746f2066696e60448201526834b9b41037b93232b960b91b60648201526084016104d4565b604080518581526020810184905290810182905242606082015233906001600160a01b038516907f46872661d5d7765097d3a97ca99b7cbfa68b54b6d51904168974901ee607a26d906080015b60405180910390a350505050565b600954600090600160a01b900460ff16156107ec5760405162461bcd60e51b815260206004820152603560248201527f44617461746f6b656e54656d706c6174653a20746f6b656e20696e7374616e636044820152741948185b1c9958591e481a5b9a5d1a585b1a5e9959605a1b60648201526084016104d4565b6108998a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525050604080516020601f8b018190048102820181019092528981528c93508b9250908a908a90819084018382808284376000920191909152508a9250610f2f915050565b9a9950505050505050505050565b6060600480546103ac906114f2565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104d4565b6109453385858403610b47565b5060019392505050565b600061043c338484610c6b565b600080610977856102396103e8670de0b6b3a7640000611543565b600954909150610990906001600160a01b03168261094f565b506001600160a01b038316156109c6576109b8856102396103e8670de0b6b3a7640000611543565b91506109c4838361094f565b505b60006109d28284610e44565b600a549091506109ef906001600160a01b031661030b8884611175565b50604080518781526020810187905242818301526060810185905290516001600160a01b03868116923392918b16917fe1c4fa794edfa8f619b8257a077398950357b9c6398528f94480307352f9afcc9181900360800190a450505050505050565b600b546001600160a01b03163314610ac65760405162461bcd60e51b815260206004820152603260248201527f44617461746f6b656e54656d706c6174653a20696e76616c69642070726f706f604482015271736564206d696e746572206164647265737360701b60648201526084016104d4565b600a54600b54604080516001600160a01b0393841681529290911660208301527f96ab0400119a548d3cc4c74e857d0d9c427fe9df20d3d0d99af10cc292e6c886910160405180910390a1600b8054600a80546001600160a01b03199081166001600160a01b03841617909155169055565b6060600780546103ac906114f2565b6001600160a01b038316610ba95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104d4565b6001600160a01b038216610c0a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104d4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610ccf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104d4565b6001600160a01b038216610d315760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104d4565b6001600160a01b03831660009081526020819052604090205481811015610da95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104d4565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610de0908490611565565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161076391815260200190565b600061054482846115be565b60006105448284611543565b60006105448284611565565b6001600160a01b038216610ea65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104d4565b8060026000828254610eb89190611565565b90915550506001600160a01b03821660009081526020819052604081208054839290610ee5908490611565565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60006001600160a01b038516610fa05760405162461bcd60e51b815260206004820152603060248201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206d696e746560448201526f722c20207a65726f206164647265737360801b60648201526084016104d4565b600a546001600160a01b0316156110115760405162461bcd60e51b815260206004820152602f60248201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206d696e746560448201526e722c207a65726f206164647265737360881b60648201526084016104d4565b6001600160a01b03821661108f576040805162461bcd60e51b81526020600482015260248101919091527f44617461746f6b656e54656d706c6174653a20496e76616c696420636f6d6d7560448201527f6e6974792066656520636f6c6c6563746f722c207a65726f206164647265737360648201526084016104d4565b836110e85760405162461bcd60e51b8152602060048201526024808201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206361702076604482015263616c756560e01b60648201526084016104d4565b600884905586516111009060059060208a0190611181565b508251611114906007906020860190611181565b508551611128906006906020890190611181565b5050600a80546001600160a01b039586166001600160a01b0319909116179055600980546001600160a81b0319169190941617600160a01b9081179384905590920460ff16949350505050565b600061054482846115dd565b82805461118d906114f2565b90600052602060002090601f0160209004810192826111af57600085556111f5565b82601f106111c857805160ff19168380011785556111f5565b828001600101855582156111f5579182015b828111156111f55782518255916020019190600101906111da565b50611201929150611205565b5090565b5b808211156112015760008155600101611206565b600060208083528351808285015260005b818110156112475785810183015185820160400152820161122b565b81811115611259576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461128657600080fd5b919050565b6000806040838503121561129e57600080fd5b6112a78361126f565b946020939093013593505050565b6000806000606084860312156112ca57600080fd5b6112d38461126f565b92506112e16020850161126f565b9150604084013590509250925092565b6000806040838503121561130457600080fd5b50508035926020909101359150565b60006020828403121561132557600080fd5b6105448261126f565b6000806000806080858703121561134457600080fd5b843593506113546020860161126f565b93969395505050506040820135916060013590565b60008083601f84011261137b57600080fd5b50813567ffffffffffffffff81111561139357600080fd5b6020830191508360208285010111156113ab57600080fd5b9250929050565b600080600080600080600080600060c08a8c0312156113d057600080fd5b893567ffffffffffffffff808211156113e857600080fd5b6113f48d838e01611369565b909b50995060208c013591508082111561140d57600080fd5b6114198d838e01611369565b909950975087915061142d60408d0161126f565b965060608c0135955060808c013591508082111561144a57600080fd5b506114578c828d01611369565b909450925061146a905060a08b0161126f565b90509295985092959850929598565b6000806000806080858703121561148f57600080fd5b6114988561126f565b935060208501359250604085013591506114b46060860161126f565b905092959194509250565b600080604083850312156114d257600080fd5b6114db8361126f565b91506114e96020840161126f565b90509250929050565b600181811c9082168061150657607f821691505b6020821081141561152757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008261156057634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156115785761157861152d565b500190565b60208082526021908201527f44617461746f6b656e54656d706c6174653a20696e76616c6964206d696e74656040820152603960f91b606082015260800190565b60008160001904831182151516156115d8576115d861152d565b500290565b6000828210156115ef576115ef61152d565b50039056fea2646970667358221220ac0a0ca7d153e4bdbf872d9f34dae9c95fe986e313e56275c4654f2ac376c3a464736f6c634300080c003344617461746f6b656e54656d706c6174653a20496e76616c6964206d696e7465",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "MockOldDT",
  "coverageMap": {
    "branches": {
      "11": {},
      "3": {
        "ERC20._approve": {
          "85": [
            10083,
            10102,
            true
          ],
          "86": [
            10161,
            10182,
            true
          ]
        },
        "ERC20._mint": {
          "90": [
            8327,
            8348,
            true
          ]
        },
        "ERC20._transfer": {
          "87": [
            7390,
            7410,
            true
          ],
          "88": [
            7470,
            7493,
            true
          ],
          "89": [
            7661,
            7684,
            true
          ]
        },
        "ERC20.decreaseAllowance": {
          "84": [
            6564,
            6599,
            true
          ]
        },
        "ERC20.transferFrom": {
          "83": [
            5081,
            5107,
            true
          ]
        }
      },
      "4": {},
      "6": {},
      "68": {
        "MockOldDT._initialize": {
          "79": [
            3181,
            3208,
            true
          ],
          "80": [
            3315,
            3336,
            true
          ],
          "81": [
            3442,
            3468,
            true
          ],
          "82": [
            3590,
            3599,
            true
          ]
        },
        "MockOldDT.approveMinter": {
          "78": [
            6370,
            6399,
            true
          ]
        },
        "MockOldDT.calculateFee": {
          "72": [
            8186,
            8197,
            false
          ],
          "73": [
            8220,
            8238,
            false
          ]
        },
        "MockOldDT.finishOrder": {
          "75": [
            5316,
            5327,
            false
          ],
          "76": [
            5369,
            5395,
            true
          ]
        },
        "MockOldDT.mint": {
          "74": [
            4049,
            4081,
            true
          ]
        },
        "MockOldDT.startOrder": {
          "77": [
            4560,
            4590,
            false
          ]
        }
      },
      "9": {}
    },
    "statements": {
      "11": {
        "SafeMath.add": {
          "54": [
            2749,
            2761
          ]
        },
        "SafeMath.div": {
          "53": [
            3844,
            3856
          ]
        },
        "SafeMath.mul": {
          "52": [
            3459,
            3471
          ]
        },
        "SafeMath.sub": {
          "71": [
            3116,
            3128
          ]
        }
      },
      "3": {
        "ERC20._approve": {
          "42": [
            10075,
            10143
          ],
          "43": [
            10153,
            10221
          ],
          "44": [
            10232,
            10268
          ],
          "45": [
            10278,
            10315
          ]
        },
        "ERC20._mint": {
          "55": [
            8319,
            8384
          ],
          "56": [
            8455,
            8477
          ],
          "57": [
            8487,
            8515
          ],
          "58": [
            8525,
            8567
          ]
        },
        "ERC20._transfer": {
          "46": [
            7382,
            7452
          ],
          "47": [
            7462,
            7533
          ],
          "48": [
            7653,
            7727
          ],
          "49": [
            7761,
            7803
          ],
          "50": [
            7823,
            7853
          ],
          "51": [
            7864,
            7904
          ]
        },
        "ERC20.allowance": {
          "7": [
            3992,
            4026
          ]
        },
        "ERC20.approve": {
          "9": [
            4270,
            4309
          ],
          "11": [
            4319,
            4330
          ]
        },
        "ERC20.balanceOf": {
          "5": [
            3419,
            3444
          ]
        },
        "ERC20.decimals": {
          "2": [
            3086,
            3095
          ]
        },
        "ERC20.decreaseAllowance": {
          "28": [
            6556,
            6641
          ],
          "29": [
            6675,
            6742
          ],
          "30": [
            6763,
            6774
          ]
        },
        "ERC20.increaseAllowance": {
          "19": [
            5781,
            5861
          ]
        },
        "ERC20.name": {
          "8": [
            2153,
            2165
          ]
        },
        "ERC20.symbol": {
          "27": [
            2366,
            2380
          ]
        },
        "ERC20.totalSupply": {
          "1": [
            3242,
            3261
          ]
        },
        "ERC20.transfer": {
          "31": [
            3756,
            3798
          ]
        },
        "ERC20.transferFrom": {
          "12": [
            4956,
            4992
          ],
          "13": [
            5073,
            5152
          ],
          "14": [
            5186,
            5243
          ],
          "15": [
            5264,
            5275
          ]
        }
      },
      "4": {},
      "6": {},
      "68": {
        "MockOldDT._initialize": {
          "59": [
            3160,
            3283
          ],
          "60": [
            3294,
            3410
          ],
          "61": [
            3421,
            3558
          ],
          "62": [
            3569,
            3661
          ],
          "63": [
            3671,
            3682
          ],
          "64": [
            3692,
            3704
          ],
          "65": [
            3714,
            3727
          ],
          "66": [
            3737,
            3753
          ],
          "67": [
            3763,
            3786
          ],
          "68": [
            3796,
            3833
          ],
          "69": [
            3843,
            3861
          ],
          "70": [
            3871,
            3889
          ]
        },
        "MockOldDT.approveMinter": {
          "37": [
            6349,
            6475
          ],
          "38": [
            6485,
            6564
          ],
          "39": [
            6574,
            6599
          ],
          "40": [
            6609,
            6637
          ]
        },
        "MockOldDT.blob": {
          "41": [
            6836,
            6848
          ]
        },
        "MockOldDT.calculateFee": {
          "16": [
            8199,
            8207
          ],
          "17": [
            8240,
            8248
          ],
          "18": [
            8258,
            8300
          ]
        },
        "MockOldDT.cap": {
          "3": [
            7020,
            7031
          ]
        },
        "MockOldDT.finishOrder": {
          "24": [
            5344,
            5470
          ],
          "25": [
            5489,
            5705
          ]
        },
        "MockOldDT.initialize": {
          "26": [
            2738,
            2894
          ]
        },
        "MockOldDT.isInitialized": {
          "4": [
            7764,
            7782
          ]
        },
        "MockOldDT.isMinter": {
          "6": [
            7323,
            7350
          ]
        },
        "MockOldDT.mint": {
          "20": [
            4028,
            4139
          ],
          "21": [
            4149,
            4170
          ]
        },
        "MockOldDT.minter": {
          "0": [
            7520,
            7534
          ]
        },
        "MockOldDT.proposeMinter": {
          "22": [
            6018,
            6045
          ],
          "23": [
            6055,
            6137
          ]
        },
        "MockOldDT.startOrder": {
          "32": [
            4501,
            4547
          ],
          "33": [
            4605,
            4712
          ],
          "34": [
            4726,
            4763
          ],
          "35": [
            4839,
            4878
          ],
          "36": [
            4888,
            5129
          ]
        }
      },
      "9": {
        "Context._msgSender": {
          "10": [
            658,
            675
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.2.0/Context",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/ERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/IERC20Metadata",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/SafeMath"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061018e5760003560e01c806370a08231116100de578063aa271e1a11610097578063dd62ed3e11610071578063dd62ed3e14610345578063eb40024b1461037e578063ec342ad014610386578063fde0e7a81461039557600080fd5b8063aa271e1a14610310578063ab63d2b214610332578063b2263a5d1461021457600080fd5b806370a08231146102935780638ca0c059146102bc5780639070d2f8146102cf57806395d89b41146102e2578063a457c2d7146102ea578063a9059cbb146102fd57600080fd5b8063313ce5671161014b578063392e53cd11610125578063392e53cd14610246578063395093511461025857806340c10f191461026b57806350d2fcc41461028057600080fd5b8063313ce5671461021c57806334e731221461022b578063355274ea1461023e57600080fd5b806306fdde031461019357806307546172146101b1578063095ea7b3146101cc57806318160ddd146101ef57806323b872dd14610201578063294541c714610214575b600080fd5b61019b61039d565b6040516101a8919061121a565b60405180910390f35b600a546040516001600160a01b0390911681526020016101a8565b6101df6101da36600461128b565b61042f565b60405190151581526020016101a8565b6002545b6040519081526020016101a8565b6101df61020f3660046112b5565b610446565b6101f36104f5565b604051601281526020016101a8565b6101f36102393660046112f1565b61050c565b6008546101f3565b600954600160a01b900460ff166101df565b6101df61026636600461128b565b61054b565b61027e61027936600461128b565b610587565b005b61027e61028e366004611313565b610623565b6101f36102a1366004611313565b6001600160a01b031660009081526020819052604090205490565b61027e6102ca36600461132e565b6106a8565b6101df6102dd3660046113b2565b610771565b61019b6108a7565b6101df6102f836600461128b565b6108b6565b6101df61030b36600461128b565b61094f565b6101df61031e366004611313565b600a546001600160a01b0390811691161490565b61027e610340366004611479565b61095c565b6101f36103533660046114bf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61027e610a51565b6101f3670de0b6b3a764000081565b61019b610b38565b6060600380546103ac906114f2565b80601f01602080910402602001604051908101604052809291908181526020018280546103d8906114f2565b80156104255780601f106103fa57610100808354040283529160200191610425565b820191906000526020600020905b81548152906001019060200180831161040857829003601f168201915b5050505050905090565b600061043c338484610b47565b5060015b92915050565b6000610453848484610c6b565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104dd5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104ea8533858403610b47565b506001949350505050565b6105096103e8670de0b6b3a7640000611543565b81565b60008261051b57506000610440565b8161052857506000610440565b610544670de0b6b3a764000061053e8585610e2c565b90610e38565b9392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161043c918590610582908690611565565b610b47565b600a546001600160a01b031633146105b15760405162461bcd60e51b81526004016104d49061157d565b6008546105c7826105c160025490565b90610e44565b11156106155760405162461bcd60e51b815260206004820152601f60248201527f44617461746f6b656e54656d706c6174653a206361702065786365656465640060448201526064016104d4565b61061f8282610e50565b5050565b600a546001600160a01b0316331461064d5760405162461bcd60e51b81526004016104d49061157d565b600b80546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527fa24c529cc8b2d85b7dfb2ed0b4d7e9a816546212138b5d223bee13481e21be6b910160405180910390a150565b8115610716576106b8838361094f565b6107165760405162461bcd60e51b815260206004820152602960248201527f44617461746f6b656e54656d706c6174653a206661696c656420746f2066696e60448201526834b9b41037b93232b960b91b60648201526084016104d4565b604080518581526020810184905290810182905242606082015233906001600160a01b038516907f46872661d5d7765097d3a97ca99b7cbfa68b54b6d51904168974901ee607a26d906080015b60405180910390a350505050565b600954600090600160a01b900460ff16156107ec5760405162461bcd60e51b815260206004820152603560248201527f44617461746f6b656e54656d706c6174653a20746f6b656e20696e7374616e636044820152741948185b1c9958591e481a5b9a5d1a585b1a5e9959605a1b60648201526084016104d4565b6108998a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525050604080516020601f8b018190048102820181019092528981528c93508b9250908a908a90819084018382808284376000920191909152508a9250610f2f915050565b9a9950505050505050505050565b6060600480546103ac906114f2565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156109385760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104d4565b6109453385858403610b47565b5060019392505050565b600061043c338484610c6b565b600080610977856102396103e8670de0b6b3a7640000611543565b600954909150610990906001600160a01b03168261094f565b506001600160a01b038316156109c6576109b8856102396103e8670de0b6b3a7640000611543565b91506109c4838361094f565b505b60006109d28284610e44565b600a549091506109ef906001600160a01b031661030b8884611175565b50604080518781526020810187905242818301526060810185905290516001600160a01b03868116923392918b16917fe1c4fa794edfa8f619b8257a077398950357b9c6398528f94480307352f9afcc9181900360800190a450505050505050565b600b546001600160a01b03163314610ac65760405162461bcd60e51b815260206004820152603260248201527f44617461746f6b656e54656d706c6174653a20696e76616c69642070726f706f604482015271736564206d696e746572206164647265737360701b60648201526084016104d4565b600a54600b54604080516001600160a01b0393841681529290911660208301527f96ab0400119a548d3cc4c74e857d0d9c427fe9df20d3d0d99af10cc292e6c886910160405180910390a1600b8054600a80546001600160a01b03199081166001600160a01b03841617909155169055565b6060600780546103ac906114f2565b6001600160a01b038316610ba95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104d4565b6001600160a01b038216610c0a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104d4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610ccf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104d4565b6001600160a01b038216610d315760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104d4565b6001600160a01b03831660009081526020819052604090205481811015610da95760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104d4565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610de0908490611565565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161076391815260200190565b600061054482846115be565b60006105448284611543565b60006105448284611565565b6001600160a01b038216610ea65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104d4565b8060026000828254610eb89190611565565b90915550506001600160a01b03821660009081526020819052604081208054839290610ee5908490611565565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60006001600160a01b038516610fa05760405162461bcd60e51b815260206004820152603060248201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206d696e746560448201526f722c20207a65726f206164647265737360801b60648201526084016104d4565b600a546001600160a01b0316156110115760405162461bcd60e51b815260206004820152602f60248201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206d696e746560448201526e722c207a65726f206164647265737360881b60648201526084016104d4565b6001600160a01b03821661108f576040805162461bcd60e51b81526020600482015260248101919091527f44617461746f6b656e54656d706c6174653a20496e76616c696420636f6d6d7560448201527f6e6974792066656520636f6c6c6563746f722c207a65726f206164647265737360648201526084016104d4565b836110e85760405162461bcd60e51b8152602060048201526024808201527f44617461746f6b656e54656d706c6174653a20496e76616c6964206361702076604482015263616c756560e01b60648201526084016104d4565b600884905586516111009060059060208a0190611181565b508251611114906007906020860190611181565b508551611128906006906020890190611181565b5050600a80546001600160a01b039586166001600160a01b0319909116179055600980546001600160a81b0319169190941617600160a01b9081179384905590920460ff16949350505050565b600061054482846115dd565b82805461118d906114f2565b90600052602060002090601f0160209004810192826111af57600085556111f5565b82601f106111c857805160ff19168380011785556111f5565b828001600101855582156111f5579182015b828111156111f55782518255916020019190600101906111da565b50611201929150611205565b5090565b5b808211156112015760008155600101611206565b600060208083528351808285015260005b818110156112475785810183015185820160400152820161122b565b81811115611259576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461128657600080fd5b919050565b6000806040838503121561129e57600080fd5b6112a78361126f565b946020939093013593505050565b6000806000606084860312156112ca57600080fd5b6112d38461126f565b92506112e16020850161126f565b9150604084013590509250925092565b6000806040838503121561130457600080fd5b50508035926020909101359150565b60006020828403121561132557600080fd5b6105448261126f565b6000806000806080858703121561134457600080fd5b843593506113546020860161126f565b93969395505050506040820135916060013590565b60008083601f84011261137b57600080fd5b50813567ffffffffffffffff81111561139357600080fd5b6020830191508360208285010111156113ab57600080fd5b9250929050565b600080600080600080600080600060c08a8c0312156113d057600080fd5b893567ffffffffffffffff808211156113e857600080fd5b6113f48d838e01611369565b909b50995060208c013591508082111561140d57600080fd5b6114198d838e01611369565b909950975087915061142d60408d0161126f565b965060608c0135955060808c013591508082111561144a57600080fd5b506114578c828d01611369565b909450925061146a905060a08b0161126f565b90509295985092959850929598565b6000806000806080858703121561148f57600080fd5b6114988561126f565b935060208501359250604085013591506114b46060860161126f565b905092959194509250565b600080604083850312156114d257600080fd5b6114db8361126f565b91506114e96020840161126f565b90509250929050565b600181811c9082168061150657607f821691505b6020821081141561152757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008261156057634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156115785761157861152d565b500190565b60208082526021908201527f44617461746f6b656e54656d706c6174653a20696e76616c6964206d696e74656040820152603960f91b606082015260800190565b60008160001904831182151516156115d8576115d861152d565b500290565b6000828210156115ef576115ef61152d565b50039056fea2646970667358221220ac0a0ca7d153e4bdbf872d9f34dae9c95fe986e313e56275c4654f2ac376c3a464736f6c634300080c0033",
  "deployedSourceMap": "596:7713:68:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7432:109:68;7527:7;;7432:109;;-1:-1:-1;;;;;7527:7:68;;;762:51:75;;750:2;735:18;7432:109:68;616:203:75;4171:166:3;;;;;;:::i;:::-;;:::i;:::-;;;1426:14:75;;1419:22;1401:41;;1389:2;1374:18;4171:166:3;1261:187:75;3162:106:3;3249:12;;3162:106;;;1599:25:75;;;1587:2;1572:18;3162:106:3;1453:177:75;4804:478:3;;;;;;:::i;:::-;;:::i;1154:64:68:-;;;:::i;3011:91:3:-;;;3093:2;2110:36:75;;2098:2;2083:18;3011:91:3;1968:184:75;8033:274:68;;;;;;:::i;:::-;;:::i;6963:75::-;7027:4;;6963:75;;7701:88;7771:11;;-1:-1:-1;;;7771:11:68;;;;7701:88;;5677:212:3;;;;;;:::i;:::-;;:::i;3906:271:68:-;;;;;;:::i;:::-;;:::i;:::-;;5923:221;;;;;;:::i;:::-;;:::i;3326:125:3:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3426:18:3;3400:7;3426:18;;;;;;;;;;;;3326:125;5147:565:68;;;;;;:::i;:::-;;:::i;2455:446::-;;;;;;:::i;:::-;;:::i;2285:102:3:-;;;:::i;6376:405::-;;;;;;:::i;:::-;;:::i;3654:172::-;;;;;;:::i;:::-;;:::i;7250:107:68:-;;;;;;:::i;:::-;7331:7;;-1:-1:-1;;;;;7331:7:68;;;:18;;;;7250:107;4183:953;;;;;;:::i;:::-;;:::i;3884:149:3:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3999:18:3;;;3973:7;3999:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3884:149;6293:351:68;;;:::i;1038:37::-;;1069:6;1038:37;;6773:82;;;:::i;2074:98:3:-;2128:13;2160:5;2153:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:98;:::o;4171:166::-;4254:4;4270:39;665:10:9;4293:7:3;4302:6;4270:8;:39::i;:::-;-1:-1:-1;4326:4:3;4171:166;;;;;:::o;4804:478::-;4940:4;4956:36;4966:6;4974:9;4985:6;4956:9;:36::i;:::-;-1:-1:-1;;;;;5030:19:3;;5003:24;5030:19;;;:11;:19;;;;;;;;665:10:9;5030:33:3;;;;;;;;5081:26;;;;5073:79;;;;-1:-1:-1;;;5073:79:3;;5838:2:75;5073:79:3;;;5820:21:75;5877:2;5857:18;;;5850:30;5916:34;5896:18;;;5889:62;-1:-1:-1;;;5967:18:75;;;5960:38;6015:19;;5073:79:3;;;;;;;;;5186:57;5195:6;665:10:9;5236:6:3;5217:16;:25;5186:8;:57::i;:::-;-1:-1:-1;5271:4:3;;4804:478;-1:-1:-1;;;;4804:478:3:o;1154:64:68:-;1207:11;1214:4;1069:6;1207:11;:::i;:::-;1154:64;:::o;8033:274::-;8160:7;8186:11;8183:24;;-1:-1:-1;8206:1:68;8199:8;;8183:24;8220:18;8217:31;;-1:-1:-1;8247:1:68;8240:8;;8217:31;8265:35;1069:6;8265:25;:6;8276:13;8265:10;:25::i;:::-;:29;;:35::i;:::-;8258:42;8033:274;-1:-1:-1;;;8033:274:68:o;5677:212:3:-;665:10:9;5765:4:3;5813:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;5813:34:3;;;;;;;;;;5765:4;;5781:80;;5804:7;;5813:47;;5850:10;;5813:47;:::i;:::-;5781:8;:80::i;3906:271:68:-;2159:7;;-1:-1:-1;;;;;2159:7:68;2145:10;:21;2124:102;;;;-1:-1:-1;;;2124:102:68;;;;;;;:::i;:::-;4077:4:::1;;4049:24;4067:5;4049:13;3249:12:3::0;;;3162:106;4049:13:68::1;:17:::0;::::1;:24::i;:::-;:32;;4028:111;;;::::0;-1:-1:-1;;;4028:111:68;;7136:2:75;4028:111:68::1;::::0;::::1;7118:21:75::0;7175:2;7155:18;;;7148:30;7214:33;7194:18;;;7187:61;7265:18;;4028:111:68::1;6934:355:75::0;4028:111:68::1;4149:21;4155:7;4164:5;4149;:21::i;:::-;3906:271:::0;;:::o;5923:221::-;2159:7;;-1:-1:-1;;;;;2159:7:68;2145:10;:21;2124:102;;;;-1:-1:-1;;;2124:102:68;;;;;;;:::i;:::-;6018:15:::1;:27:::0;;-1:-1:-1;;;;;;6018:27:68::1;-1:-1:-1::0;;;;;6018:27:68;::::1;::::0;;::::1;::::0;;;6060:77:::1;::::0;;6088:10:::1;7506:34:75::0;;7571:2;7556:18;;7549:43;;;;6060:77:68::1;::::0;7441:18:75;6060:77:68::1;;;;;;;5923:221:::0;:::o;5147:565::-;5316:11;;5311:159;;5369:26;5378:8;5388:6;5369:8;:26::i;:::-;5344:126;;;;-1:-1:-1;;;5344:126:68;;7805:2:75;5344:126:68;;;7787:21:75;7844:2;7824:18;;;7817:30;7883:34;7863:18;;;7856:62;-1:-1:-1;;;7934:18:75;;;7927:39;7983:19;;5344:126:68;7603:405:75;5344:126:68;5494:211;;;8244:25:75;;;8300:2;8285:18;;8278:34;;;8328:18;;;8321:34;;;5680:15:68;8386:2:75;8371:18;;8364:34;5613:10:68;;-1:-1:-1;;;;;5494:211:68;;;;;8231:3:75;8216:19;5494:211:68;;;;;;;;5147:565;;;;:::o;2455:446::-;1974:11;;2718:4;;-1:-1:-1;;;1974:11:68;;;;1973:12;1952:112;;;;-1:-1:-1;;;1952:112:68;;8611:2:75;1952:112:68;;;8593:21:75;8650:2;8630:18;;;8623:30;8689:34;8669:18;;;8662:62;-1:-1:-1;;;8740:18:75;;;8733:51;8801:19;;1952:112:68;8409:417:75;1952:112:68;2745:149:::1;2770:4;;2745:149;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;::::0;;;;-1:-1:-1;;2745:149:68::1;::::0;;::::1;;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;;-1:-1:-1;2788:6:68;;-1:-1:-1;2788:6:68;;;;2745:149;::::1;2788:6:::0;;;;2745:149;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;;2745:149:68::1;::::0;;::::1;;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;;2808:13;;-1:-1:-1;2835:4:68;;-1:-1:-1;2745:149:68;2853:5;;;;;;2745:149;::::1;2853:5:::0;;;;2745:149;::::1;;::::0;::::1;::::0;;;;-1:-1:-1;2872:12:68;;-1:-1:-1;2745:11:68::1;::::0;-1:-1:-1;;2745:149:68:i:1;:::-;2738:156:::0;2455:446;-1:-1:-1;;;;;;;;;;2455:446:68:o;2285:102:3:-;2341:13;2373:7;2366:14;;;;;:::i;6376:405::-;665:10:9;6469:4:3;6512:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6512:34:3;;;;;;;;;;6564:35;;;;6556:85;;;;-1:-1:-1;;;6556:85:3;;9033:2:75;6556:85:3;;;9015:21:75;9072:2;9052:18;;;9045:30;9111:34;9091:18;;;9084:62;-1:-1:-1;;;9162:18:75;;;9155:35;9207:19;;6556:85:3;8831:401:75;6556:85:3;6675:67;665:10:9;6698:7:3;6726:15;6707:16;:34;6675:8;:67::i;:::-;-1:-1:-1;6770:4:3;;6376:405;-1:-1:-1;;;6376:405:3:o;3654:172::-;3740:4;3756:42;665:10:9;3780:9:3;3791:6;3756:9;:42::i;4183:953:68:-;4351:17;;4405:86;4431:6;1137:11;1144:4;1069:6;1137:11;:::i;4405:86::-;4510:22;;4382:109;;-1:-1:-1;4501:46:68;;-1:-1:-1;;;;;4510:22:68;4382:109;4501:8;:46::i;:::-;-1:-1:-1;;;;;;4560:30:68;;;4557:217;;4617:95;4647:6;1207:11;1214:4;1069:6;1207:11;:::i;4617:95::-;4605:107;;4726:37;4735:16;4753:9;4726:8;:37::i;:::-;;4557:217;4783:16;4802:27;:12;4819:9;4802:16;:27::i;:::-;4848:7;;4783:46;;-1:-1:-1;4839:39:68;;-1:-1:-1;;;;;4848:7:68;4857:20;:6;4783:46;4857:10;:20::i;4839:39::-;-1:-1:-1;4893:236:68;;;8244:25:75;;;8300:2;8285:18;;8278:34;;;5051:15:68;8328:18:75;;;8321:34;8386:2;8371:18;;8364:34;;;4893:236:68;;-1:-1:-1;;;;;4893:236:68;;;;4941:10;;4893:236;;;;;;;;;8231:3:75;4893:236:68;;;4341:795;;;4183:953;;;;:::o;6293:351::-;6384:15;;-1:-1:-1;;;;;6384:15:68;6370:10;:29;6349:126;;;;-1:-1:-1;;;6349:126:68;;9835:2:75;6349:126:68;;;9817:21:75;9874:2;9854:18;;;9847:30;9913:34;9893:18;;;9886:62;-1:-1:-1;;;9964:18:75;;;9957:48;10022:19;;6349:126:68;9633:414:75;6349:126:68;6518:7;;6539:15;;6490:74;;;-1:-1:-1;;;;;6518:7:68;;;7506:34:75;;6539:15:68;;;;7571:2:75;7556:18;;7549:43;6490:74:68;;7441:18:75;6490:74:68;;;;;;;6584:15;;;6574:7;:25;;-1:-1:-1;;;;;;6574:25:68;;;-1:-1:-1;;;;;6584:15:68;;6574:25;;;;6609:28;;;6293:351::o;6773:82::-;6811:13;6843:5;6836:12;;;;;:::i;9952:370:3:-;-1:-1:-1;;;;;10083:19:3;;10075:68;;;;-1:-1:-1;;;10075:68:3;;10254:2:75;10075:68:3;;;10236:21:75;10293:2;10273:18;;;10266:30;10332:34;10312:18;;;10305:62;-1:-1:-1;;;10383:18:75;;;10376:34;10427:19;;10075:68:3;10052:400:75;10075:68:3;-1:-1:-1;;;;;10161:21:3;;10153:68;;;;-1:-1:-1;;;10153:68:3;;10659:2:75;10153:68:3;;;10641:21:75;10698:2;10678:18;;;10671:30;10737:34;10717:18;;;10710:62;-1:-1:-1;;;10788:18:75;;;10781:32;10830:19;;10153:68:3;10457:398:75;10153:68:3;-1:-1:-1;;;;;10232:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10283:32;;1599:25:75;;;10283:32:3;;1572:18:75;10283:32:3;;;;;;;9952:370;;;:::o;7255:713::-;-1:-1:-1;;;;;7390:20:3;;7382:70;;;;-1:-1:-1;;;7382:70:3;;11062:2:75;7382:70:3;;;11044:21:75;11101:2;11081:18;;;11074:30;11140:34;11120:18;;;11113:62;-1:-1:-1;;;11191:18:75;;;11184:35;11236:19;;7382:70:3;10860:401:75;7382:70:3;-1:-1:-1;;;;;7470:23:3;;7462:71;;;;-1:-1:-1;;;7462:71:3;;11468:2:75;7462:71:3;;;11450:21:75;11507:2;11487:18;;;11480:30;11546:34;11526:18;;;11519:62;-1:-1:-1;;;11597:18:75;;;11590:33;11640:19;;7462:71:3;11266:399:75;7462:71:3;-1:-1:-1;;;;;7626:17:3;;7602:21;7626:17;;;;;;;;;;;7661:23;;;;7653:74;;;;-1:-1:-1;;;7653:74:3;;11872:2:75;7653:74:3;;;11854:21:75;11911:2;11891:18;;;11884:30;11950:34;11930:18;;;11923:62;-1:-1:-1;;;12001:18:75;;;11994:36;12047:19;;7653:74:3;11670:402:75;7653:74:3;-1:-1:-1;;;;;7761:17:3;;;:9;:17;;;;;;;;;;;7781:22;;;7761:42;;7823:20;;;;;;;;:30;;7797:6;;7761:9;7823:30;;7797:6;;7823:30;:::i;:::-;;;;;;;;7886:9;-1:-1:-1;;;;;7869:35:3;7878:6;-1:-1:-1;;;;;7869:35:3;;7897:6;7869:35;;;;1599:25:75;;1587:2;1572:18;;1453:177;3382:96:11;3440:7;3466:5;3470:1;3466;:5;:::i;3767:96::-;3825:7;3851:5;3855:1;3851;:5;:::i;2672:96::-;2730:7;2756:5;2760:1;2756;:5;:::i;8244:389:3:-;-1:-1:-1;;;;;8327:21:3;;8319:65;;;;-1:-1:-1;;;8319:65:3;;12452:2:75;8319:65:3;;;12434:21:75;12491:2;12471:18;;;12464:30;12530:33;12510:18;;;12503:61;12581:18;;8319:65:3;12250:355:75;8319:65:3;8471:6;8455:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8487:18:3;;:9;:18;;;;;;;;;;:28;;8509:6;;8487:9;:28;;8509:6;;8487:28;:::i;:::-;;;;-1:-1:-1;;8530:37:3;;1599:25:75;;;-1:-1:-1;;;;;8530:37:3;;;8547:1;;8530:37;;1587:2:75;1572:18;8530:37:3;;;;;;;3906:271:68;;:::o;2911:985::-;3140:4;-1:-1:-1;;;;;3181:27:68;;3160:123;;;;-1:-1:-1;;;3160:123:68;;12812:2:75;3160:123:68;;;12794:21:75;12851:2;12831:18;;;12824:30;12890:34;12870:18;;;12863:62;-1:-1:-1;;;12941:18:75;;;12934:46;12997:19;;3160:123:68;12610:412:75;3160:123:68;3315:7;;-1:-1:-1;;;;;3315:7:68;:21;3294:116;;;;-1:-1:-1;;;3294:116:68;;13229:2:75;3294:116:68;;;13211:21:75;13268:2;13248:18;;;13241:30;13307:34;13287:18;;;13280:62;-1:-1:-1;;;13358:18:75;;;13351:45;13413:19;;3294:116:68;13027:411:75;3294:116:68;-1:-1:-1;;;;;3442:26:68;;3421:137;;;;;-1:-1:-1;;;3421:137:68;;13645:2:75;3421:137:68;;;13627:21:75;13664:18;;;13657:30;;;;13723:34;13703:18;;;13696:62;13794:34;13774:18;;;13767:62;13846:19;;3421:137:68;13443:428:75;3421:137:68;3590:9;3569:92;;;;-1:-1:-1;;;3569:92:68;;14078:2:75;3569:92:68;;;14060:21:75;14117:2;14097:18;;;14090:30;14156:34;14136:18;;;14129:62;-1:-1:-1;;;14207:18:75;;;14200:34;14251:19;;3569:92:68;13876:400:75;3569:92:68;3671:4;:11;;;3692:12;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;3714:13:68;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;3737:16:68;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;;3763:7:68;:23;;-1:-1:-1;;;;;3763:23:68;;;-1:-1:-1;;;;;;3763:23:68;;;;;;3796:22;:37;;-1:-1:-1;;;;;;3843:18:68;3796:37;;;;3843:18;-1:-1:-1;;;3843:18:68;;;;;;;3878:11;;;3843:18;3878:11;;;-1:-1:-1;;;;2911:985:68:o;3039:96:11:-;3097:7;3123:5;3127:1;3123;:5;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:597:75;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:75;574:15;-1:-1:-1;;570:29:75;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:75:o;824:173::-;892:20;;-1:-1:-1;;;;;941:31:75;;931:42;;921:70;;987:1;984;977:12;921:70;824:173;;;:::o;1002:254::-;1070:6;1078;1131:2;1119:9;1110:7;1106:23;1102:32;1099:52;;;1147:1;1144;1137:12;1099:52;1170:29;1189:9;1170:29;:::i;:::-;1160:39;1246:2;1231:18;;;;1218:32;;-1:-1:-1;;;1002:254:75:o;1635:328::-;1712:6;1720;1728;1781:2;1769:9;1760:7;1756:23;1752:32;1749:52;;;1797:1;1794;1787:12;1749:52;1820:29;1839:9;1820:29;:::i;:::-;1810:39;;1868:38;1902:2;1891:9;1887:18;1868:38;:::i;:::-;1858:48;;1953:2;1942:9;1938:18;1925:32;1915:42;;1635:328;;;;;:::o;2157:248::-;2225:6;2233;2286:2;2274:9;2265:7;2261:23;2257:32;2254:52;;;2302:1;2299;2292:12;2254:52;-1:-1:-1;;2325:23:75;;;2395:2;2380:18;;;2367:32;;-1:-1:-1;2157:248:75:o;2410:186::-;2469:6;2522:2;2510:9;2501:7;2497:23;2493:32;2490:52;;;2538:1;2535;2528:12;2490:52;2561:29;2580:9;2561:29;:::i;2601:391::-;2687:6;2695;2703;2711;2764:3;2752:9;2743:7;2739:23;2735:33;2732:53;;;2781:1;2778;2771:12;2732:53;2817:9;2804:23;2794:33;;2846:38;2880:2;2869:9;2865:18;2846:38;:::i;:::-;2601:391;;2836:48;;-1:-1:-1;;;;2931:2:75;2916:18;;2903:32;;2982:2;2967:18;2954:32;;2601:391::o;2997:348::-;3049:8;3059:6;3113:3;3106:4;3098:6;3094:17;3090:27;3080:55;;3131:1;3128;3121:12;3080:55;-1:-1:-1;3154:20:75;;3197:18;3186:30;;3183:50;;;3229:1;3226;3219:12;3183:50;3266:4;3258:6;3254:17;3242:29;;3318:3;3311:4;3302:6;3294;3290:19;3286:30;3283:39;3280:59;;;3335:1;3332;3325:12;3280:59;2997:348;;;;;:::o;3350:1229::-;3490:6;3498;3506;3514;3522;3530;3538;3546;3554;3607:3;3595:9;3586:7;3582:23;3578:33;3575:53;;;3624:1;3621;3614:12;3575:53;3664:9;3651:23;3693:18;3734:2;3726:6;3723:14;3720:34;;;3750:1;3747;3740:12;3720:34;3789:59;3840:7;3831:6;3820:9;3816:22;3789:59;:::i;:::-;3867:8;;-1:-1:-1;3763:85:75;-1:-1:-1;3955:2:75;3940:18;;3927:32;;-1:-1:-1;3971:16:75;;;3968:36;;;4000:1;3997;3990:12;3968:36;4039:61;4092:7;4081:8;4070:9;4066:24;4039:61;:::i;:::-;4119:8;;-1:-1:-1;4013:87:75;-1:-1:-1;4013:87:75;;-1:-1:-1;4173:38:75;4207:2;4192:18;;4173:38;:::i;:::-;4163:48;;4258:2;4247:9;4243:18;4230:32;4220:42;;4315:3;4304:9;4300:19;4287:33;4271:49;;4345:2;4335:8;4332:16;4329:36;;;4361:1;4358;4351:12;4329:36;;4400:61;4453:7;4442:8;4431:9;4427:24;4400:61;:::i;:::-;4480:8;;-1:-1:-1;4374:87:75;-1:-1:-1;4534:39:75;;-1:-1:-1;4568:3:75;4553:19;;4534:39;:::i;:::-;4524:49;;3350:1229;;;;;;;;;;;:::o;4584:397::-;4670:6;4678;4686;4694;4747:3;4735:9;4726:7;4722:23;4718:33;4715:53;;;4764:1;4761;4754:12;4715:53;4787:29;4806:9;4787:29;:::i;:::-;4777:39;;4863:2;4852:9;4848:18;4835:32;4825:42;;4914:2;4903:9;4899:18;4886:32;4876:42;;4937:38;4971:2;4960:9;4956:18;4937:38;:::i;:::-;4927:48;;4584:397;;;;;;;:::o;4986:260::-;5054:6;5062;5115:2;5103:9;5094:7;5090:23;5086:32;5083:52;;;5131:1;5128;5121:12;5083:52;5154:29;5173:9;5154:29;:::i;:::-;5144:39;;5202:38;5236:2;5225:9;5221:18;5202:38;:::i;:::-;5192:48;;4986:260;;;;;:::o;5251:380::-;5330:1;5326:12;;;;5373;;;5394:61;;5448:4;5440:6;5436:17;5426:27;;5394:61;5501:2;5493:6;5490:14;5470:18;5467:38;5464:161;;;5547:10;5542:3;5538:20;5535:1;5528:31;5582:4;5579:1;5572:15;5610:4;5607:1;5600:15;5464:161;;5251:380;;;:::o;6045:127::-;6106:10;6101:3;6097:20;6094:1;6087:31;6137:4;6134:1;6127:15;6161:4;6158:1;6151:15;6177:217;6217:1;6243;6233:132;;6287:10;6282:3;6278:20;6275:1;6268:31;6322:4;6319:1;6312:15;6350:4;6347:1;6340:15;6233:132;-1:-1:-1;6379:9:75;;6177:217::o;6399:128::-;6439:3;6470:1;6466:6;6463:1;6460:13;6457:39;;;6476:18;;:::i;:::-;-1:-1:-1;6512:9:75;;6399:128::o;6532:397::-;6734:2;6716:21;;;6773:2;6753:18;;;6746:30;6812:34;6807:2;6792:18;;6785:62;-1:-1:-1;;;6878:2:75;6863:18;;6856:31;6919:3;6904:19;;6532:397::o;12077:168::-;12117:7;12183:1;12179;12175:6;12171:14;12168:1;12165:21;12160:1;12153:9;12146:17;12142:45;12139:71;;;12190:18;;:::i;:::-;-1:-1:-1;12230:9:75;;12077:168::o;14281:125::-;14321:4;14349:1;14346;14343:8;14340:34;;;14354:18;;:::i;:::-;-1:-1:-1;14391:9:75;;14281:125::o",
  "language": "Solidity",
  "natspec": {
    "details": "DatatokenTemplate is an ERC20 compliant token template      Used by the factory contract as a bytecode reference to       deploy new Datatokens.",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "approveMinter()": {
        "details": "approveMinter      It approves a new token minter address.      Only the current minter can call it."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "blob()": {
        "details": "blob      It returns the blob (e.g https://123.com).",
        "returns": {
          "_0": "Datatoken blob."
        }
      },
      "calculateFee(uint256,uint256)": {
        "details": "calculateFee      giving a fee percentage, and amount it calculates the actual fee",
        "params": {
          "amount": "the amount of token",
          "feePercentage": "the fee percentage "
        },
        "returns": {
          "_0": "the token fee."
        }
      },
      "cap()": {
        "details": "cap      it returns the capital.",
        "returns": {
          "_0": "Datatoken cap."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "isInitialized()": {
        "details": "isInitialized      It checks whether the contract is initialized.",
        "returns": {
          "_0": "true if the contract is initialized."
        }
      },
      "isMinter(address)": {
        "details": "isMinter      It takes the address and checks whether it has a minter role.",
        "params": {
          "account": "refers to the address."
        },
        "returns": {
          "_0": "true if account has a minter role."
        }
      },
      "minter()": {
        "details": "minter",
        "returns": {
          "_0": "minter's address."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "proposeMinter(address)": {
        "details": "proposeMinter      It proposes a new token minter address.      Only the current minter can call it.",
        "params": {
          "newMinter": "refers to a new token minter address."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "title": "DatatokenTemplate  ",
    "version": 1
  },
  "offset": [
    596,
    8309
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x18E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xAA271E1A GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0xEB40024B EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0xEC342AD0 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0xFDE0E7A8 EQ PUSH2 0x395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA271E1A EQ PUSH2 0x310 JUMPI DUP1 PUSH4 0xAB63D2B2 EQ PUSH2 0x332 JUMPI DUP1 PUSH4 0xB2263A5D EQ PUSH2 0x214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x293 JUMPI DUP1 PUSH4 0x8CA0C059 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x9070D2F8 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x392E53CD GT PUSH2 0x125 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x50D2FCC4 EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x34E73122 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x355274EA EQ PUSH2 0x23E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x7546172 EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x294541C7 EQ PUSH2 0x214 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19B PUSH2 0x39D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0x121A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A8 JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x42F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A8 JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0x12B5 JUMP JUMPDEST PUSH2 0x446 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1A8 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0x50C JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x1F3 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1DF JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH2 0x27E PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27E PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x1313 JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x2A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1313 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x27E PUSH2 0x2CA CALLDATASIZE PUSH1 0x4 PUSH2 0x132E JUMP JUMPDEST PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x13B2 JUMP JUMPDEST PUSH2 0x771 JUMP JUMPDEST PUSH2 0x19B PUSH2 0x8A7 JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x2F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x8B6 JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x128B JUMP JUMPDEST PUSH2 0x94F JUMP JUMPDEST PUSH2 0x1DF PUSH2 0x31E CALLDATASIZE PUSH1 0x4 PUSH2 0x1313 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x27E PUSH2 0x340 CALLDATASIZE PUSH1 0x4 PUSH2 0x1479 JUMP JUMPDEST PUSH2 0x95C JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x353 CALLDATASIZE PUSH1 0x4 PUSH2 0x14BF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x27E PUSH2 0xA51 JUMP JUMPDEST PUSH2 0x1F3 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST PUSH2 0x19B PUSH2 0xB38 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x3AC SWAP1 PUSH2 0x14F2 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D8 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x425 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x425 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x408 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C CALLER DUP5 DUP5 PUSH2 0xB47 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x453 DUP5 DUP5 DUP5 PUSH2 0xC6B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x4DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA DUP6 CALLER DUP6 DUP5 SUB PUSH2 0xB47 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x509 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1543 JUMP JUMPDEST DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x51B JUMPI POP PUSH1 0x0 PUSH2 0x440 JUMP JUMPDEST DUP2 PUSH2 0x528 JUMPI POP PUSH1 0x0 PUSH2 0x440 JUMP JUMPDEST PUSH2 0x544 PUSH8 0xDE0B6B3A7640000 PUSH2 0x53E DUP6 DUP6 PUSH2 0xE2C JUMP JUMPDEST SWAP1 PUSH2 0xE38 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x43C SWAP2 DUP6 SWAP1 PUSH2 0x582 SWAP1 DUP7 SWAP1 PUSH2 0x1565 JUMP JUMPDEST PUSH2 0xB47 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0x157D JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x5C7 DUP3 PUSH2 0x5C1 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE44 JUMP JUMPDEST GT ISZERO PUSH2 0x615 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A2063617020657863656564656400 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x61F DUP3 DUP3 PUSH2 0xE50 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x64D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D4 SWAP1 PUSH2 0x157D JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0xA24C529CC8B2D85B7DFB2ED0B4D7E9A816546212138B5D223BEE13481E21BE6B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST DUP2 ISZERO PUSH2 0x716 JUMPI PUSH2 0x6B8 DUP4 DUP4 PUSH2 0x94F JUMP JUMPDEST PUSH2 0x716 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A206661696C656420746F2066696E PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x34B9B41037B93232B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x60 DUP3 ADD MSTORE CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0x46872661D5D7765097D3A97CA99B7CBFA68B54B6D51904168974901EE607A26D SWAP1 PUSH1 0x80 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20746F6B656E20696E7374616E63 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x1948185B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x899 DUP11 DUP11 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP15 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP13 DUP2 MSTORE SWAP3 POP DUP13 SWAP2 POP DUP12 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP12 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP10 DUP2 MSTORE DUP13 SWAP4 POP DUP12 SWAP3 POP SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP PUSH2 0xF2F SWAP2 POP POP JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3AC SWAP1 PUSH2 0x14F2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x938 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH2 0x945 CALLER DUP6 DUP6 DUP5 SUB PUSH2 0xB47 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43C CALLER DUP5 DUP5 PUSH2 0xC6B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x977 DUP6 PUSH2 0x239 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x9 SLOAD SWAP1 SWAP2 POP PUSH2 0x990 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH2 0x94F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x9C6 JUMPI PUSH2 0x9B8 DUP6 PUSH2 0x239 PUSH2 0x3E8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1543 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C4 DUP4 DUP4 PUSH2 0x94F JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 PUSH2 0x9D2 DUP3 DUP5 PUSH2 0xE44 JUMP JUMPDEST PUSH1 0xA SLOAD SWAP1 SWAP2 POP PUSH2 0x9EF SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x30B DUP9 DUP5 PUSH2 0x1175 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP3 CALLER SWAP3 SWAP2 DUP12 AND SWAP2 PUSH32 0xE1C4FA794EDFA8F619B8257A077398950357B9C6398528F94480307352F9AFCC SWAP2 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 LOG4 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAC6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20696E76616C69642070726F706F PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x736564206D696E7465722061646472657373 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x96AB0400119A548D3CC4C74E857D0D9C427FE9DF20D3D0D99AF10CC292E6C886 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xB DUP1 SLOAD PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x7 DUP1 SLOAD PUSH2 0x3AC SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xBA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xC0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCCF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xDE0 SWAP1 DUP5 SWAP1 PUSH2 0x1565 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x544 DUP3 DUP5 PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x544 DUP3 DUP5 PUSH2 0x1543 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x544 DUP3 DUP5 PUSH2 0x1565 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xEA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4D4 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xEB8 SWAP2 SWAP1 PUSH2 0x1565 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xEE5 SWAP1 DUP5 SWAP1 PUSH2 0x1565 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0xFA0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20496E76616C6964206D696E7465 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x722C20207A65726F2061646472657373 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1011 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20496E76616C6964206D696E7465 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x722C207A65726F2061646472657373 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x108F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20496E76616C696420636F6D6D75 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6E6974792066656520636F6C6C6563746F722C207A65726F2061646472657373 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST DUP4 PUSH2 0x10E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20496E76616C6964206361702076 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x616C7565 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4D4 JUMP JUMPDEST PUSH1 0x8 DUP5 SWAP1 SSTORE DUP7 MLOAD PUSH2 0x1100 SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP11 ADD SWAP1 PUSH2 0x1181 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x1114 SWAP1 PUSH1 0x7 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1181 JUMP JUMPDEST POP DUP6 MLOAD PUSH2 0x1128 SWAP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0x1181 JUMP JUMPDEST POP POP PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP2 SWAP1 SWAP5 AND OR PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DUP2 OR SWAP4 DUP5 SWAP1 SSTORE SWAP1 SWAP3 DIV PUSH1 0xFF AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x544 DUP3 DUP5 PUSH2 0x15DD JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x118D SWAP1 PUSH2 0x14F2 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x11AF JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x11F5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x11C8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x11F5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x11F5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x11F5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11DA JUMP JUMPDEST POP PUSH2 0x1201 SWAP3 SWAP2 POP PUSH2 0x1205 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1201 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1206 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1247 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x122B JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1259 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x129E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12A7 DUP4 PUSH2 0x126F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x12CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12D3 DUP5 PUSH2 0x126F JUMP JUMPDEST SWAP3 POP PUSH2 0x12E1 PUSH1 0x20 DUP6 ADD PUSH2 0x126F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x544 DUP3 PUSH2 0x126F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1344 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x1354 PUSH1 0x20 DUP7 ADD PUSH2 0x126F JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x137B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x13AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xC0 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x13D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x13E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13F4 DUP14 DUP4 DUP15 ADD PUSH2 0x1369 JUMP JUMPDEST SWAP1 SWAP12 POP SWAP10 POP PUSH1 0x20 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x140D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1419 DUP14 DUP4 DUP15 ADD PUSH2 0x1369 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP8 POP DUP8 SWAP2 POP PUSH2 0x142D PUSH1 0x40 DUP14 ADD PUSH2 0x126F JUMP JUMPDEST SWAP7 POP PUSH1 0x60 DUP13 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x144A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1457 DUP13 DUP3 DUP14 ADD PUSH2 0x1369 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH2 0x146A SWAP1 POP PUSH1 0xA0 DUP12 ADD PUSH2 0x126F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x148F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1498 DUP6 PUSH2 0x126F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH2 0x14B4 PUSH1 0x60 DUP7 ADD PUSH2 0x126F JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14DB DUP4 PUSH2 0x126F JUMP JUMPDEST SWAP2 POP PUSH2 0x14E9 PUSH1 0x20 DUP5 ADD PUSH2 0x126F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1506 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1527 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1560 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1578 JUMPI PUSH2 0x1578 PUSH2 0x152D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x44617461746F6B656E54656D706C6174653A20696E76616C6964206D696E7465 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x15D8 JUMPI PUSH2 0x15D8 PUSH2 0x152D JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x15EF JUMPI PUSH2 0x15EF PUSH2 0x152D JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC EXP 0xC 0xA7 0xD1 MSTORE8 0xE4 0xBD 0xBF DUP8 0x2D SWAP16 CALLVALUE 0xDA 0xE9 0xC9 0x5F 0xE9 DUP7 0xE3 SGT 0xE5 PUSH3 0x75C465 0x4F 0x2A 0xC3 PUSH23 0xC3A464736F6C634300080C003300000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "5": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "CALLVALUE",
      "path": "68"
    },
    "6": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "7": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "ISZERO",
      "path": "68"
    },
    "8": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "12": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "16": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "17": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "POP",
      "path": "68"
    },
    "18": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "21": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "LT",
      "path": "68"
    },
    "22": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x18E"
    },
    "25": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "26": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "CALLDATALOAD",
      "path": "68"
    },
    "29": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "SHR",
      "path": "68"
    },
    "32": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "33": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x70A08231"
    },
    "38": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "GT",
      "path": "68"
    },
    "39": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xDE"
    },
    "42": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "43": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "44": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xAA271E1A"
    },
    "49": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "GT",
      "path": "68"
    },
    "50": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x97"
    },
    "53": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "54": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "55": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xDD62ED3E"
    },
    "60": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "GT",
      "path": "68"
    },
    "61": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x71"
    },
    "64": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "65": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "66": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xDD62ED3E"
    },
    "71": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "72": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x345"
    },
    "75": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "76": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "77": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xEB40024B"
    },
    "82": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "83": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x37E"
    },
    "86": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "87": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "88": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xEC342AD0"
    },
    "93": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "94": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x386"
    },
    "97": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "98": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "99": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xFDE0E7A8"
    },
    "104": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "105": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x395"
    },
    "108": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "109": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "112": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "113": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "114": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "115": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xAA271E1A"
    },
    "120": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "121": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x310"
    },
    "124": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "125": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "126": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xAB63D2B2"
    },
    "131": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "132": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x332"
    },
    "135": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "136": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "137": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xB2263A5D"
    },
    "142": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "143": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x214"
    },
    "146": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "147": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "149": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "150": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "151": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "152": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "153": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x70A08231"
    },
    "158": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "159": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x293"
    },
    "162": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "163": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "164": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x8CA0C059"
    },
    "169": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "170": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2BC"
    },
    "173": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "174": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "175": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x9070D2F8"
    },
    "180": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "181": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2CF"
    },
    "184": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "185": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "186": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x95D89B41"
    },
    "191": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "192": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2E2"
    },
    "195": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "196": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "197": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xA457C2D7"
    },
    "202": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "203": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2EA"
    },
    "206": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "207": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "208": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0xA9059CBB"
    },
    "213": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "214": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2FD"
    },
    "217": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "218": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "220": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "221": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "222": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "223": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "224": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x313CE567"
    },
    "229": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "GT",
      "path": "68"
    },
    "230": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x14B"
    },
    "233": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "234": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "235": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x392E53CD"
    },
    "240": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "GT",
      "path": "68"
    },
    "241": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x125"
    },
    "244": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "245": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "246": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x392E53CD"
    },
    "251": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "252": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x246"
    },
    "255": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "256": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "257": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x39509351"
    },
    "262": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "263": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x258"
    },
    "266": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "267": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "268": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x40C10F19"
    },
    "273": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "274": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x26B"
    },
    "277": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "278": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "279": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x50D2FCC4"
    },
    "284": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "285": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x280"
    },
    "288": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "289": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "291": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "292": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "293": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "294": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "295": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x313CE567"
    },
    "300": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "301": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x21C"
    },
    "304": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "305": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "306": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x34E73122"
    },
    "311": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "312": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x22B"
    },
    "315": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "316": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "317": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x355274EA"
    },
    "322": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "323": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x23E"
    },
    "326": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "327": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "329": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "330": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "331": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "332": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "333": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x6FDDE03"
    },
    "338": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "339": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x193"
    },
    "342": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "343": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "344": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x7546172"
    },
    "349": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "350": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1B1"
    },
    "353": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "354": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "355": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x95EA7B3"
    },
    "360": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "361": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1CC"
    },
    "364": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "365": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "366": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x18160DDD"
    },
    "371": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "372": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1EF"
    },
    "375": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "376": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "377": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x23B872DD"
    },
    "382": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "383": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x201"
    },
    "386": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "387": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "388": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH4",
      "path": "68",
      "value": "0x294541C7"
    },
    "393": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "EQ",
      "path": "68"
    },
    "394": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x214"
    },
    "397": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "398": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "399": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "401": {
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "DUP1",
      "path": "68"
    },
    "402": {
      "first_revert": true,
      "fn": null,
      "offset": [
        596,
        8309
      ],
      "op": "REVERT",
      "path": "68"
    },
    "403": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "404": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x19B"
    },
    "407": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x39D"
    },
    "410": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "3"
    },
    "411": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "412": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "414": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "415": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1A8"
    },
    "418": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "419": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "420": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x121A"
    },
    "423": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "3"
    },
    "424": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "425": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "427": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "428": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "DUP1",
      "path": "3"
    },
    "429": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "430": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SUB",
      "path": "3"
    },
    "431": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "432": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "RETURN",
      "path": "3"
    },
    "433": {
      "fn": "MockOldDT.minter",
      "offset": [
        7432,
        7541
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "434": {
      "fn": "MockOldDT.minter",
      "offset": [
        7527,
        7534
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 0,
      "value": "0xA"
    },
    "436": {
      "fn": "MockOldDT.minter",
      "offset": [
        7527,
        7534
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "437": {
      "fn": "MockOldDT.minter",
      "offset": [
        7432,
        7541
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "439": {
      "fn": "MockOldDT.minter",
      "offset": [
        7432,
        7541
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "440": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "442": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "444": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "446": {
      "op": "SHL"
    },
    "447": {
      "op": "SUB"
    },
    "448": {
      "fn": "MockOldDT.minter",
      "offset": [
        7527,
        7534
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "449": {
      "fn": "MockOldDT.minter",
      "offset": [
        7527,
        7534
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "450": {
      "fn": "MockOldDT.minter",
      "offset": [
        7527,
        7534
      ],
      "op": "AND",
      "path": "68"
    },
    "451": {
      "op": "DUP2"
    },
    "452": {
      "op": "MSTORE"
    },
    "453": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "455": {
      "op": "ADD"
    },
    "456": {
      "fn": "MockOldDT.minter",
      "offset": [
        7432,
        7541
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1A8"
    },
    "459": {
      "op": "JUMP"
    },
    "460": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "461": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1DF"
    },
    "464": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1DA"
    },
    "467": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "468": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "470": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x128B"
    },
    "473": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "3"
    },
    "474": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "475": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x42F"
    },
    "478": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "3"
    },
    "479": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "480": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "482": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "483": {
      "op": "SWAP1"
    },
    "484": {
      "op": "ISZERO"
    },
    "485": {
      "op": "ISZERO"
    },
    "486": {
      "op": "DUP2"
    },
    "487": {
      "op": "MSTORE"
    },
    "488": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "490": {
      "op": "ADD"
    },
    "491": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1A8"
    },
    "494": {
      "op": "JUMP"
    },
    "495": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "496": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 1,
      "value": "0x2"
    },
    "498": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "499": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "500": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "502": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "503": {
      "op": "SWAP1"
    },
    "504": {
      "op": "DUP2"
    },
    "505": {
      "op": "MSTORE"
    },
    "506": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "508": {
      "op": "ADD"
    },
    "509": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1A8"
    },
    "512": {
      "op": "JUMP"
    },
    "513": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "514": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1DF"
    },
    "517": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x20F"
    },
    "520": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "521": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "523": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x12B5"
    },
    "526": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "3"
    },
    "527": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "528": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x446"
    },
    "531": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "3"
    },
    "532": {
      "offset": [
        1154,
        1218
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "533": {
      "fn": "ERC20.transferFrom",
      "offset": [
        1154,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1F3"
    },
    "536": {
      "fn": "ERC20.transferFrom",
      "offset": [
        1154,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4F5"
    },
    "539": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        1154,
        1218
      ],
      "op": "JUMP",
      "path": "68"
    },
    "540": {
      "fn": "ERC20.decimals",
      "offset": [
        3011,
        3102
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "541": {
      "fn": "ERC20.decimals",
      "offset": [
        3011,
        3102
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "543": {
      "fn": "ERC20.decimals",
      "offset": [
        3011,
        3102
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "544": {
      "fn": "ERC20.decimals",
      "offset": [
        3093,
        3095
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 2,
      "value": "0x12"
    },
    "546": {
      "op": "DUP2"
    },
    "547": {
      "op": "MSTORE"
    },
    "548": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "550": {
      "op": "ADD"
    },
    "551": {
      "fn": "ERC20.decimals",
      "offset": [
        3011,
        3102
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1A8"
    },
    "554": {
      "op": "JUMP"
    },
    "555": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "556": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1F3"
    },
    "559": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x239"
    },
    "562": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "563": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "565": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x12F1"
    },
    "568": {
      "fn": "MockOldDT.calculateFee",
      "jump": "i",
      "offset": [
        8033,
        8307
      ],
      "op": "JUMP",
      "path": "68"
    },
    "569": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "570": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x50C"
    },
    "573": {
      "fn": "MockOldDT.calculateFee",
      "jump": "i",
      "offset": [
        8033,
        8307
      ],
      "op": "JUMP",
      "path": "68"
    },
    "574": {
      "fn": "MockOldDT.cap",
      "offset": [
        6963,
        7038
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "575": {
      "fn": "MockOldDT.cap",
      "offset": [
        7027,
        7031
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 3,
      "value": "0x8"
    },
    "577": {
      "fn": "MockOldDT.cap",
      "offset": [
        7027,
        7031
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "578": {
      "fn": "MockOldDT.cap",
      "offset": [
        6963,
        7038
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1F3"
    },
    "581": {
      "fn": "MockOldDT.cap",
      "offset": [
        6963,
        7038
      ],
      "op": "JUMP",
      "path": "68"
    },
    "582": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7701,
        7789
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "583": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7771,
        7782
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 4,
      "value": "0x9"
    },
    "585": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7771,
        7782
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "586": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "588": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "590": {
      "op": "SHL"
    },
    "591": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7771,
        7782
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "592": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7771,
        7782
      ],
      "op": "DIV",
      "path": "68"
    },
    "593": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7771,
        7782
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xFF"
    },
    "595": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7771,
        7782
      ],
      "op": "AND",
      "path": "68"
    },
    "596": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7701,
        7789
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1DF"
    },
    "599": {
      "fn": "MockOldDT.isInitialized",
      "offset": [
        7701,
        7789
      ],
      "op": "JUMP",
      "path": "68"
    },
    "600": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "601": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1DF"
    },
    "604": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x266"
    },
    "607": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "608": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "610": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x128B"
    },
    "613": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMP",
      "path": "3"
    },
    "614": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "615": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x54B"
    },
    "618": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMP",
      "path": "3"
    },
    "619": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "620": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x27E"
    },
    "623": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x279"
    },
    "626": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "627": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "629": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x128B"
    },
    "632": {
      "fn": "MockOldDT.mint",
      "jump": "i",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMP",
      "path": "68"
    },
    "633": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "634": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x587"
    },
    "637": {
      "fn": "MockOldDT.mint",
      "jump": "i",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMP",
      "path": "68"
    },
    "638": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "639": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "STOP",
      "path": "68"
    },
    "640": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "641": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x27E"
    },
    "644": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x28E"
    },
    "647": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "648": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "650": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1313"
    },
    "653": {
      "fn": "MockOldDT.proposeMinter",
      "jump": "i",
      "offset": [
        5923,
        6144
      ],
      "op": "JUMP",
      "path": "68"
    },
    "654": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "655": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x623"
    },
    "658": {
      "fn": "MockOldDT.proposeMinter",
      "jump": "i",
      "offset": [
        5923,
        6144
      ],
      "op": "JUMP",
      "path": "68"
    },
    "659": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "660": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1F3"
    },
    "663": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2A1"
    },
    "666": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "667": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "669": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1313"
    },
    "672": {
      "fn": "ERC20.balanceOf",
      "jump": "i",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "3"
    },
    "673": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "op": "SUB"
    },
    "682": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "AND",
      "path": "3",
      "statement": 5
    },
    "683": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3400,
        3407
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "685": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "686": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "3"
    },
    "687": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "688": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "690": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "DUP2",
      "path": "3"
    },
    "691": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "692": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "693": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "695": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "696": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "697": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "698": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3426,
        3444
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "699": {
      "fn": "ERC20.balanceOf",
      "offset": [
        3326,
        3451
      ],
      "op": "JUMP",
      "path": "3"
    },
    "700": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "701": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x27E"
    },
    "704": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2CA"
    },
    "707": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "708": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "710": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x132E"
    },
    "713": {
      "fn": "MockOldDT.finishOrder",
      "jump": "i",
      "offset": [
        5147,
        5712
      ],
      "op": "JUMP",
      "path": "68"
    },
    "714": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "715": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x6A8"
    },
    "718": {
      "fn": "MockOldDT.finishOrder",
      "jump": "i",
      "offset": [
        5147,
        5712
      ],
      "op": "JUMP",
      "path": "68"
    },
    "719": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "720": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1DF"
    },
    "723": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x2DD"
    },
    "726": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "727": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "729": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x13B2"
    },
    "732": {
      "fn": "MockOldDT.initialize",
      "jump": "i",
      "offset": [
        2455,
        2901
      ],
      "op": "JUMP",
      "path": "68"
    },
    "733": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "734": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x771"
    },
    "737": {
      "fn": "MockOldDT.initialize",
      "jump": "i",
      "offset": [
        2455,
        2901
      ],
      "op": "JUMP",
      "path": "68"
    },
    "738": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "739": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x19B"
    },
    "742": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8A7"
    },
    "745": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMP",
      "path": "3"
    },
    "746": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "747": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1DF"
    },
    "750": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2F8"
    },
    "753": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "754": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "756": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x128B"
    },
    "759": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "3"
    },
    "760": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "761": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8B6"
    },
    "764": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "3"
    },
    "765": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "766": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1DF"
    },
    "769": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x30B"
    },
    "772": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "773": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "775": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x128B"
    },
    "778": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMP",
      "path": "3"
    },
    "779": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "780": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x94F"
    },
    "783": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMP",
      "path": "3"
    },
    "784": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "785": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1DF"
    },
    "788": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x31E"
    },
    "791": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "792": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "794": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1313"
    },
    "797": {
      "fn": "MockOldDT.isMinter",
      "jump": "i",
      "offset": [
        7250,
        7357
      ],
      "op": "JUMP",
      "path": "68"
    },
    "798": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "799": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7338
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 6,
      "value": "0xA"
    },
    "801": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7338
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "806": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "808": {
      "op": "SHL"
    },
    "809": {
      "op": "SUB"
    },
    "810": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7338
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "811": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7338
      ],
      "op": "DUP2",
      "path": "68"
    },
    "812": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7338
      ],
      "op": "AND",
      "path": "68"
    },
    "813": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7349
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "814": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7349
      ],
      "op": "AND",
      "path": "68"
    },
    "815": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7349
      ],
      "op": "EQ",
      "path": "68"
    },
    "816": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7331,
        7349
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "817": {
      "fn": "MockOldDT.isMinter",
      "offset": [
        7250,
        7357
      ],
      "op": "JUMP",
      "path": "68"
    },
    "818": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "819": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x27E"
    },
    "822": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x340"
    },
    "825": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "CALLDATASIZE",
      "path": "68"
    },
    "826": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "828": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1479"
    },
    "831": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        4183,
        5136
      ],
      "op": "JUMP",
      "path": "68"
    },
    "832": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "833": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x95C"
    },
    "836": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        4183,
        5136
      ],
      "op": "JUMP",
      "path": "68"
    },
    "837": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "838": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1F3"
    },
    "841": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x353"
    },
    "844": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "845": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "847": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14BF"
    },
    "850": {
      "fn": "ERC20.allowance",
      "jump": "i",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMP",
      "path": "3"
    },
    "851": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "852": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "856": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "858": {
      "op": "SHL"
    },
    "859": {
      "op": "SUB"
    },
    "860": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP2",
      "path": "3",
      "statement": 7
    },
    "861": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP3",
      "path": "3"
    },
    "862": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "AND",
      "path": "3"
    },
    "863": {
      "fn": "ERC20.allowance",
      "offset": [
        3973,
        3980
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "865": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "866": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP2",
      "path": "3"
    },
    "867": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "868": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4010
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "870": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "872": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "873": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP2",
      "path": "3"
    },
    "874": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "875": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "877": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP1",
      "path": "3"
    },
    "878": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "DUP4",
      "path": "3"
    },
    "879": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4017
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "880": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "881": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "882": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "883": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "AND",
      "path": "3"
    },
    "884": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "DUP3",
      "path": "3"
    },
    "885": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "886": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "887": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "888": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "889": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "890": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "891": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "892": {
      "fn": "ERC20.allowance",
      "offset": [
        3999,
        4026
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "893": {
      "fn": "ERC20.allowance",
      "offset": [
        3884,
        4033
      ],
      "op": "JUMP",
      "path": "3"
    },
    "894": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6293,
        6644
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "895": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6293,
        6644
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x27E"
    },
    "898": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6293,
        6644
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xA51"
    },
    "901": {
      "fn": "MockOldDT.approveMinter",
      "jump": "i",
      "offset": [
        6293,
        6644
      ],
      "op": "JUMP",
      "path": "68"
    },
    "902": {
      "offset": [
        1038,
        1075
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "903": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        1038,
        1075
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1F3"
    },
    "906": {
      "offset": [
        1069,
        1075
      ],
      "op": "PUSH8",
      "path": "68",
      "value": "0xDE0B6B3A7640000"
    },
    "915": {
      "offset": [
        1038,
        1075
      ],
      "op": "DUP2",
      "path": "68"
    },
    "916": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        1038,
        1075
      ],
      "op": "JUMP",
      "path": "68"
    },
    "917": {
      "fn": "MockOldDT.blob",
      "offset": [
        6773,
        6855
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "918": {
      "fn": "MockOldDT.blob",
      "offset": [
        6773,
        6855
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x19B"
    },
    "921": {
      "fn": "MockOldDT.blob",
      "offset": [
        6773,
        6855
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xB38"
    },
    "924": {
      "fn": "MockOldDT.blob",
      "jump": "i",
      "offset": [
        6773,
        6855
      ],
      "op": "JUMP",
      "path": "68"
    },
    "925": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "926": {
      "fn": "ERC20.name",
      "offset": [
        2128,
        2141
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "928": {
      "fn": "ERC20.name",
      "offset": [
        2160,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 8,
      "value": "0x3"
    },
    "930": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "931": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "932": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3AC"
    },
    "935": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "936": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14F2"
    },
    "939": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "3"
    },
    "940": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "941": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "942": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "944": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "945": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "947": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "948": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "949": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DIV",
      "path": "3"
    },
    "950": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MUL",
      "path": "3"
    },
    "951": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "953": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "954": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "956": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "957": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "958": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "3"
    },
    "959": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "960": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "962": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "963": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "964": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "965": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "966": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "967": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "3"
    },
    "968": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "3"
    },
    "969": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "970": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "972": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "973": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "3"
    },
    "974": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "975": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "976": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3D8"
    },
    "979": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "980": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14F2"
    },
    "983": {
      "fn": "ERC20.name",
      "jump": "i",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "3"
    },
    "984": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "985": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "986": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "987": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x425"
    },
    "990": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "991": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "992": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "994": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "LT",
      "path": "3"
    },
    "995": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3FA"
    },
    "998": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "999": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x100"
    },
    "1002": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1003": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1004": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1005": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DIV",
      "path": "3"
    },
    "1006": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MUL",
      "path": "3"
    },
    "1007": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1008": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1009": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1010": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1012": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "1013": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1014": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x425"
    },
    "1017": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1018": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1019": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1020": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "1021": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1022": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1023": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1025": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1026": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1028": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1030": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1031": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1032": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1033": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1034": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1035": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1036": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1037": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1038": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1040": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "1041": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1042": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1044": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "1045": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1046": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1047": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "GT",
      "path": "3"
    },
    "1048": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x408"
    },
    "1051": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1052": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1053": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1054": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SUB",
      "path": "3"
    },
    "1055": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1057": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "AND",
      "path": "3"
    },
    "1058": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1059": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "ADD",
      "path": "3"
    },
    "1060": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1061": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1062": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "3"
    },
    "1063": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "3"
    },
    "1064": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "3"
    },
    "1065": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "3"
    },
    "1066": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "3"
    },
    "1067": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1068": {
      "fn": "ERC20.name",
      "offset": [
        2153,
        2165
      ],
      "op": "POP",
      "path": "3"
    },
    "1069": {
      "fn": "ERC20.name",
      "offset": [
        2074,
        2172
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1070": {
      "fn": "ERC20.name",
      "jump": "o",
      "offset": [
        2074,
        2172
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1071": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1072": {
      "fn": "ERC20.approve",
      "offset": [
        4254,
        4258
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1074": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4309
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 9,
      "value": "0x43C"
    },
    "1077": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9",
      "statement": 10
    },
    "1078": {
      "fn": "ERC20.approve",
      "offset": [
        4293,
        4300
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1079": {
      "fn": "ERC20.approve",
      "offset": [
        4302,
        4308
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1080": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4278
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB47"
    },
    "1083": {
      "fn": "ERC20.approve",
      "jump": "i",
      "offset": [
        4270,
        4309
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1084": {
      "fn": "ERC20.approve",
      "offset": [
        4270,
        4309
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1085": {
      "op": "POP"
    },
    "1086": {
      "fn": "ERC20.approve",
      "offset": [
        4326,
        4330
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 11,
      "value": "0x1"
    },
    "1088": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1089": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1090": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1091": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "POP",
      "path": "3"
    },
    "1092": {
      "fn": "ERC20.approve",
      "offset": [
        4171,
        4337
      ],
      "op": "POP",
      "path": "3"
    },
    "1093": {
      "fn": "ERC20.approve",
      "jump": "o",
      "offset": [
        4171,
        4337
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1094": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1095": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4940,
        4944
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1097": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4992
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 12,
      "value": "0x453"
    },
    "1100": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4966,
        4972
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1101": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4974,
        4983
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1102": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4985,
        4991
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1103": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4965
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC6B"
    },
    "1106": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        4956,
        4992
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1107": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4956,
        4992
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1108": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1110": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1112": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1114": {
      "op": "SHL"
    },
    "1115": {
      "op": "SUB"
    },
    "1116": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1117": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "AND",
      "path": "3"
    },
    "1118": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5003,
        5027
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1120": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1121": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1122": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1123": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5041
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1125": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1127": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1128": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1129": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1130": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1132": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1133": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1134": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5049
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1135": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "1136": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1137": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1138": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1139": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1140": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1141": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1142": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1143": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5030,
        5063
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1144": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 13
    },
    "1145": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1146": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "LT",
      "path": "3"
    },
    "1147": {
      "branch": 83,
      "fn": "ERC20.transferFrom",
      "offset": [
        5081,
        5107
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1148": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4DD"
    },
    "1151": {
      "branch": 83,
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1152": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1154": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1155": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1159": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1161": {
      "op": "SHL"
    },
    "1162": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1163": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1164": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1166": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1168": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1169": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "ADD",
      "path": "3"
    },
    "1170": {
      "op": "MSTORE"
    },
    "1171": {
      "op": "PUSH1",
      "value": "0x28"
    },
    "1173": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1175": {
      "op": "DUP3"
    },
    "1176": {
      "op": "ADD"
    },
    "1177": {
      "op": "MSTORE"
    },
    "1178": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732061"
    },
    "1211": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1213": {
      "op": "DUP3"
    },
    "1214": {
      "op": "ADD"
    },
    "1215": {
      "op": "MSTORE"
    },
    "1216": {
      "op": "PUSH8",
      "value": "0x6C6C6F77616E6365"
    },
    "1225": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1227": {
      "op": "SHL"
    },
    "1228": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1230": {
      "op": "DUP3"
    },
    "1231": {
      "op": "ADD"
    },
    "1232": {
      "op": "MSTORE"
    },
    "1233": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1235": {
      "op": "ADD"
    },
    "1236": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1237": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1239": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1240": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1241": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1242": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SUB",
      "path": "3"
    },
    "1243": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1244": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "3"
    },
    "1245": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5073,
        5152
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1246": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5243
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 14,
      "value": "0x4EA"
    },
    "1249": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5195,
        5201
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1250": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "1251": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5236,
        5242
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1252": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5217,
        5233
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1253": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5217,
        5242
      ],
      "op": "SUB",
      "path": "3"
    },
    "1254": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5194
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB47"
    },
    "1257": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        5186,
        5243
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1258": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5186,
        5243
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1259": {
      "op": "POP"
    },
    "1260": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5271,
        5275
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 15,
      "value": "0x1"
    },
    "1262": {
      "fn": "ERC20.transferFrom",
      "offset": [
        5271,
        5275
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1263": {
      "fn": "ERC20.transferFrom",
      "offset": [
        4804,
        5282
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "1264": {
      "op": "POP"
    },
    "1265": {
      "op": "POP"
    },
    "1266": {
      "op": "POP"
    },
    "1267": {
      "op": "POP"
    },
    "1268": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        4804,
        5282
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1269": {
      "offset": [
        1154,
        1218
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1270": {
      "offset": [
        1207,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x509"
    },
    "1273": {
      "offset": [
        1214,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x3E8"
    },
    "1276": {
      "offset": [
        1069,
        1075
      ],
      "op": "PUSH8",
      "path": "68",
      "value": "0xDE0B6B3A7640000"
    },
    "1285": {
      "offset": [
        1207,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1543"
    },
    "1288": {
      "fn": "ERC20.transferFrom",
      "jump": "i",
      "offset": [
        1207,
        1218
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1289": {
      "fn": "ERC20.transferFrom",
      "offset": [
        1207,
        1218
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1290": {
      "offset": [
        1154,
        1218
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1291": {
      "fn": "ERC20.transferFrom",
      "jump": "o",
      "offset": [
        1154,
        1218
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1292": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1293": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8160,
        8167
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "1295": {
      "branch": 72,
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8186,
        8197
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1296": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8183,
        8207
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x51B"
    },
    "1299": {
      "branch": 72,
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8183,
        8207
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1300": {
      "op": "POP"
    },
    "1301": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8206,
        8207
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 16,
      "value": "0x0"
    },
    "1303": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8199,
        8207
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x440"
    },
    "1306": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8199,
        8207
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1307": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8183,
        8207
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1308": {
      "branch": 73,
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8220,
        8238
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1309": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8217,
        8248
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x528"
    },
    "1312": {
      "branch": 73,
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8217,
        8248
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1313": {
      "op": "POP"
    },
    "1314": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8247,
        8248
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 17,
      "value": "0x0"
    },
    "1316": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8240,
        8248
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x440"
    },
    "1319": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8240,
        8248
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1320": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8217,
        8248
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1321": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8300
      ],
      "op": "PUSH2",
      "path": "68",
      "statement": 18,
      "value": "0x544"
    },
    "1324": {
      "offset": [
        1069,
        1075
      ],
      "op": "PUSH8",
      "path": "68",
      "value": "0xDE0B6B3A7640000"
    },
    "1333": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8290
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x53E"
    },
    "1336": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8271
      ],
      "op": "DUP6",
      "path": "68"
    },
    "1337": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8276,
        8289
      ],
      "op": "DUP6",
      "path": "68"
    },
    "1338": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8275
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xE2C"
    },
    "1341": {
      "fn": "MockOldDT.calculateFee",
      "jump": "i",
      "offset": [
        8265,
        8290
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1342": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8290
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1343": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8294
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1344": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8294
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xE38"
    },
    "1347": {
      "fn": "MockOldDT.calculateFee",
      "jump": "i",
      "offset": [
        8265,
        8300
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1348": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8265,
        8300
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1349": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8258,
        8300
      ],
      "op": "SWAP4",
      "path": "68"
    },
    "1350": {
      "fn": "MockOldDT.calculateFee",
      "offset": [
        8033,
        8307
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "1351": {
      "op": "POP"
    },
    "1352": {
      "op": "POP"
    },
    "1353": {
      "op": "POP"
    },
    "1354": {
      "fn": "MockOldDT.calculateFee",
      "jump": "o",
      "offset": [
        8033,
        8307
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1355": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5677,
        5889
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1356": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "1357": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5765,
        5769
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1359": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 19
    },
    "1360": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1361": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1362": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5824
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1364": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1366": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1367": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1368": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1369": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1371": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1372": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1373": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5838
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1374": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1380": {
      "op": "SHL"
    },
    "1381": {
      "op": "SUB"
    },
    "1382": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1383": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "AND",
      "path": "3"
    },
    "1384": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1385": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1386": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1387": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1388": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1389": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1390": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1391": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5847
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1392": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5765,
        5769
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1393": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5765,
        5769
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1394": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5861
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x43C"
    },
    "1397": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5861
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1398": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5804,
        5811
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1399": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5804,
        5811
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1400": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x582"
    },
    "1403": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1404": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5850,
        5860
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1405": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5850,
        5860
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1406": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1565"
    },
    "1409": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5813,
        5860
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1410": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5813,
        5860
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1411": {
      "fn": "ERC20.increaseAllowance",
      "offset": [
        5781,
        5789
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB47"
    },
    "1414": {
      "fn": "ERC20.increaseAllowance",
      "jump": "i",
      "offset": [
        5781,
        5861
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1415": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1416": {
      "offset": [
        2159,
        2166
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xA"
    },
    "1418": {
      "fn": "MockOldDT.mint",
      "offset": [
        2159,
        2166
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "1419": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1421": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1423": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1425": {
      "op": "SHL"
    },
    "1426": {
      "op": "SUB"
    },
    "1427": {
      "offset": [
        2159,
        2166
      ],
      "op": "AND",
      "path": "68"
    },
    "1428": {
      "offset": [
        2145,
        2155
      ],
      "op": "CALLER",
      "path": "68"
    },
    "1429": {
      "offset": [
        2145,
        2166
      ],
      "op": "EQ",
      "path": "68"
    },
    "1430": {
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x5B1"
    },
    "1433": {
      "offset": [
        2124,
        2226
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1434": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1436": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1437": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1441": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1443": {
      "op": "SHL"
    },
    "1444": {
      "offset": [
        2124,
        2226
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1445": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "1446": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "1448": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "ADD",
      "path": "68"
    },
    "1449": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "1452": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1453": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x157D"
    },
    "1456": {
      "fn": "MockOldDT.mint",
      "jump": "i",
      "offset": [
        2124,
        2226
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1457": {
      "fn": "MockOldDT.mint",
      "offset": [
        2124,
        2226
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1458": {
      "fn": "MockOldDT.mint",
      "offset": [
        4077,
        4081
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 20,
      "value": "0x8"
    },
    "1460": {
      "fn": "MockOldDT.mint",
      "offset": [
        4077,
        4081
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "1461": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4073
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x5C7"
    },
    "1464": {
      "fn": "MockOldDT.mint",
      "offset": [
        4067,
        4072
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1465": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4062
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x5C1"
    },
    "1468": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1470": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1471": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3249,
        3261
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1472": {
      "fn": "ERC20.totalSupply",
      "offset": [
        3162,
        3268
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1473": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4062
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1474": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4066
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1475": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4066
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xE44"
    },
    "1478": {
      "fn": "MockOldDT.mint",
      "jump": "i",
      "offset": [
        4049,
        4073
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1479": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4073
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1480": {
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4081
      ],
      "op": "GT",
      "path": "68"
    },
    "1481": {
      "branch": 74,
      "fn": "MockOldDT.mint",
      "offset": [
        4049,
        4081
      ],
      "op": "ISZERO",
      "path": "68"
    },
    "1482": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x615"
    },
    "1485": {
      "branch": 74,
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1486": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1488": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1489": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1493": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1495": {
      "op": "SHL"
    },
    "1496": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1497": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "1498": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1500": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "1502": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1503": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "ADD",
      "path": "68"
    },
    "1504": {
      "op": "MSTORE"
    },
    "1505": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1507": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1509": {
      "op": "DUP3"
    },
    "1510": {
      "op": "ADD"
    },
    "1511": {
      "op": "MSTORE"
    },
    "1512": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A2063617020657863656564656400"
    },
    "1545": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1547": {
      "op": "DUP3"
    },
    "1548": {
      "op": "ADD"
    },
    "1549": {
      "op": "MSTORE"
    },
    "1550": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1552": {
      "op": "ADD"
    },
    "1553": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "1556": {
      "op": "JUMP"
    },
    "1557": {
      "fn": "MockOldDT.mint",
      "offset": [
        4028,
        4139
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1558": {
      "fn": "MockOldDT.mint",
      "offset": [
        4149,
        4170
      ],
      "op": "PUSH2",
      "path": "68",
      "statement": 21,
      "value": "0x61F"
    },
    "1561": {
      "fn": "MockOldDT.mint",
      "offset": [
        4155,
        4162
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1562": {
      "fn": "MockOldDT.mint",
      "offset": [
        4164,
        4169
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1563": {
      "fn": "MockOldDT.mint",
      "offset": [
        4149,
        4154
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xE50"
    },
    "1566": {
      "fn": "MockOldDT.mint",
      "jump": "i",
      "offset": [
        4149,
        4170
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1567": {
      "fn": "MockOldDT.mint",
      "offset": [
        4149,
        4170
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1568": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "POP",
      "path": "68"
    },
    "1569": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "POP",
      "path": "68"
    },
    "1570": {
      "fn": "MockOldDT.mint",
      "jump": "o",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1571": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1572": {
      "offset": [
        2159,
        2166
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xA"
    },
    "1574": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2159,
        2166
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1577": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1579": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1581": {
      "op": "SHL"
    },
    "1582": {
      "op": "SUB"
    },
    "1583": {
      "offset": [
        2159,
        2166
      ],
      "op": "AND",
      "path": "68"
    },
    "1584": {
      "offset": [
        2145,
        2155
      ],
      "op": "CALLER",
      "path": "68"
    },
    "1585": {
      "offset": [
        2145,
        2166
      ],
      "op": "EQ",
      "path": "68"
    },
    "1586": {
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x64D"
    },
    "1589": {
      "offset": [
        2124,
        2226
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1590": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1592": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1593": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1599": {
      "op": "SHL"
    },
    "1600": {
      "offset": [
        2124,
        2226
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1601": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "1602": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "1604": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "ADD",
      "path": "68"
    },
    "1605": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "1608": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1609": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x157D"
    },
    "1612": {
      "fn": "MockOldDT.proposeMinter",
      "jump": "i",
      "offset": [
        2124,
        2226
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1613": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        2124,
        2226
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1614": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6033
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 22,
      "value": "0xB"
    },
    "1616": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "DUP1",
      "path": "68"
    },
    "1617": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "1618": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1620": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1622": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1624": {
      "op": "SHL"
    },
    "1625": {
      "op": "SUB"
    },
    "1626": {
      "op": "NOT"
    },
    "1627": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "AND",
      "path": "68"
    },
    "1628": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1630": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1632": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1634": {
      "op": "SHL"
    },
    "1635": {
      "op": "SUB"
    },
    "1636": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "DUP4",
      "path": "68"
    },
    "1637": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "AND",
      "path": "68"
    },
    "1638": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1639": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1640": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "OR",
      "path": "68"
    },
    "1641": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1642": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "1643": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6018,
        6045
      ],
      "op": "SSTORE",
      "path": "68"
    },
    "1644": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 23,
      "value": "0x40"
    },
    "1646": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "DUP1",
      "path": "68"
    },
    "1647": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1648": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6088,
        6098
      ],
      "op": "CALLER",
      "path": "68"
    },
    "1649": {
      "op": "DUP2"
    },
    "1650": {
      "op": "MSTORE"
    },
    "1651": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1653": {
      "op": "DUP2"
    },
    "1654": {
      "op": "ADD"
    },
    "1655": {
      "op": "SWAP3"
    },
    "1656": {
      "op": "SWAP1"
    },
    "1657": {
      "op": "SWAP3"
    },
    "1658": {
      "op": "MSTORE"
    },
    "1659": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "PUSH32",
      "path": "68",
      "value": "0xA24C529CC8B2D85B7DFB2ED0B4D7E9A816546212138B5D223BEE13481E21BE6B"
    },
    "1692": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "1693": {
      "op": "ADD"
    },
    "1694": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1696": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1697": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "DUP1",
      "path": "68"
    },
    "1698": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "1699": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "SUB",
      "path": "68"
    },
    "1700": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1701": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        6060,
        6137
      ],
      "op": "LOG1",
      "path": "68"
    },
    "1702": {
      "fn": "MockOldDT.proposeMinter",
      "offset": [
        5923,
        6144
      ],
      "op": "POP",
      "path": "68"
    },
    "1703": {
      "fn": "MockOldDT.proposeMinter",
      "jump": "o",
      "offset": [
        5923,
        6144
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1704": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1705": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5316,
        5327
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1706": {
      "branch": 75,
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5316,
        5327
      ],
      "op": "ISZERO",
      "path": "68"
    },
    "1707": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5311,
        5470
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x716"
    },
    "1710": {
      "branch": 75,
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5311,
        5470
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1711": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5369,
        5395
      ],
      "op": "PUSH2",
      "path": "68",
      "statement": 24,
      "value": "0x6B8"
    },
    "1714": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5378,
        5386
      ],
      "op": "DUP4",
      "path": "68"
    },
    "1715": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5388,
        5394
      ],
      "op": "DUP4",
      "path": "68"
    },
    "1716": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5369,
        5377
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x94F"
    },
    "1719": {
      "fn": "MockOldDT.finishOrder",
      "jump": "i",
      "offset": [
        5369,
        5395
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1720": {
      "branch": 76,
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5369,
        5395
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1721": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x716"
    },
    "1724": {
      "branch": 76,
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1725": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1727": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1728": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1732": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1734": {
      "op": "SHL"
    },
    "1735": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1736": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "1737": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1739": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "1741": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1742": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "ADD",
      "path": "68"
    },
    "1743": {
      "op": "MSTORE"
    },
    "1744": {
      "op": "PUSH1",
      "value": "0x29"
    },
    "1746": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1748": {
      "op": "DUP3"
    },
    "1749": {
      "op": "ADD"
    },
    "1750": {
      "op": "MSTORE"
    },
    "1751": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A206661696C656420746F2066696E"
    },
    "1784": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1786": {
      "op": "DUP3"
    },
    "1787": {
      "op": "ADD"
    },
    "1788": {
      "op": "MSTORE"
    },
    "1789": {
      "op": "PUSH9",
      "value": "0x34B9B41037B93232B9"
    },
    "1799": {
      "op": "PUSH1",
      "value": "0xB9"
    },
    "1801": {
      "op": "SHL"
    },
    "1802": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1804": {
      "op": "DUP3"
    },
    "1805": {
      "op": "ADD"
    },
    "1806": {
      "op": "MSTORE"
    },
    "1807": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1809": {
      "op": "ADD"
    },
    "1810": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "1813": {
      "op": "JUMP"
    },
    "1814": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5344,
        5470
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1815": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 25,
      "value": "0x40"
    },
    "1817": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "DUP1",
      "path": "68"
    },
    "1818": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1819": {
      "op": "DUP6"
    },
    "1820": {
      "op": "DUP2"
    },
    "1821": {
      "op": "MSTORE"
    },
    "1822": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1824": {
      "op": "DUP2"
    },
    "1825": {
      "op": "ADD"
    },
    "1826": {
      "op": "DUP5"
    },
    "1827": {
      "op": "SWAP1"
    },
    "1828": {
      "op": "MSTORE"
    },
    "1829": {
      "op": "SWAP1"
    },
    "1830": {
      "op": "DUP2"
    },
    "1831": {
      "op": "ADD"
    },
    "1832": {
      "op": "DUP3"
    },
    "1833": {
      "op": "SWAP1"
    },
    "1834": {
      "op": "MSTORE"
    },
    "1835": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5680,
        5695
      ],
      "op": "TIMESTAMP",
      "path": "68"
    },
    "1836": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1838": {
      "op": "DUP3"
    },
    "1839": {
      "op": "ADD"
    },
    "1840": {
      "op": "MSTORE"
    },
    "1841": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5613,
        5623
      ],
      "op": "CALLER",
      "path": "68"
    },
    "1842": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5613,
        5623
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1847": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1849": {
      "op": "SHL"
    },
    "1850": {
      "op": "SUB"
    },
    "1851": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "DUP6",
      "path": "68"
    },
    "1852": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "AND",
      "path": "68"
    },
    "1853": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1854": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "PUSH32",
      "path": "68",
      "value": "0x46872661D5D7765097D3A97CA99B7CBFA68B54B6D51904168974901EE607A26D"
    },
    "1887": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1888": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1890": {
      "op": "ADD"
    },
    "1891": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1892": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1894": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1895": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "DUP1",
      "path": "68"
    },
    "1896": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "1897": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "SUB",
      "path": "68"
    },
    "1898": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1899": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5494,
        5705
      ],
      "op": "LOG3",
      "path": "68"
    },
    "1900": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "POP",
      "path": "68"
    },
    "1901": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "POP",
      "path": "68"
    },
    "1902": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "POP",
      "path": "68"
    },
    "1903": {
      "fn": "MockOldDT.finishOrder",
      "offset": [
        5147,
        5712
      ],
      "op": "POP",
      "path": "68"
    },
    "1904": {
      "fn": "MockOldDT.finishOrder",
      "jump": "o",
      "offset": [
        5147,
        5712
      ],
      "op": "JUMP",
      "path": "68"
    },
    "1905": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "1906": {
      "offset": [
        1974,
        1985
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x9"
    },
    "1908": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1974,
        1985
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "1909": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2718,
        2722
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "1911": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2718,
        2722
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1912": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1914": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1916": {
      "op": "SHL"
    },
    "1917": {
      "offset": [
        1974,
        1985
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "1918": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1974,
        1985
      ],
      "op": "DIV",
      "path": "68"
    },
    "1919": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1974,
        1985
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xFF"
    },
    "1921": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1974,
        1985
      ],
      "op": "AND",
      "path": "68"
    },
    "1922": {
      "offset": [
        1973,
        1985
      ],
      "op": "ISZERO",
      "path": "68"
    },
    "1923": {
      "offset": [
        1952,
        2064
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x7EC"
    },
    "1926": {
      "offset": [
        1952,
        2064
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "1927": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1952,
        2064
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "1929": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1952,
        2064
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "1930": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1934": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1936": {
      "op": "SHL"
    },
    "1937": {
      "offset": [
        1952,
        2064
      ],
      "op": "DUP2",
      "path": "68"
    },
    "1938": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1952,
        2064
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1941": {
      "offset": [
        1952,
        2064
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "1943": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1952,
        2064
      ],
      "op": "DUP3",
      "path": "68"
    },
    "1944": {
      "fn": "MockOldDT.initialize",
      "offset": [
        1952,
        2064
      ],
      "op": "ADD",
      "path": "68"
    },
    "1945": {
      "op": "MSTORE"
    },
    "1946": {
      "op": "PUSH1",
      "value": "0x35"
    },
    "1948": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1950": {
      "op": "DUP3"
    },
    "1951": {
      "op": "ADD"
    },
    "1952": {
      "op": "MSTORE"
    },
    "1953": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20746F6B656E20696E7374616E63"
    },
    "1986": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1988": {
      "op": "DUP3"
    },
    "1989": {
      "op": "ADD"
    },
    "1990": {
      "op": "MSTORE"
    },
    "1991": {
      "op": "PUSH21",
      "value": "0x1948185B1C9958591E481A5B9A5D1A585B1A5E9959"
    },
    "2013": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "2015": {
      "op": "SHL"
    },
    "2016": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2018": {
      "op": "DUP3"
    },
    "2019": {
      "op": "ADD"
    },
    "2020": {
      "op": "MSTORE"
    },
    "2021": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2023": {
      "op": "ADD"
    },
    "2024": {
      "offset": [
        1952,
        2064
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "2027": {
      "op": "JUMP"
    },
    "2028": {
      "offset": [
        1952,
        2064
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2029": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH2",
      "path": "68",
      "statement": 26,
      "value": "0x899"
    },
    "2032": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2770,
        2774
      ],
      "op": "DUP11",
      "path": "68"
    },
    "2033": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2770,
        2774
      ],
      "op": "DUP11",
      "path": "68"
    },
    "2034": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2035": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2036": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x1F"
    },
    "2038": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2039": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "2041": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2042": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2043": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DIV",
      "path": "68"
    },
    "2044": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MUL",
      "path": "68"
    },
    "2045": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "2047": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2048": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2050": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2051": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2052": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2053": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2054": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2056": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2057": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2058": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP4",
      "path": "68"
    },
    "2059": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2060": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2061": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2062": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2063": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2064": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2065": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "2067": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2068": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2069": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2070": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2071": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2072": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2073": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "CALLDATACOPY",
      "path": "68"
    },
    "2074": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "2076": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2077": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2078": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2079": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2080": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2081": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2082": {
      "op": "POP"
    },
    "2083": {
      "op": "POP"
    },
    "2084": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2086": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2087": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2088": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "2090": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x1F"
    },
    "2092": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP15",
      "path": "68"
    },
    "2093": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2094": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2095": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2096": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DIV",
      "path": "68"
    },
    "2097": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2098": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MUL",
      "path": "68"
    },
    "2099": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2100": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2101": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2102": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2103": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2104": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2105": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2106": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP13",
      "path": "68"
    },
    "2107": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2108": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2109": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2110": {
      "op": "POP"
    },
    "2111": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP13",
      "path": "68"
    },
    "2112": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2113": {
      "op": "POP"
    },
    "2114": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP12",
      "path": "68"
    },
    "2115": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2116": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2117": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2118": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2119": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2120": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2121": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2122": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2123": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2788,
        2794
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2124": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2125": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "CALLDATACOPY",
      "path": "68"
    },
    "2126": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "2128": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2129": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2130": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2131": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2132": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2133": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2134": {
      "op": "POP"
    },
    "2135": {
      "op": "POP"
    },
    "2136": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2138": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2139": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2140": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "2142": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x1F"
    },
    "2144": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP12",
      "path": "68"
    },
    "2145": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2146": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2147": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2148": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DIV",
      "path": "68"
    },
    "2149": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2150": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MUL",
      "path": "68"
    },
    "2151": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2152": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2153": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2154": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2155": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2156": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2157": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2158": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP10",
      "path": "68"
    },
    "2159": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2160": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2161": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2808,
        2821
      ],
      "op": "DUP13",
      "path": "68"
    },
    "2162": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2808,
        2821
      ],
      "op": "SWAP4",
      "path": "68"
    },
    "2163": {
      "op": "POP"
    },
    "2164": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2835,
        2839
      ],
      "op": "DUP12",
      "path": "68"
    },
    "2165": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2835,
        2839
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2166": {
      "op": "POP"
    },
    "2167": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2168": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP11",
      "path": "68"
    },
    "2169": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2170": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP11",
      "path": "68"
    },
    "2171": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2172": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2173": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2174": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2175": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2176": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2177": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2178": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2179": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2853,
        2858
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2180": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2181": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "CALLDATACOPY",
      "path": "68"
    },
    "2182": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "2184": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2185": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "ADD",
      "path": "68"
    },
    "2186": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2187": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2188": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2189": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2190": {
      "op": "POP"
    },
    "2191": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2872,
        2884
      ],
      "op": "DUP11",
      "path": "68"
    },
    "2192": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2872,
        2884
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2193": {
      "op": "POP"
    },
    "2194": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2756
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xF2F"
    },
    "2197": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2756
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2198": {
      "op": "POP"
    },
    "2199": {
      "op": "POP"
    },
    "2200": {
      "fn": "MockOldDT.initialize",
      "jump": "i",
      "offset": [
        2745,
        2894
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2201": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2745,
        2894
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2202": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2738,
        2894
      ],
      "op": "SWAP11",
      "path": "68"
    },
    "2203": {
      "fn": "MockOldDT.initialize",
      "offset": [
        2455,
        2901
      ],
      "op": "SWAP10",
      "path": "68"
    },
    "2204": {
      "op": "POP"
    },
    "2205": {
      "op": "POP"
    },
    "2206": {
      "op": "POP"
    },
    "2207": {
      "op": "POP"
    },
    "2208": {
      "op": "POP"
    },
    "2209": {
      "op": "POP"
    },
    "2210": {
      "op": "POP"
    },
    "2211": {
      "op": "POP"
    },
    "2212": {
      "op": "POP"
    },
    "2213": {
      "op": "POP"
    },
    "2214": {
      "fn": "MockOldDT.initialize",
      "jump": "o",
      "offset": [
        2455,
        2901
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2215": {
      "fn": "ERC20.symbol",
      "offset": [
        2285,
        2387
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2216": {
      "fn": "ERC20.symbol",
      "offset": [
        2341,
        2354
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "2218": {
      "fn": "ERC20.symbol",
      "offset": [
        2373,
        2380
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 27,
      "value": "0x4"
    },
    "2220": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2221": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "2222": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3AC"
    },
    "2225": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2226": {
      "fn": "ERC20.symbol",
      "offset": [
        2366,
        2380
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14F2"
    },
    "2229": {
      "fn": "ERC20.symbol",
      "jump": "i",
      "offset": [
        2366,
        2380
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2230": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2231": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "2232": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6469,
        6473
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2234": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2235": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2236": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2237": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6523
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "2239": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2241": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2242": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2243": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2244": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2246": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2247": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "DUP4",
      "path": "3"
    },
    "2248": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6537
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "2249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2255": {
      "op": "SHL"
    },
    "2256": {
      "op": "SUB"
    },
    "2257": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP7",
      "path": "3"
    },
    "2258": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "AND",
      "path": "3"
    },
    "2259": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2260": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2261": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2262": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2263": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2264": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2265": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "2266": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6512,
        6546
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "2267": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 28
    },
    "2268": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2269": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "LT",
      "path": "3"
    },
    "2270": {
      "branch": 84,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6564,
        6599
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "2271": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x938"
    },
    "2274": {
      "branch": 84,
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "2275": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2277": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2278": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2282": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2284": {
      "op": "SHL"
    },
    "2285": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2286": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2287": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2289": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "2291": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2292": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "ADD",
      "path": "3"
    },
    "2293": {
      "op": "MSTORE"
    },
    "2294": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "2296": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2298": {
      "op": "DUP3"
    },
    "2299": {
      "op": "ADD"
    },
    "2300": {
      "op": "MSTORE"
    },
    "2301": {
      "op": "PUSH32",
      "value": "0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
    },
    "2334": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2336": {
      "op": "DUP3"
    },
    "2337": {
      "op": "ADD"
    },
    "2338": {
      "op": "MSTORE"
    },
    "2339": {
      "op": "PUSH5",
      "value": "0x207A65726F"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "2347": {
      "op": "SHL"
    },
    "2348": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2350": {
      "op": "DUP3"
    },
    "2351": {
      "op": "ADD"
    },
    "2352": {
      "op": "MSTORE"
    },
    "2353": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2355": {
      "op": "ADD"
    },
    "2356": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "2359": {
      "op": "JUMP"
    },
    "2360": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6556,
        6641
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2361": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6742
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 29,
      "value": "0x945"
    },
    "2364": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "2365": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6698,
        6705
      ],
      "op": "DUP6",
      "path": "3"
    },
    "2366": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6726,
        6741
      ],
      "op": "DUP6",
      "path": "3"
    },
    "2367": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6707,
        6723
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2368": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6707,
        6741
      ],
      "op": "SUB",
      "path": "3"
    },
    "2369": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6683
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB47"
    },
    "2372": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "i",
      "offset": [
        6675,
        6742
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2373": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6675,
        6742
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2374": {
      "op": "POP"
    },
    "2375": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6774
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 30,
      "value": "0x1"
    },
    "2377": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6770,
        6774
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "2378": {
      "fn": "ERC20.decreaseAllowance",
      "offset": [
        6376,
        6781
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "2379": {
      "op": "POP"
    },
    "2380": {
      "op": "POP"
    },
    "2381": {
      "op": "POP"
    },
    "2382": {
      "fn": "ERC20.decreaseAllowance",
      "jump": "o",
      "offset": [
        6376,
        6781
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2383": {
      "fn": "ERC20.transfer",
      "offset": [
        3654,
        3826
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2384": {
      "fn": "ERC20.transfer",
      "offset": [
        3740,
        3744
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2386": {
      "fn": "ERC20.transfer",
      "offset": [
        3756,
        3798
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 31,
      "value": "0x43C"
    },
    "2389": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "2390": {
      "fn": "ERC20.transfer",
      "offset": [
        3780,
        3789
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2391": {
      "fn": "ERC20.transfer",
      "offset": [
        3791,
        3797
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2392": {
      "fn": "ERC20.transfer",
      "offset": [
        3756,
        3765
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC6B"
    },
    "2395": {
      "fn": "ERC20.transfer",
      "jump": "i",
      "offset": [
        3756,
        3798
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2396": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2397": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4351,
        4368
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "2399": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4351,
        4368
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2400": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4405,
        4491
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x977"
    },
    "2403": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4431,
        4437
      ],
      "op": "DUP6",
      "path": "68"
    },
    "2404": {
      "offset": [
        1137,
        1148
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x239"
    },
    "2407": {
      "offset": [
        1144,
        1148
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x3E8"
    },
    "2410": {
      "offset": [
        1069,
        1075
      ],
      "op": "PUSH8",
      "path": "68",
      "value": "0xDE0B6B3A7640000"
    },
    "2419": {
      "offset": [
        1137,
        1148
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1543"
    },
    "2422": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        1137,
        1148
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2423": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4405,
        4491
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2424": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4510,
        4532
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 32,
      "value": "0x9"
    },
    "2426": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4510,
        4532
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2427": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4382,
        4491
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2428": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4382,
        4491
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2429": {
      "op": "POP"
    },
    "2430": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4501,
        4547
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x990"
    },
    "2433": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4501,
        4547
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2434": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2436": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2438": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2440": {
      "op": "SHL"
    },
    "2441": {
      "op": "SUB"
    },
    "2442": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4510,
        4532
      ],
      "op": "AND",
      "path": "68"
    },
    "2443": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4382,
        4491
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2444": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4501,
        4509
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x94F"
    },
    "2447": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        4501,
        4547
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2448": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4501,
        4547
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2449": {
      "op": "POP"
    },
    "2450": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2452": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2454": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2456": {
      "op": "SHL"
    },
    "2457": {
      "op": "SUB"
    },
    "2458": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4560,
        4590
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2459": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4560,
        4590
      ],
      "op": "AND",
      "path": "68"
    },
    "2460": {
      "branch": 77,
      "fn": "MockOldDT.startOrder",
      "offset": [
        4560,
        4590
      ],
      "op": "ISZERO",
      "path": "68"
    },
    "2461": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4557,
        4774
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x9C6"
    },
    "2464": {
      "branch": 77,
      "fn": "MockOldDT.startOrder",
      "offset": [
        4557,
        4774
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "2465": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4617,
        4712
      ],
      "op": "PUSH2",
      "path": "68",
      "statement": 33,
      "value": "0x9B8"
    },
    "2468": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4647,
        4653
      ],
      "op": "DUP6",
      "path": "68"
    },
    "2469": {
      "offset": [
        1207,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x239"
    },
    "2472": {
      "offset": [
        1214,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x3E8"
    },
    "2475": {
      "offset": [
        1069,
        1075
      ],
      "op": "PUSH8",
      "path": "68",
      "value": "0xDE0B6B3A7640000"
    },
    "2484": {
      "offset": [
        1207,
        1218
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1543"
    },
    "2487": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        1207,
        1218
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2488": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4617,
        4712
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2489": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4605,
        4712
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2490": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4605,
        4712
      ],
      "op": "POP",
      "path": "68"
    },
    "2491": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4726,
        4763
      ],
      "op": "PUSH2",
      "path": "68",
      "statement": 34,
      "value": "0x9C4"
    },
    "2494": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4735,
        4751
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2495": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4753,
        4762
      ],
      "op": "DUP4",
      "path": "68"
    },
    "2496": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4726,
        4734
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x94F"
    },
    "2499": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        4726,
        4763
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2500": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4726,
        4763
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2501": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4726,
        4763
      ],
      "op": "POP",
      "path": "68"
    },
    "2502": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4557,
        4774
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2503": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4783,
        4799
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "2505": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4802,
        4829
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x9D2"
    },
    "2508": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4802,
        4814
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2509": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4819,
        4828
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2510": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4802,
        4818
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xE44"
    },
    "2513": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        4802,
        4829
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2514": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4802,
        4829
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2515": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4848,
        4855
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 35,
      "value": "0xA"
    },
    "2517": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4848,
        4855
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2518": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4783,
        4829
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2519": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4783,
        4829
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2520": {
      "op": "POP"
    },
    "2521": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4839,
        4878
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x9EF"
    },
    "2524": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4839,
        4878
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2525": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2527": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2529": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2531": {
      "op": "SHL"
    },
    "2532": {
      "op": "SUB"
    },
    "2533": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4848,
        4855
      ],
      "op": "AND",
      "path": "68"
    },
    "2534": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4857,
        4877
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x30B"
    },
    "2537": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4857,
        4863
      ],
      "op": "DUP9",
      "path": "68"
    },
    "2538": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4783,
        4829
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2539": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4857,
        4867
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1175"
    },
    "2542": {
      "fn": "MockOldDT.startOrder",
      "jump": "i",
      "offset": [
        4857,
        4877
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2543": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4839,
        4878
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2544": {
      "op": "POP"
    },
    "2545": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 36,
      "value": "0x40"
    },
    "2547": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2548": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2549": {
      "op": "DUP8"
    },
    "2550": {
      "op": "DUP2"
    },
    "2551": {
      "op": "MSTORE"
    },
    "2552": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2554": {
      "op": "DUP2"
    },
    "2555": {
      "op": "ADD"
    },
    "2556": {
      "op": "DUP8"
    },
    "2557": {
      "op": "SWAP1"
    },
    "2558": {
      "op": "MSTORE"
    },
    "2559": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        5051,
        5066
      ],
      "op": "TIMESTAMP",
      "path": "68"
    },
    "2560": {
      "op": "DUP2"
    },
    "2561": {
      "op": "DUP4"
    },
    "2562": {
      "op": "ADD"
    },
    "2563": {
      "op": "MSTORE"
    },
    "2564": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2566": {
      "op": "DUP2"
    },
    "2567": {
      "op": "ADD"
    },
    "2568": {
      "op": "DUP6"
    },
    "2569": {
      "op": "SWAP1"
    },
    "2570": {
      "op": "MSTORE"
    },
    "2571": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2572": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2577": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2579": {
      "op": "SHL"
    },
    "2580": {
      "op": "SUB"
    },
    "2581": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "DUP7",
      "path": "68"
    },
    "2582": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2583": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "AND",
      "path": "68"
    },
    "2584": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2585": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4941,
        4951
      ],
      "op": "CALLER",
      "path": "68"
    },
    "2586": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4941,
        4951
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2587": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2588": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "DUP12",
      "path": "68"
    },
    "2589": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "AND",
      "path": "68"
    },
    "2590": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2591": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "PUSH32",
      "path": "68",
      "value": "0xE1C4FA794EDFA8F619B8257A077398950357B9C6398528F94480307352F9AFCC"
    },
    "2624": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2625": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2626": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2627": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SUB",
      "path": "68"
    },
    "2628": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2630": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "ADD",
      "path": "68"
    },
    "2631": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2632": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4893,
        5129
      ],
      "op": "LOG4",
      "path": "68"
    },
    "2633": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4341,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2634": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4341,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2635": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4341,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2636": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2637": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2638": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2639": {
      "fn": "MockOldDT.startOrder",
      "offset": [
        4183,
        5136
      ],
      "op": "POP",
      "path": "68"
    },
    "2640": {
      "fn": "MockOldDT.startOrder",
      "jump": "o",
      "offset": [
        4183,
        5136
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2641": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6293,
        6644
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2642": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6384,
        6399
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 37,
      "value": "0xB"
    },
    "2644": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6384,
        6399
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2649": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2651": {
      "op": "SHL"
    },
    "2652": {
      "op": "SUB"
    },
    "2653": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6384,
        6399
      ],
      "op": "AND",
      "path": "68"
    },
    "2654": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6370,
        6380
      ],
      "op": "CALLER",
      "path": "68"
    },
    "2655": {
      "branch": 78,
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6370,
        6399
      ],
      "op": "EQ",
      "path": "68"
    },
    "2656": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xAC6"
    },
    "2659": {
      "branch": 78,
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "2660": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2662": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2663": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2667": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2669": {
      "op": "SHL"
    },
    "2670": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2671": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2674": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "2676": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "DUP3",
      "path": "68"
    },
    "2677": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "ADD",
      "path": "68"
    },
    "2678": {
      "op": "MSTORE"
    },
    "2679": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "2681": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2683": {
      "op": "DUP3"
    },
    "2684": {
      "op": "ADD"
    },
    "2685": {
      "op": "MSTORE"
    },
    "2686": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20696E76616C69642070726F706F"
    },
    "2719": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2721": {
      "op": "DUP3"
    },
    "2722": {
      "op": "ADD"
    },
    "2723": {
      "op": "MSTORE"
    },
    "2724": {
      "op": "PUSH18",
      "value": "0x736564206D696E7465722061646472657373"
    },
    "2743": {
      "op": "PUSH1",
      "value": "0x70"
    },
    "2745": {
      "op": "SHL"
    },
    "2746": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2748": {
      "op": "DUP3"
    },
    "2749": {
      "op": "ADD"
    },
    "2750": {
      "op": "MSTORE"
    },
    "2751": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2753": {
      "op": "ADD"
    },
    "2754": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "2757": {
      "op": "JUMP"
    },
    "2758": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6349,
        6475
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2759": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6518,
        6525
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 38,
      "value": "0xA"
    },
    "2761": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6518,
        6525
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2762": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6539,
        6554
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xB"
    },
    "2764": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6539,
        6554
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2765": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2767": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2768": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2769": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2771": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2773": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2775": {
      "op": "SHL"
    },
    "2776": {
      "op": "SUB"
    },
    "2777": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6518,
        6525
      ],
      "op": "SWAP4",
      "path": "68"
    },
    "2778": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6518,
        6525
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2779": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6518,
        6525
      ],
      "op": "AND",
      "path": "68"
    },
    "2780": {
      "op": "DUP2"
    },
    "2781": {
      "op": "MSTORE"
    },
    "2782": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6539,
        6554
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "2783": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6539,
        6554
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2784": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6539,
        6554
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2785": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6539,
        6554
      ],
      "op": "AND",
      "path": "68"
    },
    "2786": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2788": {
      "op": "DUP4"
    },
    "2789": {
      "op": "ADD"
    },
    "2790": {
      "op": "MSTORE"
    },
    "2791": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "PUSH32",
      "path": "68",
      "value": "0x96AB0400119A548D3CC4C74E857D0D9C427FE9DF20D3D0D99AF10CC292E6C886"
    },
    "2824": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2825": {
      "op": "ADD"
    },
    "2826": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "2828": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "2829": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2830": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2831": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "SUB",
      "path": "68"
    },
    "2832": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2833": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6490,
        6564
      ],
      "op": "LOG1",
      "path": "68"
    },
    "2834": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6584,
        6599
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 39,
      "value": "0xB"
    },
    "2836": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6584,
        6599
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2837": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6584,
        6599
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2838": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6581
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xA"
    },
    "2840": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2841": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2842": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2846": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2848": {
      "op": "SHL"
    },
    "2849": {
      "op": "SUB"
    },
    "2850": {
      "op": "NOT"
    },
    "2851": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2852": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "DUP2",
      "path": "68"
    },
    "2853": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "AND",
      "path": "68"
    },
    "2854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2856": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2858": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2860": {
      "op": "SHL"
    },
    "2861": {
      "op": "SUB"
    },
    "2862": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6584,
        6599
      ],
      "op": "DUP5",
      "path": "68"
    },
    "2863": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6584,
        6599
      ],
      "op": "AND",
      "path": "68"
    },
    "2864": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "OR",
      "path": "68"
    },
    "2865": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2866": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "2867": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6574,
        6599
      ],
      "op": "SSTORE",
      "path": "68"
    },
    "2868": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6609,
        6637
      ],
      "op": "AND",
      "path": "68",
      "statement": 40
    },
    "2869": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6609,
        6637
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2870": {
      "fn": "MockOldDT.approveMinter",
      "offset": [
        6609,
        6637
      ],
      "op": "SSTORE",
      "path": "68"
    },
    "2871": {
      "fn": "MockOldDT.approveMinter",
      "jump": "o",
      "offset": [
        6293,
        6644
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2872": {
      "fn": "MockOldDT.blob",
      "offset": [
        6773,
        6855
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "2873": {
      "fn": "MockOldDT.blob",
      "offset": [
        6811,
        6824
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x60"
    },
    "2875": {
      "fn": "MockOldDT.blob",
      "offset": [
        6843,
        6848
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 41,
      "value": "0x7"
    },
    "2877": {
      "fn": "MockOldDT.blob",
      "offset": [
        6836,
        6848
      ],
      "op": "DUP1",
      "path": "68"
    },
    "2878": {
      "fn": "MockOldDT.blob",
      "offset": [
        6836,
        6848
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "2879": {
      "fn": "MockOldDT.blob",
      "offset": [
        6836,
        6848
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x3AC"
    },
    "2882": {
      "fn": "MockOldDT.blob",
      "offset": [
        6836,
        6848
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "2883": {
      "fn": "MockOldDT.blob",
      "offset": [
        6836,
        6848
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x14F2"
    },
    "2886": {
      "fn": "MockOldDT.blob",
      "jump": "i",
      "offset": [
        6836,
        6848
      ],
      "op": "JUMP",
      "path": "68"
    },
    "2887": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2892": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2894": {
      "op": "SHL"
    },
    "2895": {
      "op": "SUB"
    },
    "2896": {
      "fn": "ERC20._approve",
      "offset": [
        10083,
        10102
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 42
    },
    "2897": {
      "branch": 85,
      "fn": "ERC20._approve",
      "offset": [
        10083,
        10102
      ],
      "op": "AND",
      "path": "3"
    },
    "2898": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xBA9"
    },
    "2901": {
      "branch": 85,
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "2902": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2904": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2905": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2909": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2911": {
      "op": "SHL"
    },
    "2912": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2913": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2914": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2916": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "2918": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2919": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "ADD",
      "path": "3"
    },
    "2920": {
      "op": "MSTORE"
    },
    "2921": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2923": {
      "op": "DUP1"
    },
    "2924": {
      "op": "DUP3"
    },
    "2925": {
      "op": "ADD"
    },
    "2926": {
      "op": "MSTORE"
    },
    "2927": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
    },
    "2960": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2962": {
      "op": "DUP3"
    },
    "2963": {
      "op": "ADD"
    },
    "2964": {
      "op": "MSTORE"
    },
    "2965": {
      "op": "PUSH4",
      "value": "0x72657373"
    },
    "2970": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2972": {
      "op": "SHL"
    },
    "2973": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2975": {
      "op": "DUP3"
    },
    "2976": {
      "op": "ADD"
    },
    "2977": {
      "op": "MSTORE"
    },
    "2978": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2980": {
      "op": "ADD"
    },
    "2981": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "2984": {
      "op": "JUMP"
    },
    "2985": {
      "fn": "ERC20._approve",
      "offset": [
        10075,
        10143
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2986": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2988": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2990": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2992": {
      "op": "SHL"
    },
    "2993": {
      "op": "SUB"
    },
    "2994": {
      "fn": "ERC20._approve",
      "offset": [
        10161,
        10182
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 43
    },
    "2995": {
      "branch": 86,
      "fn": "ERC20._approve",
      "offset": [
        10161,
        10182
      ],
      "op": "AND",
      "path": "3"
    },
    "2996": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC0A"
    },
    "2999": {
      "branch": 86,
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "3000": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3002": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3003": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3007": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3009": {
      "op": "SHL"
    },
    "3010": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3011": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3012": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3014": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "3016": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3017": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "ADD",
      "path": "3"
    },
    "3018": {
      "op": "MSTORE"
    },
    "3019": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3021": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3023": {
      "op": "DUP3"
    },
    "3024": {
      "op": "ADD"
    },
    "3025": {
      "op": "MSTORE"
    },
    "3026": {
      "op": "PUSH32",
      "value": "0x45524332303A20617070726F766520746F20746865207A65726F206164647265"
    },
    "3059": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3061": {
      "op": "DUP3"
    },
    "3062": {
      "op": "ADD"
    },
    "3063": {
      "op": "MSTORE"
    },
    "3064": {
      "op": "PUSH2",
      "value": "0x7373"
    },
    "3067": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "3069": {
      "op": "SHL"
    },
    "3070": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3072": {
      "op": "DUP3"
    },
    "3073": {
      "op": "ADD"
    },
    "3074": {
      "op": "MSTORE"
    },
    "3075": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3077": {
      "op": "ADD"
    },
    "3078": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "3081": {
      "op": "JUMP"
    },
    "3082": {
      "fn": "ERC20._approve",
      "offset": [
        10153,
        10221
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3083": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3085": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3087": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3089": {
      "op": "SHL"
    },
    "3090": {
      "op": "SUB"
    },
    "3091": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 44
    },
    "3092": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3093": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "AND",
      "path": "3"
    },
    "3094": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3096": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3097": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3098": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3099": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10243
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "3101": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3103": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3104": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3105": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3106": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3108": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3109": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "DUP4",
      "path": "3"
    },
    "3110": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10250
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "3111": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "3112": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP8",
      "path": "3"
    },
    "3113": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "AND",
      "path": "3"
    },
    "3114": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3115": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3116": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3117": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "3118": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3119": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3120": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3121": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3122": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3123": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10259
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "3124": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "DUP6",
      "path": "3"
    },
    "3125": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3126": {
      "fn": "ERC20._approve",
      "offset": [
        10232,
        10268
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "3127": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "3",
      "statement": 45
    },
    "3128": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3129": {
      "op": "DUP5"
    },
    "3130": {
      "op": "DUP2"
    },
    "3131": {
      "op": "MSTORE"
    },
    "3132": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
    },
    "3165": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3166": {
      "op": "ADD"
    },
    "3167": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3169": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3170": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3171": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3172": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SUB",
      "path": "3"
    },
    "3173": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3174": {
      "fn": "ERC20._approve",
      "offset": [
        10283,
        10315
      ],
      "op": "LOG3",
      "path": "3"
    },
    "3175": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "POP",
      "path": "3"
    },
    "3176": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "POP",
      "path": "3"
    },
    "3177": {
      "fn": "ERC20._approve",
      "offset": [
        9952,
        10322
      ],
      "op": "POP",
      "path": "3"
    },
    "3178": {
      "fn": "ERC20._approve",
      "jump": "o",
      "offset": [
        9952,
        10322
      ],
      "op": "JUMP",
      "path": "3"
    },
    "3179": {
      "fn": "ERC20._transfer",
      "offset": [
        7255,
        7968
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3180": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3182": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3184": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3186": {
      "op": "SHL"
    },
    "3187": {
      "op": "SUB"
    },
    "3188": {
      "fn": "ERC20._transfer",
      "offset": [
        7390,
        7410
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 46
    },
    "3189": {
      "branch": 87,
      "fn": "ERC20._transfer",
      "offset": [
        7390,
        7410
      ],
      "op": "AND",
      "path": "3"
    },
    "3190": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xCCF"
    },
    "3193": {
      "branch": 87,
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "3194": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3196": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3197": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3201": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3203": {
      "op": "SHL"
    },
    "3204": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3205": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3206": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3208": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "3210": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3211": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "ADD",
      "path": "3"
    },
    "3212": {
      "op": "MSTORE"
    },
    "3213": {
      "op": "PUSH1",
      "value": "0x25"
    },
    "3215": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3217": {
      "op": "DUP3"
    },
    "3218": {
      "op": "ADD"
    },
    "3219": {
      "op": "MSTORE"
    },
    "3220": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E736665722066726F6D20746865207A65726F206164"
    },
    "3253": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3255": {
      "op": "DUP3"
    },
    "3256": {
      "op": "ADD"
    },
    "3257": {
      "op": "MSTORE"
    },
    "3258": {
      "op": "PUSH5",
      "value": "0x6472657373"
    },
    "3264": {
      "op": "PUSH1",
      "value": "0xD8"
    },
    "3266": {
      "op": "SHL"
    },
    "3267": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3269": {
      "op": "DUP3"
    },
    "3270": {
      "op": "ADD"
    },
    "3271": {
      "op": "MSTORE"
    },
    "3272": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3274": {
      "op": "ADD"
    },
    "3275": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "3278": {
      "op": "JUMP"
    },
    "3279": {
      "fn": "ERC20._transfer",
      "offset": [
        7382,
        7452
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3286": {
      "op": "SHL"
    },
    "3287": {
      "op": "SUB"
    },
    "3288": {
      "fn": "ERC20._transfer",
      "offset": [
        7470,
        7493
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 47
    },
    "3289": {
      "branch": 88,
      "fn": "ERC20._transfer",
      "offset": [
        7470,
        7493
      ],
      "op": "AND",
      "path": "3"
    },
    "3290": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xD31"
    },
    "3293": {
      "branch": 88,
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "3294": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3296": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3297": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3301": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3303": {
      "op": "SHL"
    },
    "3304": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3305": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3306": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3308": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "3310": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3311": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "ADD",
      "path": "3"
    },
    "3312": {
      "op": "MSTORE"
    },
    "3313": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "3315": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3317": {
      "op": "DUP3"
    },
    "3318": {
      "op": "ADD"
    },
    "3319": {
      "op": "MSTORE"
    },
    "3320": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220746F20746865207A65726F2061646472"
    },
    "3353": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3355": {
      "op": "DUP3"
    },
    "3356": {
      "op": "ADD"
    },
    "3357": {
      "op": "MSTORE"
    },
    "3358": {
      "op": "PUSH3",
      "value": "0x657373"
    },
    "3362": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "3364": {
      "op": "SHL"
    },
    "3365": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3367": {
      "op": "DUP3"
    },
    "3368": {
      "op": "ADD"
    },
    "3369": {
      "op": "MSTORE"
    },
    "3370": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3372": {
      "op": "ADD"
    },
    "3373": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "3376": {
      "op": "JUMP"
    },
    "3377": {
      "fn": "ERC20._transfer",
      "offset": [
        7462,
        7533
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3380": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3382": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3384": {
      "op": "SHL"
    },
    "3385": {
      "op": "SUB"
    },
    "3386": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP4",
      "path": "3"
    },
    "3387": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "AND",
      "path": "3"
    },
    "3388": {
      "fn": "ERC20._transfer",
      "offset": [
        7602,
        7623
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3390": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3391": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3392": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3393": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3395": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3396": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3397": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3398": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3400": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3401": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "3402": {
      "fn": "ERC20._transfer",
      "offset": [
        7626,
        7643
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "3403": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 48
    },
    "3404": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3405": {
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "LT",
      "path": "3"
    },
    "3406": {
      "branch": 89,
      "fn": "ERC20._transfer",
      "offset": [
        7661,
        7684
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "3407": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDA9"
    },
    "3410": {
      "branch": 89,
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "3411": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3413": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3414": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3418": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3420": {
      "op": "SHL"
    },
    "3421": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3422": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3423": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3425": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "3427": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3428": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "ADD",
      "path": "3"
    },
    "3429": {
      "op": "MSTORE"
    },
    "3430": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "3432": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3434": {
      "op": "DUP3"
    },
    "3435": {
      "op": "ADD"
    },
    "3436": {
      "op": "MSTORE"
    },
    "3437": {
      "op": "PUSH32",
      "value": "0x45524332303A207472616E7366657220616D6F756E7420657863656564732062"
    },
    "3470": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3472": {
      "op": "DUP3"
    },
    "3473": {
      "op": "ADD"
    },
    "3474": {
      "op": "MSTORE"
    },
    "3475": {
      "op": "PUSH6",
      "value": "0x616C616E6365"
    },
    "3482": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "3484": {
      "op": "SHL"
    },
    "3485": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3487": {
      "op": "DUP3"
    },
    "3488": {
      "op": "ADD"
    },
    "3489": {
      "op": "MSTORE"
    },
    "3490": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3492": {
      "op": "ADD"
    },
    "3493": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "3496": {
      "op": "JUMP"
    },
    "3497": {
      "fn": "ERC20._transfer",
      "offset": [
        7653,
        7727
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3500": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3502": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3504": {
      "op": "SHL"
    },
    "3505": {
      "op": "SUB"
    },
    "3506": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 49
    },
    "3507": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP6",
      "path": "3"
    },
    "3508": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "AND",
      "path": "3"
    },
    "3509": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3511": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3512": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3513": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3514": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3516": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3517": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3518": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3519": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3521": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3522": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3523": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7778
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "3524": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP6",
      "path": "3"
    },
    "3525": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "DUP6",
      "path": "3"
    },
    "3526": {
      "fn": "ERC20._transfer",
      "offset": [
        7781,
        7803
      ],
      "op": "SUB",
      "path": "3"
    },
    "3527": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7803
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3528": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7803
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "3529": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SWAP2",
      "path": "3",
      "statement": 50
    },
    "3530": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP6",
      "path": "3"
    },
    "3531": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "AND",
      "path": "3"
    },
    "3532": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3533": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3534": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3535": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3536": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7843
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "3537": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3538": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "3539": {
      "fn": "ERC20._transfer",
      "offset": [
        7797,
        7803
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3540": {
      "fn": "ERC20._transfer",
      "offset": [
        7797,
        7803
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "3541": {
      "fn": "ERC20._transfer",
      "offset": [
        7761,
        7770
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3542": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDE0"
    },
    "3545": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3546": {
      "fn": "ERC20._transfer",
      "offset": [
        7797,
        7803
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3547": {
      "fn": "ERC20._transfer",
      "offset": [
        7797,
        7803
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3548": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1565"
    },
    "3551": {
      "fn": "ERC20._transfer",
      "jump": "i",
      "offset": [
        7823,
        7853
      ],
      "op": "JUMP",
      "path": "3"
    },
    "3552": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3553": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "3554": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "POP",
      "path": "3"
    },
    "3555": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "POP",
      "path": "3"
    },
    "3556": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3557": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3558": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "3559": {
      "fn": "ERC20._transfer",
      "offset": [
        7823,
        7853
      ],
      "op": "POP",
      "path": "3"
    },
    "3560": {
      "fn": "ERC20._transfer",
      "offset": [
        7886,
        7895
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 51
    },
    "3561": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3563": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3565": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3567": {
      "op": "SHL"
    },
    "3568": {
      "op": "SUB"
    },
    "3569": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "AND",
      "path": "3"
    },
    "3570": {
      "fn": "ERC20._transfer",
      "offset": [
        7878,
        7884
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3575": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3577": {
      "op": "SHL"
    },
    "3578": {
      "op": "SUB"
    },
    "3579": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "AND",
      "path": "3"
    },
    "3580": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "3613": {
      "fn": "ERC20._transfer",
      "offset": [
        7897,
        7903
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3614": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3616": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3617": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x763"
    },
    "3620": {
      "fn": "ERC20._transfer",
      "offset": [
        7869,
        7904
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3621": {
      "op": "DUP2"
    },
    "3622": {
      "op": "MSTORE"
    },
    "3623": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3625": {
      "op": "ADD"
    },
    "3626": {
      "op": "SWAP1"
    },
    "3627": {
      "op": "JUMP"
    },
    "3628": {
      "fn": "SafeMath.mul",
      "offset": [
        3382,
        3478
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "3629": {
      "fn": "SafeMath.mul",
      "offset": [
        3440,
        3447
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "3631": {
      "fn": "SafeMath.mul",
      "offset": [
        3466,
        3471
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 52,
      "value": "0x544"
    },
    "3634": {
      "fn": "SafeMath.mul",
      "offset": [
        3470,
        3471
      ],
      "op": "DUP3",
      "path": "11"
    },
    "3635": {
      "fn": "SafeMath.mul",
      "offset": [
        3466,
        3467
      ],
      "op": "DUP5",
      "path": "11"
    },
    "3636": {
      "fn": "SafeMath.mul",
      "offset": [
        3466,
        3471
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x15BE"
    },
    "3639": {
      "fn": "SafeMath.mul",
      "jump": "i",
      "offset": [
        3466,
        3471
      ],
      "op": "JUMP",
      "path": "11"
    },
    "3640": {
      "fn": "SafeMath.div",
      "offset": [
        3767,
        3863
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "3641": {
      "fn": "SafeMath.div",
      "offset": [
        3825,
        3832
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "3643": {
      "fn": "SafeMath.div",
      "offset": [
        3851,
        3856
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 53,
      "value": "0x544"
    },
    "3646": {
      "fn": "SafeMath.div",
      "offset": [
        3855,
        3856
      ],
      "op": "DUP3",
      "path": "11"
    },
    "3647": {
      "fn": "SafeMath.div",
      "offset": [
        3851,
        3852
      ],
      "op": "DUP5",
      "path": "11"
    },
    "3648": {
      "fn": "SafeMath.div",
      "offset": [
        3851,
        3856
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1543"
    },
    "3651": {
      "fn": "SafeMath.div",
      "jump": "i",
      "offset": [
        3851,
        3856
      ],
      "op": "JUMP",
      "path": "11"
    },
    "3652": {
      "fn": "SafeMath.add",
      "offset": [
        2672,
        2768
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "3653": {
      "fn": "SafeMath.add",
      "offset": [
        2730,
        2737
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "3655": {
      "fn": "SafeMath.add",
      "offset": [
        2756,
        2761
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 54,
      "value": "0x544"
    },
    "3658": {
      "fn": "SafeMath.add",
      "offset": [
        2760,
        2761
      ],
      "op": "DUP3",
      "path": "11"
    },
    "3659": {
      "fn": "SafeMath.add",
      "offset": [
        2756,
        2757
      ],
      "op": "DUP5",
      "path": "11"
    },
    "3660": {
      "fn": "SafeMath.add",
      "offset": [
        2756,
        2761
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x1565"
    },
    "3663": {
      "fn": "SafeMath.add",
      "jump": "i",
      "offset": [
        2756,
        2761
      ],
      "op": "JUMP",
      "path": "11"
    },
    "3664": {
      "fn": "ERC20._mint",
      "offset": [
        8244,
        8633
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3665": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3667": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3669": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3671": {
      "op": "SHL"
    },
    "3672": {
      "op": "SUB"
    },
    "3673": {
      "fn": "ERC20._mint",
      "offset": [
        8327,
        8348
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 55
    },
    "3674": {
      "branch": 90,
      "fn": "ERC20._mint",
      "offset": [
        8327,
        8348
      ],
      "op": "AND",
      "path": "3"
    },
    "3675": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xEA6"
    },
    "3678": {
      "branch": 90,
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "3679": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3681": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3682": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3686": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3688": {
      "op": "SHL"
    },
    "3689": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3690": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3691": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3693": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "3695": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3696": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "ADD",
      "path": "3"
    },
    "3697": {
      "op": "MSTORE"
    },
    "3698": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3700": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3702": {
      "op": "DUP3"
    },
    "3703": {
      "op": "ADD"
    },
    "3704": {
      "op": "MSTORE"
    },
    "3705": {
      "op": "PUSH32",
      "value": "0x45524332303A206D696E7420746F20746865207A65726F206164647265737300"
    },
    "3738": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3740": {
      "op": "DUP3"
    },
    "3741": {
      "op": "ADD"
    },
    "3742": {
      "op": "MSTORE"
    },
    "3743": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3745": {
      "op": "ADD"
    },
    "3746": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D4"
    },
    "3749": {
      "op": "JUMP"
    },
    "3750": {
      "fn": "ERC20._mint",
      "offset": [
        8319,
        8384
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3751": {
      "fn": "ERC20._mint",
      "offset": [
        8471,
        8477
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 56
    },
    "3752": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8467
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "3754": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8467
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3756": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3757": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3758": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "3759": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xEB8"
    },
    "3762": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3763": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3764": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1565"
    },
    "3767": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8455,
        8477
      ],
      "op": "JUMP",
      "path": "3"
    },
    "3768": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3769": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3770": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3771": {
      "fn": "ERC20._mint",
      "offset": [
        8455,
        8477
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "3772": {
      "op": "POP"
    },
    "3773": {
      "op": "POP"
    },
    "3774": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3776": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3778": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3780": {
      "op": "SHL"
    },
    "3781": {
      "op": "SUB"
    },
    "3782": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP3",
      "path": "3",
      "statement": 57
    },
    "3783": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "AND",
      "path": "3"
    },
    "3784": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3786": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3787": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3788": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3789": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "3791": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3792": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3793": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "3794": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3796": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "DUP2",
      "path": "3"
    },
    "3797": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8505
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "3798": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3799": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "3800": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "DUP4",
      "path": "3"
    },
    "3801": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "3802": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8496
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3803": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xEE5"
    },
    "3806": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3807": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3808": {
      "fn": "ERC20._mint",
      "offset": [
        8509,
        8515
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3809": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1565"
    },
    "3812": {
      "fn": "ERC20._mint",
      "jump": "i",
      "offset": [
        8487,
        8515
      ],
      "op": "JUMP",
      "path": "3"
    },
    "3813": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3814": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3815": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3816": {
      "fn": "ERC20._mint",
      "offset": [
        8487,
        8515
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "3817": {
      "op": "POP"
    },
    "3818": {
      "op": "POP"
    },
    "3819": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 58,
      "value": "0x40"
    },
    "3821": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3822": {
      "op": "DUP2"
    },
    "3823": {
      "op": "DUP2"
    },
    "3824": {
      "op": "MSTORE"
    },
    "3825": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3827": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3829": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3831": {
      "op": "SHL"
    },
    "3832": {
      "op": "SUB"
    },
    "3833": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "DUP4",
      "path": "3"
    },
    "3834": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "AND",
      "path": "3"
    },
    "3835": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3836": {
      "fn": "ERC20._mint",
      "offset": [
        8547,
        8548
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3838": {
      "fn": "ERC20._mint",
      "offset": [
        8547,
        8548
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3839": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
    },
    "3872": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3873": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3875": {
      "op": "ADD"
    },
    "3876": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "3878": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "3879": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "DUP1",
      "path": "3"
    },
    "3880": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "3881": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SUB",
      "path": "3"
    },
    "3882": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "3883": {
      "fn": "ERC20._mint",
      "offset": [
        8530,
        8567
      ],
      "op": "LOG3",
      "path": "3"
    },
    "3884": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "POP",
      "path": "68"
    },
    "3885": {
      "fn": "MockOldDT.mint",
      "offset": [
        3906,
        4177
      ],
      "op": "POP",
      "path": "68"
    },
    "3886": {
      "fn": "MockOldDT.mint",
      "jump": "o",
      "offset": [
        3906,
        4177
      ],
      "op": "JUMP",
      "path": "68"
    },
    "3887": {
      "fn": "MockOldDT._initialize",
      "offset": [
        2911,
        3896
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "3888": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3140,
        3144
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x0"
    },
    "3890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3892": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3894": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3896": {
      "op": "SHL"
    },
    "3897": {
      "op": "SUB"
    },
    "3898": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3181,
        3208
      ],
      "op": "DUP6",
      "path": "68",
      "statement": 59
    },
    "3899": {
      "branch": 79,
      "fn": "MockOldDT._initialize",
      "offset": [
        3181,
        3208
      ],
      "op": "AND",
      "path": "68"
    },
    "3900": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0xFA0"
    },
    "3903": {
      "branch": 79,
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "3904": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "3906": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "3907": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3911": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3913": {
      "op": "SHL"
    },
    "3914": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "DUP2",
      "path": "68"
    },
    "3915": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "3916": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3918": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "3920": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "DUP3",
      "path": "68"
    },
    "3921": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "ADD",
      "path": "68"
    },
    "3922": {
      "op": "MSTORE"
    },
    "3923": {
      "op": "PUSH1",
      "value": "0x30"
    },
    "3925": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3927": {
      "op": "DUP3"
    },
    "3928": {
      "op": "ADD"
    },
    "3929": {
      "op": "MSTORE"
    },
    "3930": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20496E76616C6964206D696E7465"
    },
    "3963": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3965": {
      "op": "DUP3"
    },
    "3966": {
      "op": "ADD"
    },
    "3967": {
      "op": "MSTORE"
    },
    "3968": {
      "op": "PUSH16",
      "value": "0x722C20207A65726F2061646472657373"
    },
    "3985": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3987": {
      "op": "SHL"
    },
    "3988": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3990": {
      "op": "DUP3"
    },
    "3991": {
      "op": "ADD"
    },
    "3992": {
      "op": "MSTORE"
    },
    "3993": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3995": {
      "op": "ADD"
    },
    "3996": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "3999": {
      "op": "JUMP"
    },
    "4000": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3160,
        3283
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4001": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3315,
        3322
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 60,
      "value": "0xA"
    },
    "4003": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3315,
        3322
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "4004": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4006": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4008": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4010": {
      "op": "SHL"
    },
    "4011": {
      "op": "SUB"
    },
    "4012": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3315,
        3322
      ],
      "op": "AND",
      "path": "68"
    },
    "4013": {
      "branch": 80,
      "fn": "MockOldDT._initialize",
      "offset": [
        3315,
        3336
      ],
      "op": "ISZERO",
      "path": "68"
    },
    "4014": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1011"
    },
    "4017": {
      "branch": 80,
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "4018": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "4020": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "4021": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4025": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4027": {
      "op": "SHL"
    },
    "4028": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "DUP2",
      "path": "68"
    },
    "4029": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "4030": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4032": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "4034": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "DUP3",
      "path": "68"
    },
    "4035": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "ADD",
      "path": "68"
    },
    "4036": {
      "op": "MSTORE"
    },
    "4037": {
      "op": "PUSH1",
      "value": "0x2F"
    },
    "4039": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4041": {
      "op": "DUP3"
    },
    "4042": {
      "op": "ADD"
    },
    "4043": {
      "op": "MSTORE"
    },
    "4044": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20496E76616C6964206D696E7465"
    },
    "4077": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4079": {
      "op": "DUP3"
    },
    "4080": {
      "op": "ADD"
    },
    "4081": {
      "op": "MSTORE"
    },
    "4082": {
      "op": "PUSH15",
      "value": "0x722C207A65726F2061646472657373"
    },
    "4098": {
      "op": "PUSH1",
      "value": "0x88"
    },
    "4100": {
      "op": "SHL"
    },
    "4101": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4103": {
      "op": "DUP3"
    },
    "4104": {
      "op": "ADD"
    },
    "4105": {
      "op": "MSTORE"
    },
    "4106": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4108": {
      "op": "ADD"
    },
    "4109": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "4112": {
      "op": "JUMP"
    },
    "4113": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3294,
        3410
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4118": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4120": {
      "op": "SHL"
    },
    "4121": {
      "op": "SUB"
    },
    "4122": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3442,
        3468
      ],
      "op": "DUP3",
      "path": "68",
      "statement": 61
    },
    "4123": {
      "branch": 81,
      "fn": "MockOldDT._initialize",
      "offset": [
        3442,
        3468
      ],
      "op": "AND",
      "path": "68"
    },
    "4124": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x108F"
    },
    "4127": {
      "branch": 81,
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "4128": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "4130": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "DUP1",
      "path": "68"
    },
    "4131": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "4132": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4136": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4138": {
      "op": "SHL"
    },
    "4139": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "DUP2",
      "path": "68"
    },
    "4140": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "4141": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4143": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "4145": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "DUP3",
      "path": "68"
    },
    "4146": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "ADD",
      "path": "68"
    },
    "4147": {
      "op": "MSTORE"
    },
    "4148": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4150": {
      "op": "DUP2"
    },
    "4151": {
      "op": "ADD"
    },
    "4152": {
      "op": "SWAP2"
    },
    "4153": {
      "op": "SWAP1"
    },
    "4154": {
      "op": "SWAP2"
    },
    "4155": {
      "op": "MSTORE"
    },
    "4156": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20496E76616C696420636F6D6D75"
    },
    "4189": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4191": {
      "op": "DUP3"
    },
    "4192": {
      "op": "ADD"
    },
    "4193": {
      "op": "MSTORE"
    },
    "4194": {
      "op": "PUSH32",
      "value": "0x6E6974792066656520636F6C6C6563746F722C207A65726F2061646472657373"
    },
    "4227": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4229": {
      "op": "DUP3"
    },
    "4230": {
      "op": "ADD"
    },
    "4231": {
      "op": "MSTORE"
    },
    "4232": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4234": {
      "op": "ADD"
    },
    "4235": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "4238": {
      "op": "JUMP"
    },
    "4239": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3421,
        3558
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4240": {
      "branch": 82,
      "fn": "MockOldDT._initialize",
      "offset": [
        3590,
        3599
      ],
      "op": "DUP4",
      "path": "68",
      "statement": 62
    },
    "4241": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x10E8"
    },
    "4244": {
      "branch": 82,
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "JUMPI",
      "path": "68"
    },
    "4245": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x40"
    },
    "4247": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "4248": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4252": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4254": {
      "op": "SHL"
    },
    "4255": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "DUP2",
      "path": "68"
    },
    "4256": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "MSTORE",
      "path": "68"
    },
    "4257": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4259": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x4"
    },
    "4261": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "DUP3",
      "path": "68"
    },
    "4262": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "ADD",
      "path": "68"
    },
    "4263": {
      "op": "MSTORE"
    },
    "4264": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4266": {
      "op": "DUP1"
    },
    "4267": {
      "op": "DUP3"
    },
    "4268": {
      "op": "ADD"
    },
    "4269": {
      "op": "MSTORE"
    },
    "4270": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20496E76616C6964206361702076"
    },
    "4303": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4305": {
      "op": "DUP3"
    },
    "4306": {
      "op": "ADD"
    },
    "4307": {
      "op": "MSTORE"
    },
    "4308": {
      "op": "PUSH4",
      "value": "0x616C7565"
    },
    "4313": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4315": {
      "op": "SHL"
    },
    "4316": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4318": {
      "op": "DUP3"
    },
    "4319": {
      "op": "ADD"
    },
    "4320": {
      "op": "MSTORE"
    },
    "4321": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "4323": {
      "op": "ADD"
    },
    "4324": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x4D4"
    },
    "4327": {
      "op": "JUMP"
    },
    "4328": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3569,
        3661
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4329": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3671,
        3675
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 63,
      "value": "0x8"
    },
    "4331": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3671,
        3682
      ],
      "op": "DUP5",
      "path": "68"
    },
    "4332": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3671,
        3682
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4333": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3671,
        3682
      ],
      "op": "SSTORE",
      "path": "68"
    },
    "4334": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "DUP7",
      "path": "68",
      "statement": 64
    },
    "4335": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "4336": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1100"
    },
    "4339": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4340": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3697
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x5"
    },
    "4342": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3697
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4343": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "4345": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "DUP11",
      "path": "68"
    },
    "4346": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "ADD",
      "path": "68"
    },
    "4347": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4348": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1181"
    },
    "4351": {
      "fn": "MockOldDT._initialize",
      "jump": "i",
      "offset": [
        3692,
        3704
      ],
      "op": "JUMP",
      "path": "68"
    },
    "4352": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3692,
        3704
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4353": {
      "op": "POP"
    },
    "4354": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "DUP3",
      "path": "68",
      "statement": 65
    },
    "4355": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "4356": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1114"
    },
    "4359": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4360": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3719
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x7"
    },
    "4362": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3719
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4363": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "4365": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "DUP7",
      "path": "68"
    },
    "4366": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "ADD",
      "path": "68"
    },
    "4367": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4368": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1181"
    },
    "4371": {
      "fn": "MockOldDT._initialize",
      "jump": "i",
      "offset": [
        3714,
        3727
      ],
      "op": "JUMP",
      "path": "68"
    },
    "4372": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3714,
        3727
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4373": {
      "op": "POP"
    },
    "4374": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "DUP6",
      "path": "68",
      "statement": 66
    },
    "4375": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "MLOAD",
      "path": "68"
    },
    "4376": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1128"
    },
    "4379": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4380": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3744
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x6"
    },
    "4382": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3744
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4383": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0x20"
    },
    "4385": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "DUP10",
      "path": "68"
    },
    "4386": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "ADD",
      "path": "68"
    },
    "4387": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4388": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "PUSH2",
      "path": "68",
      "value": "0x1181"
    },
    "4391": {
      "fn": "MockOldDT._initialize",
      "jump": "i",
      "offset": [
        3737,
        3753
      ],
      "op": "JUMP",
      "path": "68"
    },
    "4392": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3737,
        3753
      ],
      "op": "JUMPDEST",
      "path": "68"
    },
    "4393": {
      "op": "POP"
    },
    "4394": {
      "op": "POP"
    },
    "4395": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3770
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 67,
      "value": "0xA"
    },
    "4397": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "DUP1",
      "path": "68"
    },
    "4398": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "4399": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4401": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4403": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4405": {
      "op": "SHL"
    },
    "4406": {
      "op": "SUB"
    },
    "4407": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP6",
      "path": "68"
    },
    "4408": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "DUP7",
      "path": "68"
    },
    "4409": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "AND",
      "path": "68"
    },
    "4410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4412": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4414": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4416": {
      "op": "SHL"
    },
    "4417": {
      "op": "SUB"
    },
    "4418": {
      "op": "NOT"
    },
    "4419": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4420": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "4421": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "AND",
      "path": "68"
    },
    "4422": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "OR",
      "path": "68"
    },
    "4423": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4424": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3763,
        3786
      ],
      "op": "SSTORE",
      "path": "68"
    },
    "4425": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3818
      ],
      "op": "PUSH1",
      "path": "68",
      "statement": 68,
      "value": "0x9"
    },
    "4427": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3833
      ],
      "op": "DUP1",
      "path": "68"
    },
    "4428": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3833
      ],
      "op": "SLOAD",
      "path": "68"
    },
    "4429": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4431": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4433": {
      "op": "PUSH1",
      "value": "0xA8"
    },
    "4435": {
      "op": "SHL"
    },
    "4436": {
      "op": "SUB"
    },
    "4437": {
      "op": "NOT"
    },
    "4438": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "AND",
      "path": "68",
      "statement": 69
    },
    "4439": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3833
      ],
      "op": "SWAP2",
      "path": "68"
    },
    "4440": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3833
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4441": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3833
      ],
      "op": "SWAP5",
      "path": "68"
    },
    "4442": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3796,
        3833
      ],
      "op": "AND",
      "path": "68"
    },
    "4443": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "OR",
      "path": "68"
    },
    "4444": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4446": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4448": {
      "op": "SHL"
    },
    "4449": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4450": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "DUP2",
      "path": "68"
    },
    "4451": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "OR",
      "path": "68"
    },
    "4452": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "SWAP4",
      "path": "68"
    },
    "4453": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "DUP5",
      "path": "68"
    },
    "4454": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "SWAP1",
      "path": "68"
    },
    "4455": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "SSTORE",
      "path": "68"
    },
    "4456": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3878,
        3889
      ],
      "op": "SWAP1",
      "path": "68",
      "statement": 70
    },
    "4457": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3878,
        3889
      ],
      "op": "SWAP3",
      "path": "68"
    },
    "4458": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3878,
        3889
      ],
      "op": "DIV",
      "path": "68"
    },
    "4459": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3843,
        3861
      ],
      "op": "PUSH1",
      "path": "68",
      "value": "0xFF"
    },
    "4461": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3878,
        3889
      ],
      "op": "AND",
      "path": "68"
    },
    "4462": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3878,
        3889
      ],
      "op": "SWAP5",
      "path": "68"
    },
    "4463": {
      "fn": "MockOldDT._initialize",
      "offset": [
        3878,
        3889
      ],
      "op": "SWAP4",
      "path": "68"
    },
    "4464": {
      "op": "POP"
    },
    "4465": {
      "op": "POP"
    },
    "4466": {
      "op": "POP"
    },
    "4467": {
      "op": "POP"
    },
    "4468": {
      "fn": "MockOldDT._initialize",
      "jump": "o",
      "offset": [
        2911,
        3896
      ],
      "op": "JUMP",
      "path": "68"
    },
    "4469": {
      "fn": "SafeMath.sub",
      "offset": [
        3039,
        3135
      ],
      "op": "JUMPDEST",
      "path": "11"
    },
    "4470": {
      "fn": "SafeMath.sub",
      "offset": [
        3097,
        3104
      ],
      "op": "PUSH1",
      "path": "11",
      "value": "0x0"
    },
    "4472": {
      "fn": "SafeMath.sub",
      "offset": [
        3123,
        3128
      ],
      "op": "PUSH2",
      "path": "11",
      "statement": 71,
      "value": "0x544"
    },
    "4475": {
      "fn": "SafeMath.sub",
      "offset": [
        3127,
        3128
      ],
      "op": "DUP3",
      "path": "11"
    },
    "4476": {
      "fn": "SafeMath.sub",
      "offset": [
        3123,
        3124
      ],
      "op": "DUP5",
      "path": "11"
    },
    "4477": {
      "fn": "SafeMath.sub",
      "offset": [
        3123,
        3128
      ],
      "op": "PUSH2",
      "path": "11",
      "value": "0x15DD"
    },
    "4480": {
      "fn": "SafeMath.sub",
      "jump": "i",
      "offset": [
        3123,
        3128
      ],
      "op": "JUMP",
      "path": "11"
    },
    "4481": {
      "op": "JUMPDEST"
    },
    "4482": {
      "op": "DUP3"
    },
    "4483": {
      "op": "DUP1"
    },
    "4484": {
      "op": "SLOAD"
    },
    "4485": {
      "op": "PUSH2",
      "value": "0x118D"
    },
    "4488": {
      "op": "SWAP1"
    },
    "4489": {
      "op": "PUSH2",
      "value": "0x14F2"
    },
    "4492": {
      "jump": "i",
      "op": "JUMP"
    },
    "4493": {
      "op": "JUMPDEST"
    },
    "4494": {
      "op": "SWAP1"
    },
    "4495": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4497": {
      "op": "MSTORE"
    },
    "4498": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4500": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4502": {
      "op": "KECCAK256"
    },
    "4503": {
      "op": "SWAP1"
    },
    "4504": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4506": {
      "op": "ADD"
    },
    "4507": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4509": {
      "op": "SWAP1"
    },
    "4510": {
      "op": "DIV"
    },
    "4511": {
      "op": "DUP2"
    },
    "4512": {
      "op": "ADD"
    },
    "4513": {
      "op": "SWAP3"
    },
    "4514": {
      "op": "DUP3"
    },
    "4515": {
      "op": "PUSH2",
      "value": "0x11AF"
    },
    "4518": {
      "op": "JUMPI"
    },
    "4519": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4521": {
      "op": "DUP6"
    },
    "4522": {
      "op": "SSTORE"
    },
    "4523": {
      "op": "PUSH2",
      "value": "0x11F5"
    },
    "4526": {
      "op": "JUMP"
    },
    "4527": {
      "op": "JUMPDEST"
    },
    "4528": {
      "op": "DUP3"
    },
    "4529": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4531": {
      "op": "LT"
    },
    "4532": {
      "op": "PUSH2",
      "value": "0x11C8"
    },
    "4535": {
      "op": "JUMPI"
    },
    "4536": {
      "op": "DUP1"
    },
    "4537": {
      "op": "MLOAD"
    },
    "4538": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "4540": {
      "op": "NOT"
    },
    "4541": {
      "op": "AND"
    },
    "4542": {
      "op": "DUP4"
    },
    "4543": {
      "op": "DUP1"
    },
    "4544": {
      "op": "ADD"
    },
    "4545": {
      "op": "OR"
    },
    "4546": {
      "op": "DUP6"
    },
    "4547": {
      "op": "SSTORE"
    },
    "4548": {
      "op": "PUSH2",
      "value": "0x11F5"
    },
    "4551": {
      "op": "JUMP"
    },
    "4552": {
      "op": "JUMPDEST"
    },
    "4553": {
      "op": "DUP3"
    },
    "4554": {
      "op": "DUP1"
    },
    "4555": {
      "op": "ADD"
    },
    "4556": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4558": {
      "op": "ADD"
    },
    "4559": {
      "op": "DUP6"
    },
    "4560": {
      "op": "SSTORE"
    },
    "4561": {
      "op": "DUP3"
    },
    "4562": {
      "op": "ISZERO"
    },
    "4563": {
      "op": "PUSH2",
      "value": "0x11F5"
    },
    "4566": {
      "op": "JUMPI"
    },
    "4567": {
      "op": "SWAP2"
    },
    "4568": {
      "op": "DUP3"
    },
    "4569": {
      "op": "ADD"
    },
    "4570": {
      "op": "JUMPDEST"
    },
    "4571": {
      "op": "DUP3"
    },
    "4572": {
      "op": "DUP2"
    },
    "4573": {
      "op": "GT"
    },
    "4574": {
      "op": "ISZERO"
    },
    "4575": {
      "op": "PUSH2",
      "value": "0x11F5"
    },
    "4578": {
      "op": "JUMPI"
    },
    "4579": {
      "op": "DUP3"
    },
    "4580": {
      "op": "MLOAD"
    },
    "4581": {
      "op": "DUP3"
    },
    "4582": {
      "op": "SSTORE"
    },
    "4583": {
      "op": "SWAP2"
    },
    "4584": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4586": {
      "op": "ADD"
    },
    "4587": {
      "op": "SWAP2"
    },
    "4588": {
      "op": "SWAP1"
    },
    "4589": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4591": {
      "op": "ADD"
    },
    "4592": {
      "op": "SWAP1"
    },
    "4593": {
      "op": "PUSH2",
      "value": "0x11DA"
    },
    "4596": {
      "op": "JUMP"
    },
    "4597": {
      "op": "JUMPDEST"
    },
    "4598": {
      "op": "POP"
    },
    "4599": {
      "op": "PUSH2",
      "value": "0x1201"
    },
    "4602": {
      "op": "SWAP3"
    },
    "4603": {
      "op": "SWAP2"
    },
    "4604": {
      "op": "POP"
    },
    "4605": {
      "op": "PUSH2",
      "value": "0x1205"
    },
    "4608": {
      "jump": "i",
      "op": "JUMP"
    },
    "4609": {
      "op": "JUMPDEST"
    },
    "4610": {
      "op": "POP"
    },
    "4611": {
      "op": "SWAP1"
    },
    "4612": {
      "jump": "o",
      "op": "JUMP"
    },
    "4613": {
      "op": "JUMPDEST"
    },
    "4614": {
      "op": "JUMPDEST"
    },
    "4615": {
      "op": "DUP1"
    },
    "4616": {
      "op": "DUP3"
    },
    "4617": {
      "op": "GT"
    },
    "4618": {
      "op": "ISZERO"
    },
    "4619": {
      "op": "PUSH2",
      "value": "0x1201"
    },
    "4622": {
      "op": "JUMPI"
    },
    "4623": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4625": {
      "op": "DUP2"
    },
    "4626": {
      "op": "SSTORE"
    },
    "4627": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4629": {
      "op": "ADD"
    },
    "4630": {
      "op": "PUSH2",
      "value": "0x1206"
    },
    "4633": {
      "op": "JUMP"
    },
    "4634": {
      "op": "JUMPDEST"
    },
    "4635": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4637": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4639": {
      "op": "DUP1"
    },
    "4640": {
      "op": "DUP4"
    },
    "4641": {
      "op": "MSTORE"
    },
    "4642": {
      "op": "DUP4"
    },
    "4643": {
      "op": "MLOAD"
    },
    "4644": {
      "op": "DUP1"
    },
    "4645": {
      "op": "DUP3"
    },
    "4646": {
      "op": "DUP6"
    },
    "4647": {
      "op": "ADD"
    },
    "4648": {
      "op": "MSTORE"
    },
    "4649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4651": {
      "op": "JUMPDEST"
    },
    "4652": {
      "op": "DUP2"
    },
    "4653": {
      "op": "DUP2"
    },
    "4654": {
      "op": "LT"
    },
    "4655": {
      "op": "ISZERO"
    },
    "4656": {
      "op": "PUSH2",
      "value": "0x1247"
    },
    "4659": {
      "op": "JUMPI"
    },
    "4660": {
      "op": "DUP6"
    },
    "4661": {
      "op": "DUP2"
    },
    "4662": {
      "op": "ADD"
    },
    "4663": {
      "op": "DUP4"
    },
    "4664": {
      "op": "ADD"
    },
    "4665": {
      "op": "MLOAD"
    },
    "4666": {
      "op": "DUP6"
    },
    "4667": {
      "op": "DUP3"
    },
    "4668": {
      "op": "ADD"
    },
    "4669": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4671": {
      "op": "ADD"
    },
    "4672": {
      "op": "MSTORE"
    },
    "4673": {
      "op": "DUP3"
    },
    "4674": {
      "op": "ADD"
    },
    "4675": {
      "op": "PUSH2",
      "value": "0x122B"
    },
    "4678": {
      "op": "JUMP"
    },
    "4679": {
      "op": "JUMPDEST"
    },
    "4680": {
      "op": "DUP2"
    },
    "4681": {
      "op": "DUP2"
    },
    "4682": {
      "op": "GT"
    },
    "4683": {
      "op": "ISZERO"
    },
    "4684": {
      "op": "PUSH2",
      "value": "0x1259"
    },
    "4687": {
      "op": "JUMPI"
    },
    "4688": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4690": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4692": {
      "op": "DUP4"
    },
    "4693": {
      "op": "DUP8"
    },
    "4694": {
      "op": "ADD"
    },
    "4695": {
      "op": "ADD"
    },
    "4696": {
      "op": "MSTORE"
    },
    "4697": {
      "op": "JUMPDEST"
    },
    "4698": {
      "op": "POP"
    },
    "4699": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4701": {
      "op": "ADD"
    },
    "4702": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4704": {
      "op": "NOT"
    },
    "4705": {
      "op": "AND"
    },
    "4706": {
      "op": "SWAP3"
    },
    "4707": {
      "op": "SWAP1"
    },
    "4708": {
      "op": "SWAP3"
    },
    "4709": {
      "op": "ADD"
    },
    "4710": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4712": {
      "op": "ADD"
    },
    "4713": {
      "op": "SWAP4"
    },
    "4714": {
      "op": "SWAP3"
    },
    "4715": {
      "op": "POP"
    },
    "4716": {
      "op": "POP"
    },
    "4717": {
      "op": "POP"
    },
    "4718": {
      "jump": "o",
      "op": "JUMP"
    },
    "4719": {
      "op": "JUMPDEST"
    },
    "4720": {
      "op": "DUP1"
    },
    "4721": {
      "op": "CALLDATALOAD"
    },
    "4722": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4724": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4726": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4728": {
      "op": "SHL"
    },
    "4729": {
      "op": "SUB"
    },
    "4730": {
      "op": "DUP2"
    },
    "4731": {
      "op": "AND"
    },
    "4732": {
      "op": "DUP2"
    },
    "4733": {
      "op": "EQ"
    },
    "4734": {
      "op": "PUSH2",
      "value": "0x1286"
    },
    "4737": {
      "op": "JUMPI"
    },
    "4738": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4740": {
      "op": "DUP1"
    },
    "4741": {
      "op": "REVERT"
    },
    "4742": {
      "op": "JUMPDEST"
    },
    "4743": {
      "op": "SWAP2"
    },
    "4744": {
      "op": "SWAP1"
    },
    "4745": {
      "op": "POP"
    },
    "4746": {
      "jump": "o",
      "op": "JUMP"
    },
    "4747": {
      "op": "JUMPDEST"
    },
    "4748": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4750": {
      "op": "DUP1"
    },
    "4751": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4753": {
      "op": "DUP4"
    },
    "4754": {
      "op": "DUP6"
    },
    "4755": {
      "op": "SUB"
    },
    "4756": {
      "op": "SLT"
    },
    "4757": {
      "op": "ISZERO"
    },
    "4758": {
      "op": "PUSH2",
      "value": "0x129E"
    },
    "4761": {
      "op": "JUMPI"
    },
    "4762": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4764": {
      "op": "DUP1"
    },
    "4765": {
      "op": "REVERT"
    },
    "4766": {
      "op": "JUMPDEST"
    },
    "4767": {
      "op": "PUSH2",
      "value": "0x12A7"
    },
    "4770": {
      "op": "DUP4"
    },
    "4771": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4774": {
      "jump": "i",
      "op": "JUMP"
    },
    "4775": {
      "op": "JUMPDEST"
    },
    "4776": {
      "op": "SWAP5"
    },
    "4777": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4779": {
      "op": "SWAP4"
    },
    "4780": {
      "op": "SWAP1"
    },
    "4781": {
      "op": "SWAP4"
    },
    "4782": {
      "op": "ADD"
    },
    "4783": {
      "op": "CALLDATALOAD"
    },
    "4784": {
      "op": "SWAP4"
    },
    "4785": {
      "op": "POP"
    },
    "4786": {
      "op": "POP"
    },
    "4787": {
      "op": "POP"
    },
    "4788": {
      "jump": "o",
      "op": "JUMP"
    },
    "4789": {
      "op": "JUMPDEST"
    },
    "4790": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4792": {
      "op": "DUP1"
    },
    "4793": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4795": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4797": {
      "op": "DUP5"
    },
    "4798": {
      "op": "DUP7"
    },
    "4799": {
      "op": "SUB"
    },
    "4800": {
      "op": "SLT"
    },
    "4801": {
      "op": "ISZERO"
    },
    "4802": {
      "op": "PUSH2",
      "value": "0x12CA"
    },
    "4805": {
      "op": "JUMPI"
    },
    "4806": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4808": {
      "op": "DUP1"
    },
    "4809": {
      "op": "REVERT"
    },
    "4810": {
      "op": "JUMPDEST"
    },
    "4811": {
      "op": "PUSH2",
      "value": "0x12D3"
    },
    "4814": {
      "op": "DUP5"
    },
    "4815": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4818": {
      "jump": "i",
      "op": "JUMP"
    },
    "4819": {
      "op": "JUMPDEST"
    },
    "4820": {
      "op": "SWAP3"
    },
    "4821": {
      "op": "POP"
    },
    "4822": {
      "op": "PUSH2",
      "value": "0x12E1"
    },
    "4825": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4827": {
      "op": "DUP6"
    },
    "4828": {
      "op": "ADD"
    },
    "4829": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4832": {
      "jump": "i",
      "op": "JUMP"
    },
    "4833": {
      "op": "JUMPDEST"
    },
    "4834": {
      "op": "SWAP2"
    },
    "4835": {
      "op": "POP"
    },
    "4836": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4838": {
      "op": "DUP5"
    },
    "4839": {
      "op": "ADD"
    },
    "4840": {
      "op": "CALLDATALOAD"
    },
    "4841": {
      "op": "SWAP1"
    },
    "4842": {
      "op": "POP"
    },
    "4843": {
      "op": "SWAP3"
    },
    "4844": {
      "op": "POP"
    },
    "4845": {
      "op": "SWAP3"
    },
    "4846": {
      "op": "POP"
    },
    "4847": {
      "op": "SWAP3"
    },
    "4848": {
      "jump": "o",
      "op": "JUMP"
    },
    "4849": {
      "op": "JUMPDEST"
    },
    "4850": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4852": {
      "op": "DUP1"
    },
    "4853": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4855": {
      "op": "DUP4"
    },
    "4856": {
      "op": "DUP6"
    },
    "4857": {
      "op": "SUB"
    },
    "4858": {
      "op": "SLT"
    },
    "4859": {
      "op": "ISZERO"
    },
    "4860": {
      "op": "PUSH2",
      "value": "0x1304"
    },
    "4863": {
      "op": "JUMPI"
    },
    "4864": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4866": {
      "op": "DUP1"
    },
    "4867": {
      "op": "REVERT"
    },
    "4868": {
      "op": "JUMPDEST"
    },
    "4869": {
      "op": "POP"
    },
    "4870": {
      "op": "POP"
    },
    "4871": {
      "op": "DUP1"
    },
    "4872": {
      "op": "CALLDATALOAD"
    },
    "4873": {
      "op": "SWAP3"
    },
    "4874": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4876": {
      "op": "SWAP1"
    },
    "4877": {
      "op": "SWAP2"
    },
    "4878": {
      "op": "ADD"
    },
    "4879": {
      "op": "CALLDATALOAD"
    },
    "4880": {
      "op": "SWAP2"
    },
    "4881": {
      "op": "POP"
    },
    "4882": {
      "jump": "o",
      "op": "JUMP"
    },
    "4883": {
      "op": "JUMPDEST"
    },
    "4884": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4886": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4888": {
      "op": "DUP3"
    },
    "4889": {
      "op": "DUP5"
    },
    "4890": {
      "op": "SUB"
    },
    "4891": {
      "op": "SLT"
    },
    "4892": {
      "op": "ISZERO"
    },
    "4893": {
      "op": "PUSH2",
      "value": "0x1325"
    },
    "4896": {
      "op": "JUMPI"
    },
    "4897": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4899": {
      "op": "DUP1"
    },
    "4900": {
      "op": "REVERT"
    },
    "4901": {
      "op": "JUMPDEST"
    },
    "4902": {
      "op": "PUSH2",
      "value": "0x544"
    },
    "4905": {
      "op": "DUP3"
    },
    "4906": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4909": {
      "jump": "i",
      "op": "JUMP"
    },
    "4910": {
      "op": "JUMPDEST"
    },
    "4911": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4913": {
      "op": "DUP1"
    },
    "4914": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4916": {
      "op": "DUP1"
    },
    "4917": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4919": {
      "op": "DUP6"
    },
    "4920": {
      "op": "DUP8"
    },
    "4921": {
      "op": "SUB"
    },
    "4922": {
      "op": "SLT"
    },
    "4923": {
      "op": "ISZERO"
    },
    "4924": {
      "op": "PUSH2",
      "value": "0x1344"
    },
    "4927": {
      "op": "JUMPI"
    },
    "4928": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4930": {
      "op": "DUP1"
    },
    "4931": {
      "op": "REVERT"
    },
    "4932": {
      "op": "JUMPDEST"
    },
    "4933": {
      "op": "DUP5"
    },
    "4934": {
      "op": "CALLDATALOAD"
    },
    "4935": {
      "op": "SWAP4"
    },
    "4936": {
      "op": "POP"
    },
    "4937": {
      "op": "PUSH2",
      "value": "0x1354"
    },
    "4940": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4942": {
      "op": "DUP7"
    },
    "4943": {
      "op": "ADD"
    },
    "4944": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "4947": {
      "jump": "i",
      "op": "JUMP"
    },
    "4948": {
      "op": "JUMPDEST"
    },
    "4949": {
      "op": "SWAP4"
    },
    "4950": {
      "op": "SWAP7"
    },
    "4951": {
      "op": "SWAP4"
    },
    "4952": {
      "op": "SWAP6"
    },
    "4953": {
      "op": "POP"
    },
    "4954": {
      "op": "POP"
    },
    "4955": {
      "op": "POP"
    },
    "4956": {
      "op": "POP"
    },
    "4957": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4959": {
      "op": "DUP3"
    },
    "4960": {
      "op": "ADD"
    },
    "4961": {
      "op": "CALLDATALOAD"
    },
    "4962": {
      "op": "SWAP2"
    },
    "4963": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4965": {
      "op": "ADD"
    },
    "4966": {
      "op": "CALLDATALOAD"
    },
    "4967": {
      "op": "SWAP1"
    },
    "4968": {
      "jump": "o",
      "op": "JUMP"
    },
    "4969": {
      "op": "JUMPDEST"
    },
    "4970": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4972": {
      "op": "DUP1"
    },
    "4973": {
      "op": "DUP4"
    },
    "4974": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4976": {
      "op": "DUP5"
    },
    "4977": {
      "op": "ADD"
    },
    "4978": {
      "op": "SLT"
    },
    "4979": {
      "op": "PUSH2",
      "value": "0x137B"
    },
    "4982": {
      "op": "JUMPI"
    },
    "4983": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4985": {
      "op": "DUP1"
    },
    "4986": {
      "op": "REVERT"
    },
    "4987": {
      "op": "JUMPDEST"
    },
    "4988": {
      "op": "POP"
    },
    "4989": {
      "op": "DUP2"
    },
    "4990": {
      "op": "CALLDATALOAD"
    },
    "4991": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5000": {
      "op": "DUP2"
    },
    "5001": {
      "op": "GT"
    },
    "5002": {
      "op": "ISZERO"
    },
    "5003": {
      "op": "PUSH2",
      "value": "0x1393"
    },
    "5006": {
      "op": "JUMPI"
    },
    "5007": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5009": {
      "op": "DUP1"
    },
    "5010": {
      "op": "REVERT"
    },
    "5011": {
      "op": "JUMPDEST"
    },
    "5012": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5014": {
      "op": "DUP4"
    },
    "5015": {
      "op": "ADD"
    },
    "5016": {
      "op": "SWAP2"
    },
    "5017": {
      "op": "POP"
    },
    "5018": {
      "op": "DUP4"
    },
    "5019": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5021": {
      "op": "DUP3"
    },
    "5022": {
      "op": "DUP6"
    },
    "5023": {
      "op": "ADD"
    },
    "5024": {
      "op": "ADD"
    },
    "5025": {
      "op": "GT"
    },
    "5026": {
      "op": "ISZERO"
    },
    "5027": {
      "op": "PUSH2",
      "value": "0x13AB"
    },
    "5030": {
      "op": "JUMPI"
    },
    "5031": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5033": {
      "op": "DUP1"
    },
    "5034": {
      "op": "REVERT"
    },
    "5035": {
      "op": "JUMPDEST"
    },
    "5036": {
      "op": "SWAP3"
    },
    "5037": {
      "op": "POP"
    },
    "5038": {
      "op": "SWAP3"
    },
    "5039": {
      "op": "SWAP1"
    },
    "5040": {
      "op": "POP"
    },
    "5041": {
      "jump": "o",
      "op": "JUMP"
    },
    "5042": {
      "op": "JUMPDEST"
    },
    "5043": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5045": {
      "op": "DUP1"
    },
    "5046": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5048": {
      "op": "DUP1"
    },
    "5049": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5051": {
      "op": "DUP1"
    },
    "5052": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5054": {
      "op": "DUP1"
    },
    "5055": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5057": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "5059": {
      "op": "DUP11"
    },
    "5060": {
      "op": "DUP13"
    },
    "5061": {
      "op": "SUB"
    },
    "5062": {
      "op": "SLT"
    },
    "5063": {
      "op": "ISZERO"
    },
    "5064": {
      "op": "PUSH2",
      "value": "0x13D0"
    },
    "5067": {
      "op": "JUMPI"
    },
    "5068": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5070": {
      "op": "DUP1"
    },
    "5071": {
      "op": "REVERT"
    },
    "5072": {
      "op": "JUMPDEST"
    },
    "5073": {
      "op": "DUP10"
    },
    "5074": {
      "op": "CALLDATALOAD"
    },
    "5075": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5084": {
      "op": "DUP1"
    },
    "5085": {
      "op": "DUP3"
    },
    "5086": {
      "op": "GT"
    },
    "5087": {
      "op": "ISZERO"
    },
    "5088": {
      "op": "PUSH2",
      "value": "0x13E8"
    },
    "5091": {
      "op": "JUMPI"
    },
    "5092": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5094": {
      "op": "DUP1"
    },
    "5095": {
      "op": "REVERT"
    },
    "5096": {
      "op": "JUMPDEST"
    },
    "5097": {
      "op": "PUSH2",
      "value": "0x13F4"
    },
    "5100": {
      "op": "DUP14"
    },
    "5101": {
      "op": "DUP4"
    },
    "5102": {
      "op": "DUP15"
    },
    "5103": {
      "op": "ADD"
    },
    "5104": {
      "op": "PUSH2",
      "value": "0x1369"
    },
    "5107": {
      "jump": "i",
      "op": "JUMP"
    },
    "5108": {
      "op": "JUMPDEST"
    },
    "5109": {
      "op": "SWAP1"
    },
    "5110": {
      "op": "SWAP12"
    },
    "5111": {
      "op": "POP"
    },
    "5112": {
      "op": "SWAP10"
    },
    "5113": {
      "op": "POP"
    },
    "5114": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5116": {
      "op": "DUP13"
    },
    "5117": {
      "op": "ADD"
    },
    "5118": {
      "op": "CALLDATALOAD"
    },
    "5119": {
      "op": "SWAP2"
    },
    "5120": {
      "op": "POP"
    },
    "5121": {
      "op": "DUP1"
    },
    "5122": {
      "op": "DUP3"
    },
    "5123": {
      "op": "GT"
    },
    "5124": {
      "op": "ISZERO"
    },
    "5125": {
      "op": "PUSH2",
      "value": "0x140D"
    },
    "5128": {
      "op": "JUMPI"
    },
    "5129": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5131": {
      "op": "DUP1"
    },
    "5132": {
      "op": "REVERT"
    },
    "5133": {
      "op": "JUMPDEST"
    },
    "5134": {
      "op": "PUSH2",
      "value": "0x1419"
    },
    "5137": {
      "op": "DUP14"
    },
    "5138": {
      "op": "DUP4"
    },
    "5139": {
      "op": "DUP15"
    },
    "5140": {
      "op": "ADD"
    },
    "5141": {
      "op": "PUSH2",
      "value": "0x1369"
    },
    "5144": {
      "jump": "i",
      "op": "JUMP"
    },
    "5145": {
      "op": "JUMPDEST"
    },
    "5146": {
      "op": "SWAP1"
    },
    "5147": {
      "op": "SWAP10"
    },
    "5148": {
      "op": "POP"
    },
    "5149": {
      "op": "SWAP8"
    },
    "5150": {
      "op": "POP"
    },
    "5151": {
      "op": "DUP8"
    },
    "5152": {
      "op": "SWAP2"
    },
    "5153": {
      "op": "POP"
    },
    "5154": {
      "op": "PUSH2",
      "value": "0x142D"
    },
    "5157": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5159": {
      "op": "DUP14"
    },
    "5160": {
      "op": "ADD"
    },
    "5161": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "5164": {
      "jump": "i",
      "op": "JUMP"
    },
    "5165": {
      "op": "JUMPDEST"
    },
    "5166": {
      "op": "SWAP7"
    },
    "5167": {
      "op": "POP"
    },
    "5168": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5170": {
      "op": "DUP13"
    },
    "5171": {
      "op": "ADD"
    },
    "5172": {
      "op": "CALLDATALOAD"
    },
    "5173": {
      "op": "SWAP6"
    },
    "5174": {
      "op": "POP"
    },
    "5175": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5177": {
      "op": "DUP13"
    },
    "5178": {
      "op": "ADD"
    },
    "5179": {
      "op": "CALLDATALOAD"
    },
    "5180": {
      "op": "SWAP2"
    },
    "5181": {
      "op": "POP"
    },
    "5182": {
      "op": "DUP1"
    },
    "5183": {
      "op": "DUP3"
    },
    "5184": {
      "op": "GT"
    },
    "5185": {
      "op": "ISZERO"
    },
    "5186": {
      "op": "PUSH2",
      "value": "0x144A"
    },
    "5189": {
      "op": "JUMPI"
    },
    "5190": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5192": {
      "op": "DUP1"
    },
    "5193": {
      "op": "REVERT"
    },
    "5194": {
      "op": "JUMPDEST"
    },
    "5195": {
      "op": "POP"
    },
    "5196": {
      "op": "PUSH2",
      "value": "0x1457"
    },
    "5199": {
      "op": "DUP13"
    },
    "5200": {
      "op": "DUP3"
    },
    "5201": {
      "op": "DUP14"
    },
    "5202": {
      "op": "ADD"
    },
    "5203": {
      "op": "PUSH2",
      "value": "0x1369"
    },
    "5206": {
      "jump": "i",
      "op": "JUMP"
    },
    "5207": {
      "op": "JUMPDEST"
    },
    "5208": {
      "op": "SWAP1"
    },
    "5209": {
      "op": "SWAP5"
    },
    "5210": {
      "op": "POP"
    },
    "5211": {
      "op": "SWAP3"
    },
    "5212": {
      "op": "POP"
    },
    "5213": {
      "op": "PUSH2",
      "value": "0x146A"
    },
    "5216": {
      "op": "SWAP1"
    },
    "5217": {
      "op": "POP"
    },
    "5218": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5220": {
      "op": "DUP12"
    },
    "5221": {
      "op": "ADD"
    },
    "5222": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "5225": {
      "jump": "i",
      "op": "JUMP"
    },
    "5226": {
      "op": "JUMPDEST"
    },
    "5227": {
      "op": "SWAP1"
    },
    "5228": {
      "op": "POP"
    },
    "5229": {
      "op": "SWAP3"
    },
    "5230": {
      "op": "SWAP6"
    },
    "5231": {
      "op": "SWAP9"
    },
    "5232": {
      "op": "POP"
    },
    "5233": {
      "op": "SWAP3"
    },
    "5234": {
      "op": "SWAP6"
    },
    "5235": {
      "op": "SWAP9"
    },
    "5236": {
      "op": "POP"
    },
    "5237": {
      "op": "SWAP3"
    },
    "5238": {
      "op": "SWAP6"
    },
    "5239": {
      "op": "SWAP9"
    },
    "5240": {
      "jump": "o",
      "op": "JUMP"
    },
    "5241": {
      "op": "JUMPDEST"
    },
    "5242": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5244": {
      "op": "DUP1"
    },
    "5245": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5247": {
      "op": "DUP1"
    },
    "5248": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5250": {
      "op": "DUP6"
    },
    "5251": {
      "op": "DUP8"
    },
    "5252": {
      "op": "SUB"
    },
    "5253": {
      "op": "SLT"
    },
    "5254": {
      "op": "ISZERO"
    },
    "5255": {
      "op": "PUSH2",
      "value": "0x148F"
    },
    "5258": {
      "op": "JUMPI"
    },
    "5259": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5261": {
      "op": "DUP1"
    },
    "5262": {
      "op": "REVERT"
    },
    "5263": {
      "op": "JUMPDEST"
    },
    "5264": {
      "op": "PUSH2",
      "value": "0x1498"
    },
    "5267": {
      "op": "DUP6"
    },
    "5268": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "5271": {
      "jump": "i",
      "op": "JUMP"
    },
    "5272": {
      "op": "JUMPDEST"
    },
    "5273": {
      "op": "SWAP4"
    },
    "5274": {
      "op": "POP"
    },
    "5275": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5277": {
      "op": "DUP6"
    },
    "5278": {
      "op": "ADD"
    },
    "5279": {
      "op": "CALLDATALOAD"
    },
    "5280": {
      "op": "SWAP3"
    },
    "5281": {
      "op": "POP"
    },
    "5282": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5284": {
      "op": "DUP6"
    },
    "5285": {
      "op": "ADD"
    },
    "5286": {
      "op": "CALLDATALOAD"
    },
    "5287": {
      "op": "SWAP2"
    },
    "5288": {
      "op": "POP"
    },
    "5289": {
      "op": "PUSH2",
      "value": "0x14B4"
    },
    "5292": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5294": {
      "op": "DUP7"
    },
    "5295": {
      "op": "ADD"
    },
    "5296": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "5299": {
      "jump": "i",
      "op": "JUMP"
    },
    "5300": {
      "op": "JUMPDEST"
    },
    "5301": {
      "op": "SWAP1"
    },
    "5302": {
      "op": "POP"
    },
    "5303": {
      "op": "SWAP3"
    },
    "5304": {
      "op": "SWAP6"
    },
    "5305": {
      "op": "SWAP2"
    },
    "5306": {
      "op": "SWAP5"
    },
    "5307": {
      "op": "POP"
    },
    "5308": {
      "op": "SWAP3"
    },
    "5309": {
      "op": "POP"
    },
    "5310": {
      "jump": "o",
      "op": "JUMP"
    },
    "5311": {
      "op": "JUMPDEST"
    },
    "5312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5314": {
      "op": "DUP1"
    },
    "5315": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5317": {
      "op": "DUP4"
    },
    "5318": {
      "op": "DUP6"
    },
    "5319": {
      "op": "SUB"
    },
    "5320": {
      "op": "SLT"
    },
    "5321": {
      "op": "ISZERO"
    },
    "5322": {
      "op": "PUSH2",
      "value": "0x14D2"
    },
    "5325": {
      "op": "JUMPI"
    },
    "5326": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5328": {
      "op": "DUP1"
    },
    "5329": {
      "op": "REVERT"
    },
    "5330": {
      "op": "JUMPDEST"
    },
    "5331": {
      "op": "PUSH2",
      "value": "0x14DB"
    },
    "5334": {
      "op": "DUP4"
    },
    "5335": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "5338": {
      "jump": "i",
      "op": "JUMP"
    },
    "5339": {
      "op": "JUMPDEST"
    },
    "5340": {
      "op": "SWAP2"
    },
    "5341": {
      "op": "POP"
    },
    "5342": {
      "op": "PUSH2",
      "value": "0x14E9"
    },
    "5345": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5347": {
      "op": "DUP5"
    },
    "5348": {
      "op": "ADD"
    },
    "5349": {
      "op": "PUSH2",
      "value": "0x126F"
    },
    "5352": {
      "jump": "i",
      "op": "JUMP"
    },
    "5353": {
      "op": "JUMPDEST"
    },
    "5354": {
      "op": "SWAP1"
    },
    "5355": {
      "op": "POP"
    },
    "5356": {
      "op": "SWAP3"
    },
    "5357": {
      "op": "POP"
    },
    "5358": {
      "op": "SWAP3"
    },
    "5359": {
      "op": "SWAP1"
    },
    "5360": {
      "op": "POP"
    },
    "5361": {
      "jump": "o",
      "op": "JUMP"
    },
    "5362": {
      "op": "JUMPDEST"
    },
    "5363": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5365": {
      "op": "DUP2"
    },
    "5366": {
      "op": "DUP2"
    },
    "5367": {
      "op": "SHR"
    },
    "5368": {
      "op": "SWAP1"
    },
    "5369": {
      "op": "DUP3"
    },
    "5370": {
      "op": "AND"
    },
    "5371": {
      "op": "DUP1"
    },
    "5372": {
      "op": "PUSH2",
      "value": "0x1506"
    },
    "5375": {
      "op": "JUMPI"
    },
    "5376": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "5378": {
      "op": "DUP3"
    },
    "5379": {
      "op": "AND"
    },
    "5380": {
      "op": "SWAP2"
    },
    "5381": {
      "op": "POP"
    },
    "5382": {
      "op": "JUMPDEST"
    },
    "5383": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5385": {
      "op": "DUP3"
    },
    "5386": {
      "op": "LT"
    },
    "5387": {
      "op": "DUP2"
    },
    "5388": {
      "op": "EQ"
    },
    "5389": {
      "op": "ISZERO"
    },
    "5390": {
      "op": "PUSH2",
      "value": "0x1527"
    },
    "5393": {
      "op": "JUMPI"
    },
    "5394": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5399": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5401": {
      "op": "SHL"
    },
    "5402": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5404": {
      "op": "MSTORE"
    },
    "5405": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "5407": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5409": {
      "op": "MSTORE"
    },
    "5410": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5412": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5414": {
      "op": "REVERT"
    },
    "5415": {
      "op": "JUMPDEST"
    },
    "5416": {
      "op": "POP"
    },
    "5417": {
      "op": "SWAP2"
    },
    "5418": {
      "op": "SWAP1"
    },
    "5419": {
      "op": "POP"
    },
    "5420": {
      "jump": "o",
      "op": "JUMP"
    },
    "5421": {
      "op": "JUMPDEST"
    },
    "5422": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5427": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5429": {
      "op": "SHL"
    },
    "5430": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5432": {
      "op": "MSTORE"
    },
    "5433": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "5435": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5437": {
      "op": "MSTORE"
    },
    "5438": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5440": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5442": {
      "op": "REVERT"
    },
    "5443": {
      "op": "JUMPDEST"
    },
    "5444": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5446": {
      "op": "DUP3"
    },
    "5447": {
      "op": "PUSH2",
      "value": "0x1560"
    },
    "5450": {
      "op": "JUMPI"
    },
    "5451": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "5456": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "5458": {
      "op": "SHL"
    },
    "5459": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5461": {
      "op": "MSTORE"
    },
    "5462": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "5464": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "5466": {
      "op": "MSTORE"
    },
    "5467": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5469": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5471": {
      "op": "REVERT"
    },
    "5472": {
      "op": "JUMPDEST"
    },
    "5473": {
      "op": "POP"
    },
    "5474": {
      "op": "DIV"
    },
    "5475": {
      "op": "SWAP1"
    },
    "5476": {
      "jump": "o",
      "op": "JUMP"
    },
    "5477": {
      "op": "JUMPDEST"
    },
    "5478": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5480": {
      "op": "DUP3"
    },
    "5481": {
      "op": "NOT"
    },
    "5482": {
      "op": "DUP3"
    },
    "5483": {
      "op": "GT"
    },
    "5484": {
      "op": "ISZERO"
    },
    "5485": {
      "op": "PUSH2",
      "value": "0x1578"
    },
    "5488": {
      "op": "JUMPI"
    },
    "5489": {
      "op": "PUSH2",
      "value": "0x1578"
    },
    "5492": {
      "op": "PUSH2",
      "value": "0x152D"
    },
    "5495": {
      "jump": "i",
      "op": "JUMP"
    },
    "5496": {
      "op": "JUMPDEST"
    },
    "5497": {
      "op": "POP"
    },
    "5498": {
      "op": "ADD"
    },
    "5499": {
      "op": "SWAP1"
    },
    "5500": {
      "jump": "o",
      "op": "JUMP"
    },
    "5501": {
      "op": "JUMPDEST"
    },
    "5502": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5504": {
      "op": "DUP1"
    },
    "5505": {
      "op": "DUP3"
    },
    "5506": {
      "op": "MSTORE"
    },
    "5507": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "5509": {
      "op": "SWAP1"
    },
    "5510": {
      "op": "DUP3"
    },
    "5511": {
      "op": "ADD"
    },
    "5512": {
      "op": "MSTORE"
    },
    "5513": {
      "op": "PUSH32",
      "value": "0x44617461746F6B656E54656D706C6174653A20696E76616C6964206D696E7465"
    },
    "5546": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5548": {
      "op": "DUP3"
    },
    "5549": {
      "op": "ADD"
    },
    "5550": {
      "op": "MSTORE"
    },
    "5551": {
      "op": "PUSH1",
      "value": "0x39"
    },
    "5553": {
      "op": "PUSH1",
      "value": "0xF9"
    },
    "5555": {
      "op": "SHL"
    },
    "5556": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5558": {
      "op": "DUP3"
    },
    "5559": {
      "op": "ADD"
    },
    "5560": {
      "op": "MSTORE"
    },
    "5561": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5563": {
      "op": "ADD"
    },
    "5564": {
      "op": "SWAP1"
    },
    "5565": {
      "jump": "o",
      "op": "JUMP"
    },
    "5566": {
      "op": "JUMPDEST"
    },
    "5567": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5569": {
      "op": "DUP2"
    },
    "5570": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5572": {
      "op": "NOT"
    },
    "5573": {
      "op": "DIV"
    },
    "5574": {
      "op": "DUP4"
    },
    "5575": {
      "op": "GT"
    },
    "5576": {
      "op": "DUP3"
    },
    "5577": {
      "op": "ISZERO"
    },
    "5578": {
      "op": "ISZERO"
    },
    "5579": {
      "op": "AND"
    },
    "5580": {
      "op": "ISZERO"
    },
    "5581": {
      "op": "PUSH2",
      "value": "0x15D8"
    },
    "5584": {
      "op": "JUMPI"
    },
    "5585": {
      "op": "PUSH2",
      "value": "0x15D8"
    },
    "5588": {
      "op": "PUSH2",
      "value": "0x152D"
    },
    "5591": {
      "jump": "i",
      "op": "JUMP"
    },
    "5592": {
      "op": "JUMPDEST"
    },
    "5593": {
      "op": "POP"
    },
    "5594": {
      "op": "MUL"
    },
    "5595": {
      "op": "SWAP1"
    },
    "5596": {
      "jump": "o",
      "op": "JUMP"
    },
    "5597": {
      "op": "JUMPDEST"
    },
    "5598": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5600": {
      "op": "DUP3"
    },
    "5601": {
      "op": "DUP3"
    },
    "5602": {
      "op": "LT"
    },
    "5603": {
      "op": "ISZERO"
    },
    "5604": {
      "op": "PUSH2",
      "value": "0x15EF"
    },
    "5607": {
      "op": "JUMPI"
    },
    "5608": {
      "op": "PUSH2",
      "value": "0x15EF"
    },
    "5611": {
      "op": "PUSH2",
      "value": "0x152D"
    },
    "5614": {
      "jump": "i",
      "op": "JUMP"
    },
    "5615": {
      "op": "JUMPDEST"
    },
    "5616": {
      "op": "POP"
    },
    "5617": {
      "op": "SUB"
    },
    "5618": {
      "op": "SWAP1"
    },
    "5619": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "e80737c12249b08826b4a93b0aa6ae1ec2ff7e0f",
  "source": "pragma solidity 0.8.12;\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n// Code is Apache-2.0 and docs are CC-BY-4.0\n\n//import '../interfaces/IERC20Template.sol';\nimport \"OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/token/ERC20/ERC20.sol\";\nimport \"OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/math/SafeMath.sol\";\n\n/**\n* @title DatatokenTemplate\n*  \n* @dev DatatokenTemplate is an ERC20 compliant token template\n*      Used by the factory contract as a bytecode reference to \n*      deploy new Datatokens.\n*/\ncontract MockOldDT is ERC20('Test','TESTSYMBOL') {\n    using SafeMath for uint256;\n\n    string  private _name = 'MOCKV3DT';\n    string  private _symbol = 'V3DT';\n    string  private _blob = 'blob';\n    uint256 private _cap = 1e21;\n    uint8 private constant _decimals = 18;\n    address private _communityFeeCollector = address(0);\n    bool    private initialized = false;\n    address private _minter;\n    address private _proposedMinter;\n    uint256 public constant BASE = 10**18;\n    uint256 public constant BASE_COMMUNITY_FEE_PERCENTAGE = BASE / 1000;\n    uint256 public constant BASE_MARKET_FEE_PERCENTAGE = BASE / 1000;\n\n    event OrderStarted(\n            address indexed consumer,\n            address indexed payer,\n            uint256 amount, \n            uint256 serviceId, \n            uint256 timestamp,\n            address indexed mrktFeeCollector,\n            uint256 marketFee\n    );\n\n    event OrderFinished(\n            bytes32 orderTxId, \n            address indexed consumer,\n            uint256 amount, \n            uint256 serviceId, \n            address indexed provider,\n            uint256 timestamp\n    );\n\n    event MinterProposed(\n        address currentMinter,\n        address newMinter\n    );\n\n    event MinterApproved(\n        address currentMinter,\n        address newMinter\n    );\n\n    modifier onlyNotInitialized() {\n        require(\n            !initialized,\n            'DatatokenTemplate: token instance already initialized'\n        );\n        _;\n    }\n    \n    modifier onlyMinter() {\n        require(\n            msg.sender == _minter,\n            'DatatokenTemplate: invalid minter' \n        );\n        _;\n    }\n\n    constructor() \n        \n    {\n        _initialize(\n            _name,\n            _symbol,\n            msg.sender,\n            _cap,\n            _blob,\n            msg.sender\n        );\n    }\n    \n   \n    function initialize(\n        string calldata name,\n        string calldata symbol,\n        address minterAddress,\n        uint256 cap_,\n        string calldata blob_,\n        address feeCollector\n    ) \n        external\n        onlyNotInitialized\n        returns(bool)\n    {\n        return _initialize(\n            name,\n            symbol,\n            minterAddress,\n            cap_,\n            blob_,\n            feeCollector\n        );\n    }\n\n   \n    function _initialize(\n        string memory name,\n        string memory symbol,\n        address minterAddress,\n        uint256 cap_,\n        string memory blob_,\n        address feeCollector\n    )\n        private\n        returns(bool)\n    {\n        require(\n            minterAddress != address(0), \n            'DatatokenTemplate: Invalid minter,  zero address'\n        );\n\n        require(\n            _minter == address(0), \n            'DatatokenTemplate: Invalid minter, zero address'\n        );\n\n        require(\n            feeCollector != address(0),\n            'DatatokenTemplate: Invalid community fee collector, zero address'\n        );\n\n        require(\n            cap_ != 0,\n            'DatatokenTemplate: Invalid cap value'\n        );\n        _cap = cap_;\n        _name = name;\n        _blob = blob_;\n        _symbol = symbol;\n        _minter = minterAddress;\n        _communityFeeCollector = feeCollector;\n        initialized = true;\n        return initialized;\n    }\n\n   \n    function mint(\n        address account,\n        uint256 value\n    ) \n        external  \n        onlyMinter \n    {\n        require(\n            totalSupply().add(value) <= _cap, \n            'DatatokenTemplate: cap exceeded'\n        );\n        _mint(account, value);\n    }\n\n    function startOrder(\n        address consumer,\n        uint256 amount,\n        uint256 serviceId,\n        address mrktFeeCollector\n    )\n        external\n    {\n        uint256 marketFee = 0;\n        uint256 communityFee = calculateFee(\n            amount, \n            BASE_COMMUNITY_FEE_PERCENTAGE\n        );\n        transfer(_communityFeeCollector, communityFee);\n        if(mrktFeeCollector != address(0)){\n            marketFee = calculateFee(\n                amount, \n                BASE_MARKET_FEE_PERCENTAGE\n            );\n            transfer(mrktFeeCollector, marketFee);\n        }\n        uint256 totalFee = communityFee.add(marketFee);\n        transfer(_minter, amount.sub(totalFee));\n        emit OrderStarted(\n            consumer,\n            msg.sender,\n            amount,\n            serviceId,\n            /* solium-disable-next-line */\n            block.timestamp,\n            mrktFeeCollector,\n            marketFee\n        );\n    }\n\n    \n    function finishOrder(\n        bytes32 orderTxId, \n        address consumer, \n        uint256 amount,\n        uint256 serviceId\n    )\n        external\n    {\n        if ( amount != 0 )  \n            require(\n                transfer(consumer, amount),\n                'DatatokenTemplate: failed to finish order'\n            );\n        \n        emit OrderFinished(\n            orderTxId, \n            consumer, \n            amount, \n            serviceId, \n            msg.sender,\n            /* solium-disable-next-line */\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev proposeMinter\n     *      It proposes a new token minter address.\n     *      Only the current minter can call it.\n     * @param newMinter refers to a new token minter address.\n     */\n    function proposeMinter(address newMinter) \n        external \n        onlyMinter \n    {\n        _proposedMinter = newMinter;\n        emit MinterProposed(\n            msg.sender,\n            _proposedMinter\n        );\n    }\n\n    /**\n     * @dev approveMinter\n     *      It approves a new token minter address.\n     *      Only the current minter can call it.\n     */\n    function approveMinter()\n        external\n    {\n        require(\n            msg.sender == _proposedMinter,\n            'DatatokenTemplate: invalid proposed minter address'\n        );\n        emit MinterApproved(\n            _minter,\n            _proposedMinter\n        );\n        _minter = _proposedMinter;\n        _proposedMinter = address(0);\n    }\n\n  \n\n    /**\n     * @dev blob\n     *      It returns the blob (e.g https://123.com).\n     * @return Datatoken blob.\n     */\n    function blob() external view returns(string memory) {\n        return _blob;\n    }\n\n   \n    /**\n     * @dev cap\n     *      it returns the capital.\n     * @return Datatoken cap.\n     */\n    function cap() external view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev isMinter\n     *      It takes the address and checks whether it has a minter role.\n     * @param account refers to the address.\n     * @return true if account has a minter role.\n     */\n    function isMinter(address account) external view returns(bool) {\n        return (_minter == account);\n    } \n\n    /**\n     * @dev minter\n     * @return minter's address.\n     */\n    function minter()\n        external\n        view \n        returns(address)\n    {\n        return _minter;\n    }\n\n    /**\n     * @dev isInitialized\n     *      It checks whether the contract is initialized.\n     * @return true if the contract is initialized.\n     */ \n    function isInitialized() external view returns(bool) {\n        return initialized;\n    }\n\n    /**\n     * @dev calculateFee\n     *      giving a fee percentage, and amount it calculates the actual fee\n     * @param amount the amount of token\n     * @param feePercentage the fee percentage \n     * @return the token fee.\n     */ \n    function calculateFee(\n        uint256 amount,\n        uint256 feePercentage\n    )\n        public\n        pure\n        returns(uint256)\n    {\n        if(amount == 0) return 0;\n        if(feePercentage == 0) return 0;\n        return amount.mul(feePercentage).div(BASE);\n    }\n}",
  "sourceMap": "684:34:68:-:0;596:7713;684:34;;596:7713;684:34;;;-1:-1:-1;;;684:34:68;;;;;;;;;;:::i;:::-;-1:-1:-1;724:32:68;;;;;;;;;;;;;-1:-1:-1;;;724:32:68;;;;;;;;;;;;:::i;:::-;-1:-1:-1;762:30:68;;;;;;;;;;;;;-1:-1:-1;;;762:30:68;;;;;;;;;;;;:::i;:::-;-1:-1:-1;821:4:68;798:27;;874:51;;;-1:-1:-1;;;;;;931:35:68;;;2250:191;;;;;;;;;-1:-1:-1;1896:113:3;;;;;;;;;;;-1:-1:-1;;;1896:113:3;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:3;;;;1962:13;;1896:113;;;1962:13;;:5;;:13;:::i;:::-;-1:-1:-1;1985:17:3;;;;:7;;:17;;;;;:::i;:::-;;1896:113;;2288:146:68;2313:5;2288:146;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2332:7;2288:146;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2353:10;2377:4;;2395:5;2288:146;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2414:10;2288:11;;;:146;;:::i;:::-;;596:7713;;2911:985;3140:4;-1:-1:-1;;;;;3181:27:68;;3160:123;;;;-1:-1:-1;;;3160:123:68;;601:2:75;3160:123:68;;;583:21:75;640:2;620:18;;;613:30;-1:-1:-1;;;;;;;;;;;659:18:75;;;652:62;-1:-1:-1;;;730:18:75;;;723:46;786:19;;3160:123:68;;;;;;;;;3315:7;;-1:-1:-1;;;;;3315:7:68;:21;3294:116;;;;-1:-1:-1;;;3294:116:68;;1018:2:75;3294:116:68;;;1000:21:75;1057:2;1037:18;;;1030:30;-1:-1:-1;;;;;;;;;;;1076:18:75;;;1069:62;-1:-1:-1;;;1147:18:75;;;1140:45;1202:19;;3294:116:68;816:411:75;3294:116:68;-1:-1:-1;;;;;3442:26:68;;3421:137;;;;;-1:-1:-1;;;3421:137:68;;1434:2:75;3421:137:68;;;1416:21:75;1453:18;;;1446:30;;;;1512:34;1492:18;;;1485:62;1583:34;1563:18;;;1556:62;1635:19;;3421:137:68;1232:428:75;3421:137:68;3590:9;3569:92;;;;-1:-1:-1;;;3569:92:68;;1867:2:75;3569:92:68;;;1849:21:75;1906:2;1886:18;;;1879:30;1945:34;1925:18;;;1918:62;-1:-1:-1;;;1996:18:75;;;1989:34;2040:19;;3569:92:68;1665:400:75;3569:92:68;3671:4;:11;;;3692:12;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;3714:13:68;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;3737:16:68;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;;3763:7:68;:23;;-1:-1:-1;;;;;3763:23:68;;;-1:-1:-1;;;;;;3763:23:68;;;;;;3796:22;:37;;-1:-1:-1;;;;;;3843:18:68;3796:37;;;;3843:18;-1:-1:-1;;;3843:18:68;;;;;;;3878:11;;;3843:18;3878:11;;;-1:-1:-1;;;;2911:985:68:o;596:7713::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;596:7713:68;;;-1:-1:-1;596:7713:68;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:380:75;93:1;89:12;;;;136;;;157:61;;211:4;203:6;199:17;189:27;;157:61;264:2;256:6;253:14;233:18;230:38;227:161;;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:161;;14:380;;;:::o;1665:400::-;596:7713:68;;;;;;",
  "sourcePath": "contracts/oceanv4/utils/mock/MockOldDT.sol",
  "type": "contract"
}