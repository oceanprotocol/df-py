{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "OPFOwnerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newCollector",
          "type": "address"
        }
      ],
      "name": "changeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "1": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol",
    "20": "contracts/oceanv4/communityFee/OPFCommunityFeeCollector.sol",
    "22": "contracts/oceanv4/interfaces/IERC20.sol",
    "47": "contracts/oceanv4/utils/ERC721/Address.sol",
    "62": "contracts/oceanv4/utils/SafeERC20.sol",
    "9": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/utils/Context.sol"
  },
  "ast": {
    "absolutePath": "contracts/oceanv4/communityFee/OPFCommunityFeeCollector.sol",
    "exportedSymbols": {
      "Address": [
        21881
      ],
      "Context": [
        29252
      ],
      "IERC20": [
        3084
      ],
      "OPFCommunityFeeCollector": [
        2926
      ],
      "Ownable": [
        27725
      ],
      "SafeERC20": [
        25826
      ]
    },
    "id": 2927,
    "license": "(Apache-2.0 AND CC-BY-4.0)",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2796,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:20"
      },
      {
        "absolutePath": "contracts/oceanv4/interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 2797,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2927,
        "sourceUnit": 3085,
        "src": "185:34:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/calina/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol",
        "file": "OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol",
        "id": 2798,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2927,
        "sourceUnit": 27726,
        "src": "220:80:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/oceanv4/utils/SafeERC20.sol",
        "file": "../utils/SafeERC20.sol",
        "id": 2799,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 2927,
        "sourceUnit": 25827,
        "src": "301:32:20",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 2801,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 27725,
              "src": "694:7:20"
            },
            "id": 2802,
            "nodeType": "InheritanceSpecifier",
            "src": "694:7:20"
          }
        ],
        "canonicalName": "OPFCommunityFeeCollector",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2800,
          "nodeType": "StructuredDocumentation",
          "src": "336:320:20",
          "text": " @title OPFCommunityFeeCollector\n @dev Ocean Protocol Foundation Community Fee Collector contract\n      allows consumers to pay very small fee as part of the exchange of \n      datatokens with ocean token in order to support the community of  \n      ocean protocol and provide a sustainble development."
        },
        "fullyImplemented": true,
        "id": 2926,
        "linearizedBaseContracts": [
          2926,
          27725,
          29252
        ],
        "name": "OPFCommunityFeeCollector",
        "nameLocation": "666:24:20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 2806,
            "libraryName": {
              "id": 2803,
              "name": "SafeERC20",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25826,
              "src": "714:9:20"
            },
            "nodeType": "UsingForDirective",
            "src": "708:27:20",
            "typeName": {
              "id": 2805,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 2804,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 3084,
                "src": "728:6:20"
              },
              "referencedDeclaration": 3084,
              "src": "728:6:20",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$3084",
                "typeString": "contract IERC20"
              }
            }
          },
          {
            "constant": false,
            "id": 2808,
            "mutability": "mutable",
            "name": "collector",
            "nameLocation": "764:9:20",
            "nodeType": "VariableDeclaration",
            "scope": 2926,
            "src": "740:33:20",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 2807,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "740:15:20",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 2843,
              "nodeType": "Block",
              "src": "1158:284:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 2831,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2824,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2819,
                            "name": "newCollector",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2811,
                            "src": "1189:12:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 2822,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1213:1:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 2821,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1205:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2820,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1205:7:20",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2823,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1205:10:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1189:26:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 2830,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2825,
                            "name": "OPFOwnerAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2813,
                            "src": "1230:15:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 2828,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1257:1:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 2827,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1249:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2826,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1249:7:20",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2829,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1249:10:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1230:29:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "1189:70:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f5046436f6d6d756e697479466565436f6c6c6563746f723a20636f6c6c6563746f722061646472657373206f72206f776e657220697320696e76616c69642061646472657373",
                        "id": 2832,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1274:73:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_616ec9f97cdb82b4049f1345a8abc2201a64cabaaef4905e6b8a77d179c5f2d6",
                          "typeString": "literal_string \"OPFCommunityFeeCollector: collector address or owner is invalid address\""
                        },
                        "value": "OPFCommunityFeeCollector: collector address or owner is invalid address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_616ec9f97cdb82b4049f1345a8abc2201a64cabaaef4905e6b8a77d179c5f2d6",
                          "typeString": "literal_string \"OPFCommunityFeeCollector: collector address or owner is invalid address\""
                        }
                      ],
                      "id": 2818,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1168:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2833,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1168:189:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2834,
                  "nodeType": "ExpressionStatement",
                  "src": "1168:189:20"
                },
                {
                  "expression": {
                    "id": 2837,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2835,
                      "name": "collector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2808,
                      "src": "1367:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2836,
                      "name": "newCollector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2811,
                      "src": "1379:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1367:24:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 2838,
                  "nodeType": "ExpressionStatement",
                  "src": "1367:24:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2840,
                        "name": "OPFOwnerAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2813,
                        "src": "1419:15:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 2839,
                      "name": "transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27705,
                      "src": "1401:17:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 2841,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1401:34:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2842,
                  "nodeType": "ExpressionStatement",
                  "src": "1401:34:20"
                }
              ]
            },
            "documentation": {
              "id": 2809,
              "nodeType": "StructuredDocumentation",
              "src": "779:262:20",
              "text": " @dev constructor\n      Called prior contract deployment. set the controller address and\n      the contract owner address\n @param newCollector the fee collector address.\n @param OPFOwnerAddress the contract owner address"
            },
            "id": 2844,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [],
                "id": 2816,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 2815,
                  "name": "Ownable",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27725,
                  "src": "1144:7:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "1144:9:20"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2814,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2811,
                  "mutability": "mutable",
                  "name": "newCollector",
                  "nameLocation": "1083:12:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2844,
                  "src": "1067:28:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 2810,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1067:15:20",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2813,
                  "mutability": "mutable",
                  "name": "OPFOwnerAddress",
                  "nameLocation": "1113:15:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2844,
                  "src": "1105:23:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2812,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1105:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1057:77:20"
            },
            "returnParameters": {
              "id": 2817,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1158:0:20"
            },
            "scope": 2926,
            "src": "1046:396:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 2848,
              "nodeType": "Block",
              "src": "1620:2:20",
              "statements": []
            },
            "documentation": {
              "id": 2845,
              "nodeType": "StructuredDocumentation",
              "src": "1447:140:20",
              "text": " @dev fallback function\n      this is a default fallback function in which receives\n      the collected ether."
            },
            "id": 2849,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2846,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1600:2:20"
            },
            "returnParameters": {
              "id": 2847,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1620:0:20"
            },
            "scope": 2926,
            "src": "1592:30:20",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2853,
              "nodeType": "Block",
              "src": "1798:2:20",
              "statements": []
            },
            "documentation": {
              "id": 2850,
              "nodeType": "StructuredDocumentation",
              "src": "1628:138:20",
              "text": " @dev receive function\n      this is a default receive function in which receives\n      the collected ether."
            },
            "id": 2854,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2851,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1778:2:20"
            },
            "returnParameters": {
              "id": 2852,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1798:0:20"
            },
            "scope": 2926,
            "src": "1771:29:20",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2868,
              "nodeType": "Block",
              "src": "1977:58:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 2863,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "2014:4:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_OPFCommunityFeeCollector_$2926",
                                "typeString": "contract OPFCommunityFeeCollector"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_OPFCommunityFeeCollector_$2926",
                                "typeString": "contract OPFCommunityFeeCollector"
                              }
                            ],
                            "id": 2862,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2006:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 2861,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2006:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2864,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2006:13:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2865,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "2006:21:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 2858,
                        "name": "collector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2808,
                        "src": "1987:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 2860,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "1987:18:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 2866,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1987:41:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2867,
                  "nodeType": "ExpressionStatement",
                  "src": "1987:41:20"
                }
              ]
            },
            "documentation": {
              "id": 2855,
              "nodeType": "StructuredDocumentation",
              "src": "1806:104:20",
              "text": " @dev withdrawETH\n      transfers all the accumlated ether the collector address"
            },
            "functionSelector": "e086e5ec",
            "id": 2869,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawETH",
            "nameLocation": "1924:11:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2856,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1935:2:20"
            },
            "returnParameters": {
              "id": 2857,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1977:0:20"
            },
            "scope": 2926,
            "src": "1915:120:20",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2901,
              "nodeType": "Block",
              "src": "2289:298:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 2881,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2876,
                          "name": "tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2872,
                          "src": "2320:12:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 2879,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2344:1:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 2878,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2336:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 2877,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2336:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2880,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2336:10:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2320:26:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f5046436f6d6d756e697479466565436f6c6c6563746f723a20696e76616c696420746f6b656e20636f6e74726163742061646472657373",
                        "id": 2882,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2360:58:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_96299161c0f4c317613661dd9a3c09a86e2da844da34a8587e90bf981cb919b9",
                          "typeString": "literal_string \"OPFCommunityFeeCollector: invalid token contract address\""
                        },
                        "value": "OPFCommunityFeeCollector: invalid token contract address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_96299161c0f4c317613661dd9a3c09a86e2da844da34a8587e90bf981cb919b9",
                          "typeString": "literal_string \"OPFCommunityFeeCollector: invalid token contract address\""
                        }
                      ],
                      "id": 2875,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2299:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2883,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2299:129:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2884,
                  "nodeType": "ExpressionStatement",
                  "src": "2299:129:20"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 2889,
                        "name": "collector",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2808,
                        "src": "2494:9:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "id": 2896,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "2560:4:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_OPFCommunityFeeCollector_$2926",
                                  "typeString": "contract OPFCommunityFeeCollector"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_OPFCommunityFeeCollector_$2926",
                                  "typeString": "contract OPFCommunityFeeCollector"
                                }
                              ],
                              "id": 2895,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2552:7:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 2894,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2552:7:20",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 2897,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2552:13:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 2891,
                                "name": "tokenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2872,
                                "src": "2528:12:20",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2890,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3084,
                              "src": "2521:6:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$3084_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 2892,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2521:20:20",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$3084",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 2893,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3023,
                          "src": "2521:30:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 2898,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2521:45:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 2886,
                            "name": "tokenAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2872,
                            "src": "2450:12:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2885,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3084,
                          "src": "2443:6:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$3084_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 2887,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2443:20:20",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$3084",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 2888,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "safeTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25633,
                      "src": "2443:33:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$3084_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$3084_$",
                        "typeString": "function (contract IERC20,address,uint256)"
                      }
                    },
                    "id": 2899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2443:137:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2900,
                  "nodeType": "ExpressionStatement",
                  "src": "2443:137:20"
                }
              ]
            },
            "documentation": {
              "id": 2870,
              "nodeType": "StructuredDocumentation",
              "src": "2041:162:20",
              "text": " @dev withdrawToken\n      transfers all the accumlated tokens the collector address\n @param tokenAddress the token contract address "
            },
            "functionSelector": "89476069",
            "id": 2902,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawToken",
            "nameLocation": "2217:13:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2873,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2872,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "2248:12:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2902,
                  "src": "2240:20:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2871,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2240:7:20",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2230:36:20"
            },
            "returnParameters": {
              "id": 2874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2289:0:20"
            },
            "scope": 2926,
            "src": "2208:379:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 2924,
              "nodeType": "Block",
              "src": "2876:175:20",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 2916,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 2911,
                          "name": "newCollector",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2905,
                          "src": "2907:12:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 2914,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2931:1:20",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 2913,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2923:7:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 2912,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2923:7:20",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 2915,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2923:10:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2907:26:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f5046436f6d6d756e697479466565436f6c6c6563746f723a20696e76616c696420636f6c6c6563746f722061646472657373",
                        "id": 2917,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2947:53:20",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ccff23dbeddef29f1d56dadd51307fe5ca8848d02e365e74ca46cda6ecdf4fc0",
                          "typeString": "literal_string \"OPFCommunityFeeCollector: invalid collector address\""
                        },
                        "value": "OPFCommunityFeeCollector: invalid collector address"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ccff23dbeddef29f1d56dadd51307fe5ca8848d02e365e74ca46cda6ecdf4fc0",
                          "typeString": "literal_string \"OPFCommunityFeeCollector: invalid collector address\""
                        }
                      ],
                      "id": 2910,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2886:7:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2886:124:20",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2919,
                  "nodeType": "ExpressionStatement",
                  "src": "2886:124:20"
                },
                {
                  "expression": {
                    "id": 2922,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 2920,
                      "name": "collector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2808,
                      "src": "3020:9:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 2921,
                      "name": "newCollector",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2905,
                      "src": "3032:12:20",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "3020:24:20",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 2923,
                  "nodeType": "ExpressionStatement",
                  "src": "3020:24:20"
                }
              ]
            },
            "documentation": {
              "id": 2903,
              "nodeType": "StructuredDocumentation",
              "src": "2593:167:20",
              "text": " @dev changeCollector\n      change the current collector address. Only owner can do that.\n @param newCollector the new collector address "
            },
            "functionSelector": "7781127e",
            "id": 2925,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 2908,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 2907,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 27668,
                  "src": "2861:9:20"
                },
                "nodeType": "ModifierInvocation",
                "src": "2861:9:20"
              }
            ],
            "name": "changeCollector",
            "nameLocation": "2774:15:20",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2906,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2905,
                  "mutability": "mutable",
                  "name": "newCollector",
                  "nameLocation": "2815:12:20",
                  "nodeType": "VariableDeclaration",
                  "scope": 2925,
                  "src": "2799:28:20",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 2904,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2799:15:20",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2789:44:20"
            },
            "returnParameters": {
              "id": 2909,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2876:0:20"
            },
            "scope": 2926,
            "src": "2765:286:20",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2927,
        "src": "657:2396:20",
        "usedErrors": []
      }
    ],
    "src": "0:3053:20"
  },
  "bytecode": "608060405234801561001057600080fd5b50604051610aa3380380610aa383398101604081905261002f9161023a565b6100383361010a565b6001600160a01b0382161580159061005857506001600160a01b03811615155b6100df5760405162461bcd60e51b815260206004820152604760248201527f4f5046436f6d6d756e697479466565436f6c6c6563746f723a20636f6c6c656360448201527f746f722061646472657373206f72206f776e657220697320696e76616c6964206064820152666164647265737360c81b608482015260a4015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0384161790556101038161015a565b5050610274565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146101b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016100d6565b6001600160a01b0381166102195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100d6565b6102228161010a565b50565b6001600160a01b038116811461022257600080fd5b6000806040838503121561024d57600080fd5b825161025881610225565b602084015190925061026981610225565b809150509250929050565b610820806102836000396000f3fe6080604052600436106100565760003560e01c8063715018a61461005f5780637781127e1461007457806389476069146100945780638da5cb5b146100b4578063e086e5ec146100e0578063f2fde38b146100e857005b3661005d57005b005b34801561006b57600080fd5b5061005d610108565b34801561008057600080fd5b5061005d61008f3660046106de565b610147565b3480156100a057600080fd5b5061005d6100af3660046106de565b610205565b3480156100c057600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b61005d610309565b3480156100f457600080fd5b5061005d6101033660046106de565b610342565b6000546001600160a01b0316331461013b5760405162461bcd60e51b8152600401610132906106fb565b60405180910390fd5b61014560006103d6565b565b6000546001600160a01b031633146101715760405162461bcd60e51b8152600401610132906106fb565b6001600160a01b0381166101e35760405162461bcd60e51b815260206004820152603360248201527f4f5046436f6d6d756e697479466565436f6c6c6563746f723a20696e76616c696044820152726420636f6c6c6563746f72206164647265737360681b6064820152608401610132565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166102815760405162461bcd60e51b815260206004820152603860248201527f4f5046436f6d6d756e697479466565436f6c6c6563746f723a20696e76616c6960448201527f6420746f6b656e20636f6e7472616374206164647265737300000000000000006064820152608401610132565b6001546040516370a0823160e01b8152306004820152610306916001600160a01b0390811691908416906370a0823190602401602060405180830381865afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190610730565b6001600160a01b0384169190610426565b50565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610306573d6000803e3d6000fd5b6000546001600160a01b0316331461036c5760405162461bcd60e51b8152600401610132906106fb565b6001600160a01b0381166103d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610132565b610306815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261047890849061047d565b505050565b60006104d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661054f9092919063ffffffff16565b80519091501561047857808060200190518101906104f09190610749565b6104785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610132565b606061055e8484600085610568565b90505b9392505050565b6060824710156105c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610132565b843b6106175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610132565b600080866001600160a01b03168587604051610633919061079b565b60006040518083038185875af1925050503d8060008114610670576040519150601f19603f3d011682016040523d82523d6000602084013e610675565b606091505b5091509150610685828286610690565b979650505050505050565b6060831561069f575081610561565b8251156106af5782518084602001fd5b8160405162461bcd60e51b815260040161013291906107b7565b6001600160a01b038116811461030657600080fd5b6000602082840312156106f057600080fd5b8135610561816106c9565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561074257600080fd5b5051919050565b60006020828403121561075b57600080fd5b8151801515811461056157600080fd5b60005b8381101561078657818101518382015260200161076e565b83811115610795576000848401525b50505050565b600082516107ad81846020870161076b565b9190910192915050565b60208152600082518060208401526107d681604085016020870161076b565b601f01601f1916919091016040019291505056fea26469706673582212203912756dc85cfc4879a40b6530dae29d5ce6650e19e608d3e947dafc8a6c75c564736f6c634300080c0033",
  "bytecodeSha1": "beed93d7133744e5ac66ac650470bf8eb43bc740",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "OPFCommunityFeeCollector",
  "coverageMap": {
    "branches": {
      "1": {
        "Ownable.transferOwnership": {
          "25": [
            1934,
            1956,
            true
          ]
        }
      },
      "20": {
        "OPFCommunityFeeCollector.changeCollector": {
          "20": [
            2907,
            2933,
            true
          ]
        },
        "OPFCommunityFeeCollector.withdrawToken": {
          "21": [
            2320,
            2346,
            true
          ]
        }
      },
      "22": {},
      "47": {
        "Address._verifyCallResult": {
          "23": [
            7249,
            7256,
            false
          ],
          "24": [
            7390,
            7411,
            false
          ]
        },
        "Address.functionCallWithValue": {
          "22": [
            4782,
            4812,
            true
          ]
        }
      },
      "62": {
        "SafeERC20._callOptionalReturn": {
          "26": [
            3674,
            3695,
            false
          ],
          "27": [
            3758,
            3788,
            true
          ]
        }
      },
      "9": {}
    },
    "statements": {
      "1": {
        "Ownable._setOwner": {
          "10": [
            2131,
            2148
          ],
          "11": [
            2158,
            2203
          ]
        },
        "Ownable.owner": {
          "0": [
            1038,
            1051
          ]
        },
        "Ownable.renounceOwnership": {
          "2": [
            1669,
            1690
          ]
        },
        "Ownable.transferOwnership": {
          "8": [
            1926,
            1999
          ],
          "9": [
            2009,
            2028
          ]
        }
      },
      "20": {
        "OPFCommunityFeeCollector.changeCollector": {
          "3": [
            2886,
            3010
          ],
          "4": [
            3020,
            3044
          ]
        },
        "OPFCommunityFeeCollector.withdrawETH": {
          "7": [
            1987,
            2028
          ]
        },
        "OPFCommunityFeeCollector.withdrawToken": {
          "5": [
            2299,
            2428
          ],
          "6": [
            2443,
            2580
          ]
        }
      },
      "22": {},
      "47": {
        "Address._verifyCallResult": {
          "18": [
            7272,
            7289
          ],
          "19": [
            7780,
            7800
          ]
        },
        "Address.functionCall": {
          "14": [
            3723,
            3782
          ]
        },
        "Address.functionCallWithValue": {
          "15": [
            4774,
            4855
          ],
          "16": [
            4865,
            4925
          ],
          "17": [
            5080,
            5139
          ]
        }
      },
      "62": {
        "SafeERC20._callOptionalReturn": {
          "13": [
            3750,
            3835
          ]
        },
        "SafeERC20.safeTransfer": {
          "12": [
            752,
            838
          ]
        }
      },
      "9": {
        "Context._msgSender": {
          "1": [
            658,
            675
          ]
        }
      }
    }
  },
  "dependencies": [
    "Address",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/Context",
    "IERC20",
    "OpenZeppelin/openzeppelin-contracts@4.2.0/Ownable",
    "SafeERC20"
  ],
  "deployedBytecode": "6080604052600436106100565760003560e01c8063715018a61461005f5780637781127e1461007457806389476069146100945780638da5cb5b146100b4578063e086e5ec146100e0578063f2fde38b146100e857005b3661005d57005b005b34801561006b57600080fd5b5061005d610108565b34801561008057600080fd5b5061005d61008f3660046106de565b610147565b3480156100a057600080fd5b5061005d6100af3660046106de565b610205565b3480156100c057600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b61005d610309565b3480156100f457600080fd5b5061005d6101033660046106de565b610342565b6000546001600160a01b0316331461013b5760405162461bcd60e51b8152600401610132906106fb565b60405180910390fd5b61014560006103d6565b565b6000546001600160a01b031633146101715760405162461bcd60e51b8152600401610132906106fb565b6001600160a01b0381166101e35760405162461bcd60e51b815260206004820152603360248201527f4f5046436f6d6d756e697479466565436f6c6c6563746f723a20696e76616c696044820152726420636f6c6c6563746f72206164647265737360681b6064820152608401610132565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166102815760405162461bcd60e51b815260206004820152603860248201527f4f5046436f6d6d756e697479466565436f6c6c6563746f723a20696e76616c6960448201527f6420746f6b656e20636f6e7472616374206164647265737300000000000000006064820152608401610132565b6001546040516370a0823160e01b8152306004820152610306916001600160a01b0390811691908416906370a0823190602401602060405180830381865afa1580156102d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f59190610730565b6001600160a01b0384169190610426565b50565b6001546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610306573d6000803e3d6000fd5b6000546001600160a01b0316331461036c5760405162461bcd60e51b8152600401610132906106fb565b6001600160a01b0381166103d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610132565b610306815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261047890849061047d565b505050565b60006104d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661054f9092919063ffffffff16565b80519091501561047857808060200190518101906104f09190610749565b6104785760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610132565b606061055e8484600085610568565b90505b9392505050565b6060824710156105c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610132565b843b6106175760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610132565b600080866001600160a01b03168587604051610633919061079b565b60006040518083038185875af1925050503d8060008114610670576040519150601f19603f3d011682016040523d82523d6000602084013e610675565b606091505b5091509150610685828286610690565b979650505050505050565b6060831561069f575081610561565b8251156106af5782518084602001fd5b8160405162461bcd60e51b815260040161013291906107b7565b6001600160a01b038116811461030657600080fd5b6000602082840312156106f057600080fd5b8135610561816106c9565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561074257600080fd5b5051919050565b60006020828403121561075b57600080fd5b8151801515811461056157600080fd5b60005b8381101561078657818101518382015260200161076e565b83811115610795576000848401525b50505050565b600082516107ad81846020870161076b565b9190910192915050565b60208152600082518060208401526107d681604085016020870161076b565b601f01601f1916919091016040019291505056fea26469706673582212203912756dc85cfc4879a40b6530dae29d5ce6650e19e608d3e947dafc8a6c75c564736f6c634300080c0033",
  "deployedSourceMap": "657:2396:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1605:92:1;;;;;;;;;;;;;:::i;2765:286:20:-;;;;;;;;;;-1:-1:-1;2765:286:20;;;;;:::i;:::-;;:::i;2208:379::-;;;;;;;;;;-1:-1:-1;2208:379:20;;;;;:::i;:::-;;:::i;973:85:1:-;;;;;;;;;;-1:-1:-1;1019:7:1;1045:6;973:85;;;-1:-1:-1;;;;;1045:6:1;;;832:51:75;;973:85:1;;;;;820:2:75;973:85:1;;;1915:120:20;;;:::i;1846:189:1:-;;;;;;;;;;-1:-1:-1;1846:189:1;;;;;:::i;:::-;;:::i;1605:92::-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:1;665:10:9;1185:23:1;1177:68;;;;-1:-1:-1;;;1177:68:1;;;;;;;:::i;:::-;;;;;;;;;1669:21:::1;1687:1;1669:9;:21::i;:::-;1605:92::o:0;2765:286:20:-;1019:7:1;1045:6;-1:-1:-1;;;;;1045:6:1;665:10:9;1185:23:1;1177:68;;;;-1:-1:-1;;;1177:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;2907:26:20;::::1;2886:124;;;::::0;-1:-1:-1;;;2886:124:20;;1457:2:75;2886:124:20::1;::::0;::::1;1439:21:75::0;1496:2;1476:18;;;1469:30;1535:34;1515:18;;;1508:62;-1:-1:-1;;;1586:18:75;;;1579:49;1645:19;;2886:124:20::1;1255:415:75::0;2886:124:20::1;3020:9;:24:::0;;-1:-1:-1;;;;;;3020:24:20::1;-1:-1:-1::0;;;;;3020:24:20;;;::::1;::::0;;;::::1;::::0;;2765:286::o;2208:379::-;-1:-1:-1;;;;;2320:26:20;;2299:129;;;;-1:-1:-1;;;2299:129:20;;1877:2:75;2299:129:20;;;1859:21:75;1916:2;1896:18;;;1889:30;1955:34;1935:18;;;1928:62;2026:26;2006:18;;;1999:54;2070:19;;2299:129:20;1675:420:75;2299:129:20;2494:9;;2521:45;;-1:-1:-1;;;2521:45:20;;2560:4;2521:45;;;832:51:75;2443:137:20;;-1:-1:-1;;;;;2494:9:20;;;;2521:30;;;;;;805:18:75;;2521:45:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2443:33:20;;;:137;:33;:137::i;:::-;2208:379;:::o;1915:120::-;1987:9;;:41;;-1:-1:-1;;;;;1987:9:20;;;;2006:21;1987:41;;;;;:9;:41;:9;:41;2006:21;1987:9;:41;;;;;;;;;;;;;;;;;;;1846:189:1;1019:7;1045:6;-1:-1:-1;;;;;1045:6:1;665:10:9;1185:23:1;1177:68;;;;-1:-1:-1;;;1177:68:1;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:1;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:1;;2491:2:75;1926:73:1::1;::::0;::::1;2473:21:75::0;2530:2;2510:18;;;2503:30;2569:34;2549:18;;;2542:62;-1:-1:-1;;;2620:18:75;;;2613:36;2666:19;;1926:73:1::1;2289:402:75::0;1926:73:1::1;2009:19;2019:8;2041:169:::0;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:1;;;-1:-1:-1;;;;;;2131:17:1;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2086:124;2041:169;:::o;640:205:62:-;779:58;;;-1:-1:-1;;;;;2888:32:75;;779:58:62;;;2870:51:75;2937:18;;;;2930:34;;;779:58:62;;;;;;;;;;2843:18:75;;;;779:58:62;;;;;;;;-1:-1:-1;;;;;779:58:62;-1:-1:-1;;;779:58:62;;;752:86;;772:5;;752:19;:86::i;:::-;640:205;;;:::o;3146:706::-;3565:23;3591:69;3619:4;3591:69;;;;;;;;;;;;;;;;;3599:5;-1:-1:-1;;;;;3591:27:62;;;:69;;;;;:::i;:::-;3674:17;;3565:95;;-1:-1:-1;3674:21:62;3670:176;;3769:10;3758:30;;;;;;;;;;;;:::i;:::-;3750:85;;;;-1:-1:-1;;;3750:85:62;;3459:2:75;3750:85:62;;;3441:21:75;3498:2;3478:18;;;3471:30;3537:34;3517:18;;;3510:62;-1:-1:-1;;;3588:18:75;;;3581:40;3638:19;;3750:85:62;3257:406:75;3596:193:47;3699:12;3730:52;3752:6;3760:4;3766:1;3769:12;3730:21;:52::i;:::-;3723:59;;3596:193;;;;;;:::o;4623:523::-;4750:12;4807:5;4782:21;:30;;4774:81;;;;-1:-1:-1;;;4774:81:47;;3870:2:75;4774:81:47;;;3852:21:75;3909:2;3889:18;;;3882:30;3948:34;3928:18;;;3921:62;-1:-1:-1;;;3999:18:75;;;3992:36;4045:19;;4774:81:47;3668:402:75;4774:81:47;1101:20;;4865:60;;;;-1:-1:-1;;;4865:60:47;;4277:2:75;4865:60:47;;;4259:21:75;4316:2;4296:18;;;4289:30;4355:31;4335:18;;;4328:59;4404:18;;4865:60:47;4075:353:75;4865:60:47;4996:12;5010:23;5037:6;-1:-1:-1;;;;;5037:11:47;5057:5;5065:4;5037:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4995:75;;;;5087:52;5105:7;5114:10;5126:12;5087:17;:52::i;:::-;5080:59;4623:523;-1:-1:-1;;;;;;;4623:523:47:o;7106:725::-;7221:12;7249:7;7245:580;;;-1:-1:-1;7279:10:47;7272:17;;7245:580;7390:17;;:21;7386:429;;7648:10;7642:17;7708:15;7695:10;7691:2;7687:19;7680:44;7386:429;7787:12;7780:20;;-1:-1:-1;;;7780:20:47;;;;;;;;:::i;14:139:75:-;-1:-1:-1;;;;;97:31:75;;87:42;;77:70;;143:1;140;133:12;158:263;225:6;278:2;266:9;257:7;253:23;249:32;246:52;;;294:1;291;284:12;246:52;333:9;320:23;352:39;385:5;352:39;:::i;894:356::-;1096:2;1078:21;;;1115:18;;;1108:30;1174:34;1169:2;1154:18;;1147:62;1241:2;1226:18;;894:356::o;2100:184::-;2170:6;2223:2;2211:9;2202:7;2198:23;2194:32;2191:52;;;2239:1;2236;2229:12;2191:52;-1:-1:-1;2262:16:75;;2100:184;-1:-1:-1;2100:184:75:o;2975:277::-;3042:6;3095:2;3083:9;3074:7;3070:23;3066:32;3063:52;;;3111:1;3108;3101:12;3063:52;3143:9;3137:16;3196:5;3189:13;3182:21;3175:5;3172:32;3162:60;;3218:1;3215;3208:12;4433:258;4505:1;4515:113;4529:6;4526:1;4523:13;4515:113;;;4605:11;;;4599:18;4586:11;;;4579:39;4551:2;4544:10;4515:113;;;4646:6;4643:1;4640:13;4637:48;;;4681:1;4672:6;4667:3;4663:16;4656:27;4637:48;;4433:258;;;:::o;4696:274::-;4825:3;4863:6;4857:13;4879:53;4925:6;4920:3;4913:4;4905:6;4901:17;4879:53;:::i;:::-;4948:16;;;;;4696:274;-1:-1:-1;;4696:274:75:o;4975:383::-;5124:2;5113:9;5106:21;5087:4;5156:6;5150:13;5199:6;5194:2;5183:9;5179:18;5172:34;5215:66;5274:6;5269:2;5258:9;5254:18;5249:2;5241:6;5237:15;5215:66;:::i;:::-;5342:2;5321:15;-1:-1:-1;;5317:29:75;5302:45;;;;5349:2;5298:54;;4975:383;-1:-1:-1;;4975:383:75:o",
  "language": "Solidity",
  "natspec": {
    "details": "Ocean Protocol Foundation Community Fee Collector contract      allows consumers to pay very small fee as part of the exchange of       datatokens with ocean token in order to support the community of        ocean protocol and provide a sustainble development.",
    "kind": "dev",
    "methods": {
      "changeCollector(address)": {
        "details": "changeCollector      change the current collector address. Only owner can do that.",
        "params": {
          "newCollector": "the new collector address "
        }
      },
      "constructor": {
        "details": "constructor      Called prior contract deployment. set the controller address and      the contract owner address",
        "params": {
          "OPFOwnerAddress": "the contract owner address",
          "newCollector": "the fee collector address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawETH()": {
        "details": "withdrawETH      transfers all the accumlated ether the collector address"
      },
      "withdrawToken(address)": {
        "details": "withdrawToken      transfers all the accumlated tokens the collector address",
        "params": {
          "tokenAddress": "the token contract address "
        }
      }
    },
    "title": "OPFCommunityFeeCollector",
    "version": 1
  },
  "offset": [
    657,
    3053
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5F JUMPI DUP1 PUSH4 0x7781127E EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x89476069 EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0xE086E5EC EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xE8 JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 0x5D JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D PUSH2 0x108 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D PUSH2 0x8F CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x147 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D PUSH2 0xAF CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x5D PUSH2 0x309 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x342 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x13B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132 SWAP1 PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x145 PUSH1 0x0 PUSH2 0x3D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x171 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132 SWAP1 PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F5046436F6D6D756E697479466565436F6C6C6563746F723A20696E76616C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x6420636F6C6C6563746F722061646472657373 PUSH1 0x68 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x132 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x281 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F5046436F6D6D756E697479466565436F6C6C6563746F723A20696E76616C69 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6420746F6B656E20636F6E747261637420616464726573730000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x132 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0x306 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F5 SWAP2 SWAP1 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 SWAP1 PUSH2 0x426 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x306 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x36C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132 SWAP1 PUSH2 0x6FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x3D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x132 JUMP JUMPDEST PUSH2 0x306 DUP2 JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x478 SWAP1 DUP5 SWAP1 PUSH2 0x47D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x54F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x478 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4F0 SWAP2 SWAP1 PUSH2 0x749 JUMP JUMPDEST PUSH2 0x478 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x132 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x55E DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x568 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x5C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x132 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x132 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x633 SWAP2 SWAP1 PUSH2 0x79B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x675 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x685 DUP3 DUP3 DUP7 PUSH2 0x690 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x69F JUMPI POP DUP2 PUSH2 0x561 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x6AF JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132 SWAP2 SWAP1 PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x306 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x561 DUP2 PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x561 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x786 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x76E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x795 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7AD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x76B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x7D6 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x76B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODECOPY SLT PUSH22 0x6DC85CFC4879A40B6530DAE29D5CE6650E19E608D3E9 SELFBALANCE 0xDA 0xFC DUP11 PUSH13 0x75C564736F6C634300080C0033 ",
  "pcMap": {
    "0": {
      "offset": [
        657,
        3053
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "5": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "8": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "LT",
      "path": "20"
    },
    "9": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x56"
    },
    "12": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "13": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "CALLDATALOAD",
      "path": "20"
    },
    "16": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "SHR",
      "path": "20"
    },
    "19": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "20": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x715018A6"
    },
    "25": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "EQ",
      "path": "20"
    },
    "26": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5F"
    },
    "29": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "30": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "31": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x7781127E"
    },
    "36": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "EQ",
      "path": "20"
    },
    "37": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x74"
    },
    "40": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "41": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "42": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x89476069"
    },
    "47": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "EQ",
      "path": "20"
    },
    "48": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x94"
    },
    "51": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "52": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "53": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x8DA5CB5B"
    },
    "58": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "EQ",
      "path": "20"
    },
    "59": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xB4"
    },
    "62": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "63": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "64": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xE086E5EC"
    },
    "69": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "EQ",
      "path": "20"
    },
    "70": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xE0"
    },
    "73": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "74": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "DUP1",
      "path": "20"
    },
    "75": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0xF2FDE38B"
    },
    "80": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "EQ",
      "path": "20"
    },
    "81": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xE8"
    },
    "84": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "85": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "STOP",
      "path": "20"
    },
    "86": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "87": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "88": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5D"
    },
    "91": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "92": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "STOP",
      "path": "20"
    },
    "93": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "94": {
      "fn": null,
      "offset": [
        657,
        3053
      ],
      "op": "STOP",
      "path": "20"
    },
    "95": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "96": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "97": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "DUP1",
      "path": "1"
    },
    "98": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "99": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6B"
    },
    "102": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "103": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "105": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "DUP1",
      "path": "1"
    },
    "106": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "REVERT",
      "path": "1"
    },
    "107": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "108": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "POP",
      "path": "1"
    },
    "109": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5D"
    },
    "112": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x108"
    },
    "115": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMP",
      "path": "1"
    },
    "116": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "117": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "118": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "DUP1",
      "path": "20"
    },
    "119": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "120": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x80"
    },
    "123": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "124": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "126": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "DUP1",
      "path": "20"
    },
    "127": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "REVERT",
      "path": "20"
    },
    "128": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "129": {
      "op": "POP"
    },
    "130": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5D"
    },
    "133": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x8F"
    },
    "136": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "137": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "139": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6DE"
    },
    "142": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "jump": "i",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMP",
      "path": "20"
    },
    "143": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "144": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x147"
    },
    "147": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "jump": "i",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMP",
      "path": "20"
    },
    "148": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "149": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "CALLVALUE",
      "path": "20"
    },
    "150": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "DUP1",
      "path": "20"
    },
    "151": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "152": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xA0"
    },
    "155": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "156": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "158": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "DUP1",
      "path": "20"
    },
    "159": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "REVERT",
      "path": "20"
    },
    "160": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "161": {
      "op": "POP"
    },
    "162": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5D"
    },
    "165": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0xAF"
    },
    "168": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "CALLDATASIZE",
      "path": "20"
    },
    "169": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "171": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x6DE"
    },
    "174": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "jump": "i",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMP",
      "path": "20"
    },
    "175": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "176": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x205"
    },
    "179": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "jump": "i",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMP",
      "path": "20"
    },
    "180": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "181": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "182": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "DUP1",
      "path": "1"
    },
    "183": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "184": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC0"
    },
    "187": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "188": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "190": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "DUP1",
      "path": "1"
    },
    "191": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "REVERT",
      "path": "1"
    },
    "192": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "193": {
      "op": "POP"
    },
    "194": {
      "fn": "Ownable.owner",
      "offset": [
        1019,
        1026
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "196": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "1",
      "statement": 0
    },
    "197": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "199": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "DUP1",
      "path": "1"
    },
    "200": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "201": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "203": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "205": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "207": {
      "op": "SHL"
    },
    "208": {
      "op": "SUB"
    },
    "209": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "210": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "211": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "1"
    },
    "212": {
      "op": "DUP3"
    },
    "213": {
      "op": "MSTORE"
    },
    "214": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "215": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "216": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "DUP2",
      "path": "1"
    },
    "217": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "218": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "SUB",
      "path": "1"
    },
    "219": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "221": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "ADD",
      "path": "1"
    },
    "222": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "223": {
      "fn": "Ownable.owner",
      "offset": [
        973,
        1058
      ],
      "op": "RETURN",
      "path": "1"
    },
    "224": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1915,
        2035
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "225": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1915,
        2035
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x5D"
    },
    "228": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1915,
        2035
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x309"
    },
    "231": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "jump": "i",
      "offset": [
        1915,
        2035
      ],
      "op": "JUMP",
      "path": "20"
    },
    "232": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "233": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "234": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "DUP1",
      "path": "1"
    },
    "235": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "236": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF4"
    },
    "239": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "240": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "242": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "DUP1",
      "path": "1"
    },
    "243": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "REVERT",
      "path": "1"
    },
    "244": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "245": {
      "op": "POP"
    },
    "246": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5D"
    },
    "249": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x103"
    },
    "252": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "253": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "255": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6DE"
    },
    "258": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "1"
    },
    "259": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "260": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x342"
    },
    "263": {
      "fn": "Ownable.transferOwnership",
      "jump": "i",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMP",
      "path": "1"
    },
    "264": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "265": {
      "fn": "Ownable.owner",
      "offset": [
        1019,
        1026
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "267": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "268": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "270": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "272": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "274": {
      "op": "SHL"
    },
    "275": {
      "op": "SUB"
    },
    "276": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "1"
    },
    "277": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9",
      "statement": 1
    },
    "278": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "1"
    },
    "279": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13B"
    },
    "282": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "283": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "285": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "286": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "290": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "292": {
      "op": "SHL"
    },
    "293": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "1"
    },
    "294": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "295": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "297": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "1"
    },
    "298": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x132"
    },
    "301": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "302": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6FB"
    },
    "305": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "1"
    },
    "306": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "307": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "309": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "310": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "DUP1",
      "path": "1"
    },
    "311": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "312": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SUB",
      "path": "1"
    },
    "313": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "314": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "315": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "316": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1690
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 2,
      "value": "0x145"
    },
    "319": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1687,
        1688
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "321": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3D6"
    },
    "324": {
      "fn": "Ownable.renounceOwnership",
      "jump": "i",
      "offset": [
        1669,
        1690
      ],
      "op": "JUMP",
      "path": "1"
    },
    "325": {
      "fn": "Ownable.renounceOwnership",
      "offset": [
        1669,
        1690
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "326": {
      "fn": "Ownable.renounceOwnership",
      "jump": "o",
      "offset": [
        1605,
        1697
      ],
      "op": "JUMP",
      "path": "1"
    },
    "327": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "328": {
      "fn": "Ownable.owner",
      "offset": [
        1019,
        1026
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "330": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "333": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "335": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "337": {
      "op": "SHL"
    },
    "338": {
      "op": "SUB"
    },
    "339": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "1"
    },
    "340": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "341": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "1"
    },
    "342": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x171"
    },
    "345": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "346": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "348": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "349": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "353": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "355": {
      "op": "SHL"
    },
    "356": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "1"
    },
    "357": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "358": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "360": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "1"
    },
    "361": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x132"
    },
    "364": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "365": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6FB"
    },
    "368": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "1"
    },
    "369": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "370": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "372": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "374": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "376": {
      "op": "SHL"
    },
    "377": {
      "op": "SUB"
    },
    "378": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2907,
        2933
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 3
    },
    "379": {
      "branch": 20,
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2907,
        2933
      ],
      "op": "AND",
      "path": "20"
    },
    "380": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x1E3"
    },
    "383": {
      "branch": 20,
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "384": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "386": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "387": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "391": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "393": {
      "op": "SHL"
    },
    "394": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "DUP2",
      "path": "20"
    },
    "395": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "396": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "398": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "400": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "DUP3",
      "path": "20"
    },
    "401": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "ADD",
      "path": "20"
    },
    "402": {
      "op": "MSTORE"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x33"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "407": {
      "op": "DUP3"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "op": "MSTORE"
    },
    "410": {
      "op": "PUSH32",
      "value": "0x4F5046436F6D6D756E697479466565436F6C6C6563746F723A20696E76616C69"
    },
    "443": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "445": {
      "op": "DUP3"
    },
    "446": {
      "op": "ADD"
    },
    "447": {
      "op": "MSTORE"
    },
    "448": {
      "op": "PUSH19",
      "value": "0x6420636F6C6C6563746F722061646472657373"
    },
    "468": {
      "op": "PUSH1",
      "value": "0x68"
    },
    "470": {
      "op": "SHL"
    },
    "471": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "473": {
      "op": "DUP3"
    },
    "474": {
      "op": "ADD"
    },
    "475": {
      "op": "MSTORE"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "478": {
      "op": "ADD"
    },
    "479": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x132"
    },
    "482": {
      "op": "JUMP"
    },
    "483": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        2886,
        3010
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "484": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3029
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 4,
      "value": "0x1"
    },
    "486": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "DUP1",
      "path": "20"
    },
    "487": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "488": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "490": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "492": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "494": {
      "op": "SHL"
    },
    "495": {
      "op": "SUB"
    },
    "496": {
      "op": "NOT"
    },
    "497": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "AND",
      "path": "20"
    },
    "498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "500": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "502": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "504": {
      "op": "SHL"
    },
    "505": {
      "op": "SUB"
    },
    "506": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "507": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "508": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP3",
      "path": "20"
    },
    "509": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "AND",
      "path": "20"
    },
    "510": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "511": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "512": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "513": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "OR",
      "path": "20"
    },
    "514": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "515": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "offset": [
        3020,
        3044
      ],
      "op": "SSTORE",
      "path": "20"
    },
    "516": {
      "fn": "OPFCommunityFeeCollector.changeCollector",
      "jump": "o",
      "offset": [
        2765,
        3051
      ],
      "op": "JUMP",
      "path": "20"
    },
    "517": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "518": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "520": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "522": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "524": {
      "op": "SHL"
    },
    "525": {
      "op": "SUB"
    },
    "526": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2320,
        2346
      ],
      "op": "DUP2",
      "path": "20",
      "statement": 5
    },
    "527": {
      "branch": 21,
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2320,
        2346
      ],
      "op": "AND",
      "path": "20"
    },
    "528": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x281"
    },
    "531": {
      "branch": 21,
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "532": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "534": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "535": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "539": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "541": {
      "op": "SHL"
    },
    "542": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "DUP2",
      "path": "20"
    },
    "543": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "544": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "546": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "548": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "DUP3",
      "path": "20"
    },
    "549": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "ADD",
      "path": "20"
    },
    "550": {
      "op": "MSTORE"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x38"
    },
    "553": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "555": {
      "op": "DUP3"
    },
    "556": {
      "op": "ADD"
    },
    "557": {
      "op": "MSTORE"
    },
    "558": {
      "op": "PUSH32",
      "value": "0x4F5046436F6D6D756E697479466565436F6C6C6563746F723A20696E76616C69"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "593": {
      "op": "DUP3"
    },
    "594": {
      "op": "ADD"
    },
    "595": {
      "op": "MSTORE"
    },
    "596": {
      "op": "PUSH32",
      "value": "0x6420746F6B656E20636F6E747261637420616464726573730000000000000000"
    },
    "629": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "631": {
      "op": "DUP3"
    },
    "632": {
      "op": "ADD"
    },
    "633": {
      "op": "MSTORE"
    },
    "634": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "636": {
      "op": "ADD"
    },
    "637": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x132"
    },
    "640": {
      "op": "JUMP"
    },
    "641": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2299,
        2428
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "642": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2494,
        2503
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 6,
      "value": "0x1"
    },
    "644": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2494,
        2503
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "645": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "647": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "648": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "653": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "655": {
      "op": "SHL"
    },
    "656": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP2",
      "path": "20"
    },
    "657": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "658": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2560,
        2564
      ],
      "op": "ADDRESS",
      "path": "20"
    },
    "659": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x4"
    },
    "661": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP3",
      "path": "20"
    },
    "662": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "ADD",
      "path": "20"
    },
    "663": {
      "op": "MSTORE"
    },
    "664": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2580
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x306"
    },
    "667": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2580
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "668": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "670": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "672": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "674": {
      "op": "SHL"
    },
    "675": {
      "op": "SUB"
    },
    "676": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2494,
        2503
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "677": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2494,
        2503
      ],
      "op": "DUP2",
      "path": "20"
    },
    "678": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2494,
        2503
      ],
      "op": "AND",
      "path": "20"
    },
    "679": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2494,
        2503
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "680": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2551
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "681": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2551
      ],
      "op": "DUP5",
      "path": "20"
    },
    "682": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2551
      ],
      "op": "AND",
      "path": "20"
    },
    "683": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2551
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "684": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2551
      ],
      "op": "PUSH4",
      "path": "20",
      "value": "0x70A08231"
    },
    "689": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2551
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "690": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "692": {
      "op": "ADD"
    },
    "693": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x20"
    },
    "695": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "697": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "698": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP1",
      "path": "20"
    },
    "699": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP4",
      "path": "20"
    },
    "700": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "SUB",
      "path": "20"
    },
    "701": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP2",
      "path": "20"
    },
    "702": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP7",
      "path": "20"
    },
    "703": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "GAS",
      "path": "20"
    },
    "704": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "STATICCALL",
      "path": "20"
    },
    "705": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "706": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP1",
      "path": "20"
    },
    "707": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "708": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2D1"
    },
    "711": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "712": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "713": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "715": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP1",
      "path": "20"
    },
    "716": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "717": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "718": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "720": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "REVERT",
      "path": "20"
    },
    "721": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "722": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "POP",
      "path": "20"
    },
    "723": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "POP",
      "path": "20"
    },
    "724": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "POP",
      "path": "20"
    },
    "725": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "POP",
      "path": "20"
    },
    "726": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "728": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "729": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "730": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "732": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "NOT",
      "path": "20"
    },
    "733": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x1F"
    },
    "735": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP3",
      "path": "20"
    },
    "736": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "ADD",
      "path": "20"
    },
    "737": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "AND",
      "path": "20"
    },
    "738": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP3",
      "path": "20"
    },
    "739": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "ADD",
      "path": "20"
    },
    "740": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP1",
      "path": "20"
    },
    "741": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "743": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "MSTORE",
      "path": "20"
    },
    "744": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "POP",
      "path": "20"
    },
    "745": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "DUP2",
      "path": "20"
    },
    "746": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "ADD",
      "path": "20"
    },
    "747": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "748": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x2F5"
    },
    "751": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "752": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "753": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x730"
    },
    "756": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "jump": "i",
      "offset": [
        2521,
        2566
      ],
      "op": "JUMP",
      "path": "20"
    },
    "757": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2521,
        2566
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "760": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "762": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "764": {
      "op": "SHL"
    },
    "765": {
      "op": "SUB"
    },
    "766": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2476
      ],
      "op": "DUP5",
      "path": "20"
    },
    "767": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2476
      ],
      "op": "AND",
      "path": "20"
    },
    "768": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2476
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "769": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2580
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "770": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2476
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x426"
    },
    "773": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "jump": "i",
      "offset": [
        2443,
        2580
      ],
      "op": "JUMP",
      "path": "20"
    },
    "774": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2443,
        2580
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "775": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "offset": [
        2208,
        2587
      ],
      "op": "POP",
      "path": "20"
    },
    "776": {
      "fn": "OPFCommunityFeeCollector.withdrawToken",
      "jump": "o",
      "offset": [
        2208,
        2587
      ],
      "op": "JUMP",
      "path": "20"
    },
    "777": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1915,
        2035
      ],
      "op": "JUMPDEST",
      "path": "20"
    },
    "778": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "PUSH1",
      "path": "20",
      "statement": 7,
      "value": "0x1"
    },
    "780": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "SLOAD",
      "path": "20"
    },
    "781": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x40"
    },
    "783": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "MLOAD",
      "path": "20"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "786": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "788": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "790": {
      "op": "SHL"
    },
    "791": {
      "op": "SUB"
    },
    "792": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "793": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "794": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "AND",
      "path": "20"
    },
    "795": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "SWAP1",
      "path": "20"
    },
    "796": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        2006,
        2027
      ],
      "op": "SELFBALANCE",
      "path": "20"
    },
    "797": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "DUP1",
      "path": "20"
    },
    "798": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "799": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x8FC"
    },
    "802": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "MUL",
      "path": "20"
    },
    "803": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "SWAP2",
      "path": "20"
    },
    "804": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "806": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "DUP2",
      "path": "20"
    },
    "807": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "DUP2",
      "path": "20"
    },
    "808": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "DUP2",
      "path": "20"
    },
    "809": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        2006,
        2027
      ],
      "op": "DUP6",
      "path": "20"
    },
    "810": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        1996
      ],
      "op": "DUP9",
      "path": "20"
    },
    "811": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "DUP9",
      "path": "20"
    },
    "812": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "CALL",
      "path": "20"
    },
    "813": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "SWAP4",
      "path": "20"
    },
    "814": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "POP",
      "path": "20"
    },
    "815": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "POP",
      "path": "20"
    },
    "816": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "POP",
      "path": "20"
    },
    "817": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "POP",
      "path": "20"
    },
    "818": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "819": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "DUP1",
      "path": "20"
    },
    "820": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "ISZERO",
      "path": "20"
    },
    "821": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "PUSH2",
      "path": "20",
      "value": "0x306"
    },
    "824": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "JUMPI",
      "path": "20"
    },
    "825": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "826": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "828": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "DUP1",
      "path": "20"
    },
    "829": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "RETURNDATACOPY",
      "path": "20"
    },
    "830": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "RETURNDATASIZE",
      "path": "20"
    },
    "831": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "PUSH1",
      "path": "20",
      "value": "0x0"
    },
    "833": {
      "fn": "OPFCommunityFeeCollector.withdrawETH",
      "offset": [
        1987,
        2028
      ],
      "op": "REVERT",
      "path": "20"
    },
    "834": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1846,
        2035
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "835": {
      "fn": "Ownable.owner",
      "offset": [
        1019,
        1026
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "837": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "838": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "840": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "842": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "844": {
      "op": "SHL"
    },
    "845": {
      "op": "SUB"
    },
    "846": {
      "fn": "Ownable.owner",
      "offset": [
        1045,
        1051
      ],
      "op": "AND",
      "path": "1"
    },
    "847": {
      "fn": "Context._msgSender",
      "offset": [
        665,
        675
      ],
      "op": "CALLER",
      "path": "9"
    },
    "848": {
      "offset": [
        1185,
        1208
      ],
      "op": "EQ",
      "path": "1"
    },
    "849": {
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x36C"
    },
    "852": {
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "853": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "855": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "856": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "860": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "862": {
      "op": "SHL"
    },
    "863": {
      "offset": [
        1177,
        1245
      ],
      "op": "DUP2",
      "path": "1"
    },
    "864": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "865": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "867": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "ADD",
      "path": "1"
    },
    "868": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x132"
    },
    "871": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "872": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6FB"
    },
    "875": {
      "fn": "Context._msgSender",
      "jump": "i",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMP",
      "path": "1"
    },
    "876": {
      "fn": "Context._msgSender",
      "offset": [
        1177,
        1245
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "877": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "879": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "881": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "883": {
      "op": "SHL"
    },
    "884": {
      "op": "SUB"
    },
    "885": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1934,
        1956
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 8
    },
    "886": {
      "branch": 25,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1934,
        1956
      ],
      "op": "AND",
      "path": "1"
    },
    "887": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3D1"
    },
    "890": {
      "branch": 25,
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "891": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "893": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "894": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "898": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "900": {
      "op": "SHL"
    },
    "901": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "DUP2",
      "path": "1"
    },
    "902": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "903": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "905": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "907": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "DUP3",
      "path": "1"
    },
    "908": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "ADD",
      "path": "1"
    },
    "909": {
      "op": "MSTORE"
    },
    "910": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "912": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "914": {
      "op": "DUP3"
    },
    "915": {
      "op": "ADD"
    },
    "916": {
      "op": "MSTORE"
    },
    "917": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
    },
    "950": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "952": {
      "op": "DUP3"
    },
    "953": {
      "op": "ADD"
    },
    "954": {
      "op": "MSTORE"
    },
    "955": {
      "op": "PUSH6",
      "value": "0x646472657373"
    },
    "962": {
      "op": "PUSH1",
      "value": "0xD0"
    },
    "964": {
      "op": "SHL"
    },
    "965": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "967": {
      "op": "DUP3"
    },
    "968": {
      "op": "ADD"
    },
    "969": {
      "op": "MSTORE"
    },
    "970": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "972": {
      "op": "ADD"
    },
    "973": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x132"
    },
    "976": {
      "op": "JUMP"
    },
    "977": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        1926,
        1999
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "978": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2009,
        2028
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 9,
      "value": "0x306"
    },
    "981": {
      "fn": "Ownable.transferOwnership",
      "offset": [
        2019,
        2027
      ],
      "op": "DUP2",
      "path": "1"
    },
    "982": {
      "fn": "Ownable._setOwner",
      "offset": [
        2041,
        2210
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "983": {
      "fn": "Ownable._setOwner",
      "offset": [
        2096,
        2112
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "985": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "DUP1",
      "path": "1"
    },
    "986": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "987": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "989": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "991": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "993": {
      "op": "SHL"
    },
    "994": {
      "op": "SUB"
    },
    "995": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 10
    },
    "996": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP2",
      "path": "1"
    },
    "997": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "AND",
      "path": "1"
    },
    "998": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1000": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1002": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1004": {
      "op": "SHL"
    },
    "1005": {
      "op": "SUB"
    },
    "1006": {
      "op": "NOT"
    },
    "1007": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1008": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "AND",
      "path": "1"
    },
    "1009": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1010": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "OR",
      "path": "1"
    },
    "1011": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1012": {
      "fn": "Ownable._setOwner",
      "offset": [
        2131,
        2148
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1013": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 11,
      "value": "0x40"
    },
    "1015": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1016": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1017": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1018": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1019": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "AND",
      "path": "1"
    },
    "1020": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1021": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1022": {
      "fn": "Ownable._setOwner",
      "offset": [
        2115,
        2121
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1023": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
    },
    "1056": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1057": {
      "fn": "Ownable._setOwner",
      "offset": [
        2096,
        2112
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1058": {
      "fn": "Ownable._setOwner",
      "offset": [
        2163,
        2203
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1059": {
      "fn": "Ownable._setOwner",
      "offset": [
        2086,
        2210
      ],
      "op": "POP",
      "path": "1"
    },
    "1060": {
      "fn": "Ownable._setOwner",
      "offset": [
        2041,
        2210
      ],
      "op": "POP",
      "path": "1"
    },
    "1061": {
      "fn": "Ownable._setOwner",
      "jump": "o",
      "offset": [
        2041,
        2210
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1062": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        640,
        845
      ],
      "op": "JUMPDEST",
      "path": "62"
    },
    "1063": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "PUSH1",
      "path": "62",
      "statement": 12,
      "value": "0x40"
    },
    "1065": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1066": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1071": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1073": {
      "op": "SHL"
    },
    "1074": {
      "op": "SUB"
    },
    "1075": {
      "op": "DUP5"
    },
    "1076": {
      "op": "AND"
    },
    "1077": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x24"
    },
    "1079": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP3",
      "path": "62"
    },
    "1080": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "ADD",
      "path": "62"
    },
    "1081": {
      "op": "MSTORE"
    },
    "1082": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1084": {
      "op": "DUP1"
    },
    "1085": {
      "op": "DUP3"
    },
    "1086": {
      "op": "ADD"
    },
    "1087": {
      "op": "DUP5"
    },
    "1088": {
      "op": "SWAP1"
    },
    "1089": {
      "op": "MSTORE"
    },
    "1090": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP3",
      "path": "62"
    },
    "1091": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1092": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1093": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP4",
      "path": "62"
    },
    "1094": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "SUB",
      "path": "62"
    },
    "1095": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1096": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "SWAP2",
      "path": "62"
    },
    "1097": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "ADD",
      "path": "62"
    },
    "1098": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP2",
      "path": "62"
    },
    "1099": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1102": {
      "op": "SWAP1"
    },
    "1103": {
      "op": "SWAP2"
    },
    "1104": {
      "op": "ADD"
    },
    "1105": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1106": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "SWAP2",
      "path": "62"
    },
    "1107": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1108": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x20"
    },
    "1110": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP2",
      "path": "62"
    },
    "1111": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "ADD",
      "path": "62"
    },
    "1112": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1113": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1118": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1120": {
      "op": "SHL"
    },
    "1121": {
      "op": "SUB"
    },
    "1122": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "AND",
      "path": "62"
    },
    "1123": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1128": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1130": {
      "op": "SHL"
    },
    "1131": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "OR",
      "path": "62"
    },
    "1132": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1133": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        779,
        837
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1134": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        752,
        838
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x478"
    },
    "1137": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        752,
        838
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1138": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        772,
        777
      ],
      "op": "DUP5",
      "path": "62"
    },
    "1139": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        772,
        777
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1140": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        752,
        771
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x47D"
    },
    "1143": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "i",
      "offset": [
        752,
        838
      ],
      "op": "JUMP",
      "path": "62"
    },
    "1144": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        752,
        838
      ],
      "op": "JUMPDEST",
      "path": "62"
    },
    "1145": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        640,
        845
      ],
      "op": "POP",
      "path": "62"
    },
    "1146": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        640,
        845
      ],
      "op": "POP",
      "path": "62"
    },
    "1147": {
      "fn": "SafeERC20.safeTransfer",
      "offset": [
        640,
        845
      ],
      "op": "POP",
      "path": "62"
    },
    "1148": {
      "fn": "SafeERC20.safeTransfer",
      "jump": "o",
      "offset": [
        640,
        845
      ],
      "op": "JUMP",
      "path": "62"
    },
    "1149": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3146,
        3852
      ],
      "op": "JUMPDEST",
      "path": "62"
    },
    "1150": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3565,
        3588
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x0"
    },
    "1152": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x4D2"
    },
    "1155": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3619,
        3623
      ],
      "op": "DUP3",
      "path": "62"
    },
    "1156": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x40"
    },
    "1158": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1159": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1160": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x40"
    },
    "1162": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "ADD",
      "path": "62"
    },
    "1163": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x40"
    },
    "1165": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1166": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1167": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x20"
    },
    "1169": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "DUP2",
      "path": "62"
    },
    "1170": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1171": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x20"
    },
    "1173": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "ADD",
      "path": "62"
    },
    "1174": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH32",
      "path": "62",
      "value": "0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
    },
    "1207": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "DUP2",
      "path": "62"
    },
    "1208": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1209": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "POP",
      "path": "62"
    },
    "1210": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3599,
        3604
      ],
      "op": "DUP6",
      "path": "62"
    },
    "1211": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1213": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1215": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1217": {
      "op": "SHL"
    },
    "1218": {
      "op": "SUB"
    },
    "1219": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3618
      ],
      "op": "AND",
      "path": "62"
    },
    "1220": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3618
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x54F"
    },
    "1223": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3618
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1224": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "SWAP3",
      "path": "62"
    },
    "1225": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "SWAP2",
      "path": "62"
    },
    "1226": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1227": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "PUSH4",
      "path": "62",
      "value": "0xFFFFFFFF"
    },
    "1232": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "AND",
      "path": "62"
    },
    "1233": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3591,
        3660
      ],
      "op": "JUMP",
      "path": "62"
    },
    "1234": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3591,
        3660
      ],
      "op": "JUMPDEST",
      "path": "62"
    },
    "1235": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3674,
        3691
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1236": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3674,
        3691
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1237": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3565,
        3660
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1238": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3565,
        3660
      ],
      "op": "SWAP2",
      "path": "62"
    },
    "1239": {
      "op": "POP"
    },
    "1240": {
      "branch": 26,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3674,
        3695
      ],
      "op": "ISZERO",
      "path": "62"
    },
    "1241": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3670,
        3846
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x478"
    },
    "1244": {
      "branch": 26,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3670,
        3846
      ],
      "op": "JUMPI",
      "path": "62"
    },
    "1245": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3769,
        3779
      ],
      "op": "DUP1",
      "path": "62",
      "statement": 13
    },
    "1246": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "DUP1",
      "path": "62"
    },
    "1247": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x20"
    },
    "1249": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "ADD",
      "path": "62"
    },
    "1250": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1251": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1252": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "DUP2",
      "path": "62"
    },
    "1253": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "ADD",
      "path": "62"
    },
    "1254": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1255": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x4F0"
    },
    "1258": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "SWAP2",
      "path": "62"
    },
    "1259": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "SWAP1",
      "path": "62"
    },
    "1260": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x749"
    },
    "1263": {
      "fn": "SafeERC20._callOptionalReturn",
      "jump": "i",
      "offset": [
        3758,
        3788
      ],
      "op": "JUMP",
      "path": "62"
    },
    "1264": {
      "branch": 27,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3758,
        3788
      ],
      "op": "JUMPDEST",
      "path": "62"
    },
    "1265": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x478"
    },
    "1268": {
      "branch": 27,
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "JUMPI",
      "path": "62"
    },
    "1269": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x40"
    },
    "1271": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "MLOAD",
      "path": "62"
    },
    "1272": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1276": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1278": {
      "op": "SHL"
    },
    "1279": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "DUP2",
      "path": "62"
    },
    "1280": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "MSTORE",
      "path": "62"
    },
    "1281": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1283": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "PUSH1",
      "path": "62",
      "value": "0x4"
    },
    "1285": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "DUP3",
      "path": "62"
    },
    "1286": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "ADD",
      "path": "62"
    },
    "1287": {
      "op": "MSTORE"
    },
    "1288": {
      "op": "PUSH1",
      "value": "0x2A"
    },
    "1290": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1292": {
      "op": "DUP3"
    },
    "1293": {
      "op": "ADD"
    },
    "1294": {
      "op": "MSTORE"
    },
    "1295": {
      "op": "PUSH32",
      "value": "0x5361666545524332303A204552433230206F7065726174696F6E20646964206E"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1330": {
      "op": "DUP3"
    },
    "1331": {
      "op": "ADD"
    },
    "1332": {
      "op": "MSTORE"
    },
    "1333": {
      "op": "PUSH10",
      "value": "0x1BDD081CDD58D8D95959"
    },
    "1344": {
      "op": "PUSH1",
      "value": "0xB2"
    },
    "1346": {
      "op": "SHL"
    },
    "1347": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1349": {
      "op": "DUP3"
    },
    "1350": {
      "op": "ADD"
    },
    "1351": {
      "op": "MSTORE"
    },
    "1352": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1354": {
      "op": "ADD"
    },
    "1355": {
      "fn": "SafeERC20._callOptionalReturn",
      "offset": [
        3750,
        3835
      ],
      "op": "PUSH2",
      "path": "62",
      "value": "0x132"
    },
    "1358": {
      "op": "JUMP"
    },
    "1359": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1360": {
      "fn": "Address.functionCall",
      "offset": [
        3699,
        3711
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x60"
    },
    "1362": {
      "fn": "Address.functionCall",
      "offset": [
        3730,
        3782
      ],
      "op": "PUSH2",
      "path": "47",
      "statement": 14,
      "value": "0x55E"
    },
    "1365": {
      "fn": "Address.functionCall",
      "offset": [
        3752,
        3758
      ],
      "op": "DUP5",
      "path": "47"
    },
    "1366": {
      "fn": "Address.functionCall",
      "offset": [
        3760,
        3764
      ],
      "op": "DUP5",
      "path": "47"
    },
    "1367": {
      "fn": "Address.functionCall",
      "offset": [
        3766,
        3767
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x0"
    },
    "1369": {
      "fn": "Address.functionCall",
      "offset": [
        3769,
        3781
      ],
      "op": "DUP6",
      "path": "47"
    },
    "1370": {
      "fn": "Address.functionCall",
      "offset": [
        3730,
        3751
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x568"
    },
    "1373": {
      "fn": "Address.functionCall",
      "jump": "i",
      "offset": [
        3730,
        3782
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1374": {
      "fn": "Address.functionCall",
      "offset": [
        3730,
        3782
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1375": {
      "fn": "Address.functionCall",
      "offset": [
        3723,
        3782
      ],
      "op": "SWAP1",
      "path": "47"
    },
    "1376": {
      "fn": "Address.functionCall",
      "offset": [
        3723,
        3782
      ],
      "op": "POP",
      "path": "47"
    },
    "1377": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1378": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "SWAP4",
      "path": "47"
    },
    "1379": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "SWAP3",
      "path": "47"
    },
    "1380": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "POP",
      "path": "47"
    },
    "1381": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "POP",
      "path": "47"
    },
    "1382": {
      "fn": "Address.functionCall",
      "offset": [
        3596,
        3789
      ],
      "op": "POP",
      "path": "47"
    },
    "1383": {
      "fn": "Address.functionCall",
      "jump": "o",
      "offset": [
        3596,
        3789
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1384": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4623,
        5146
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1385": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4750,
        4762
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x60"
    },
    "1387": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4807,
        4812
      ],
      "op": "DUP3",
      "path": "47",
      "statement": 15
    },
    "1388": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4782,
        4803
      ],
      "op": "SELFBALANCE",
      "path": "47"
    },
    "1389": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4782,
        4812
      ],
      "op": "LT",
      "path": "47"
    },
    "1390": {
      "branch": 22,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4782,
        4812
      ],
      "op": "ISZERO",
      "path": "47"
    },
    "1391": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x5C9"
    },
    "1394": {
      "branch": 22,
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "JUMPI",
      "path": "47"
    },
    "1395": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1397": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1398": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1402": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1404": {
      "op": "SHL"
    },
    "1405": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "DUP2",
      "path": "47"
    },
    "1406": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "MSTORE",
      "path": "47"
    },
    "1407": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1409": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x4"
    },
    "1411": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1412": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "ADD",
      "path": "47"
    },
    "1413": {
      "op": "MSTORE"
    },
    "1414": {
      "op": "PUSH1",
      "value": "0x26"
    },
    "1416": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1418": {
      "op": "DUP3"
    },
    "1419": {
      "op": "ADD"
    },
    "1420": {
      "op": "MSTORE"
    },
    "1421": {
      "op": "PUSH32",
      "value": "0x416464726573733A20696E73756666696369656E742062616C616E636520666F"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1456": {
      "op": "DUP3"
    },
    "1457": {
      "op": "ADD"
    },
    "1458": {
      "op": "MSTORE"
    },
    "1459": {
      "op": "PUSH6",
      "value": "0x1C8818D85B1B"
    },
    "1466": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "1468": {
      "op": "SHL"
    },
    "1469": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1471": {
      "op": "DUP3"
    },
    "1472": {
      "op": "ADD"
    },
    "1473": {
      "op": "MSTORE"
    },
    "1474": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1476": {
      "op": "ADD"
    },
    "1477": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x132"
    },
    "1480": {
      "op": "JUMP"
    },
    "1481": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4774,
        4855
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1482": {
      "fn": "Address.isContract",
      "offset": [
        1101,
        1121
      ],
      "op": "DUP5",
      "path": "47"
    },
    "1483": {
      "fn": "Address.isContract",
      "offset": [
        1101,
        1121
      ],
      "op": "EXTCODESIZE",
      "path": "47"
    },
    "1484": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "PUSH2",
      "path": "47",
      "statement": 16,
      "value": "0x617"
    },
    "1487": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "JUMPI",
      "path": "47"
    },
    "1488": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1490": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1491": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1495": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1497": {
      "op": "SHL"
    },
    "1498": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "DUP2",
      "path": "47"
    },
    "1499": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "MSTORE",
      "path": "47"
    },
    "1500": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1502": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x4"
    },
    "1504": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1505": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "ADD",
      "path": "47"
    },
    "1506": {
      "op": "MSTORE"
    },
    "1507": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "1509": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1511": {
      "op": "DUP3"
    },
    "1512": {
      "op": "ADD"
    },
    "1513": {
      "op": "MSTORE"
    },
    "1514": {
      "op": "PUSH32",
      "value": "0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1549": {
      "op": "DUP3"
    },
    "1550": {
      "op": "ADD"
    },
    "1551": {
      "op": "MSTORE"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1554": {
      "op": "ADD"
    },
    "1555": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x132"
    },
    "1558": {
      "op": "JUMP"
    },
    "1559": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4865,
        4925
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1560": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4996,
        5008
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x0"
    },
    "1562": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5010,
        5033
      ],
      "op": "DUP1",
      "path": "47"
    },
    "1563": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5043
      ],
      "op": "DUP7",
      "path": "47"
    },
    "1564": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1566": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1568": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1570": {
      "op": "SHL"
    },
    "1571": {
      "op": "SUB"
    },
    "1572": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5048
      ],
      "op": "AND",
      "path": "47"
    },
    "1573": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5057,
        5062
      ],
      "op": "DUP6",
      "path": "47"
    },
    "1574": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5065,
        5069
      ],
      "op": "DUP8",
      "path": "47"
    },
    "1575": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1577": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1578": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x633"
    },
    "1581": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "SWAP2",
      "path": "47"
    },
    "1582": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "SWAP1",
      "path": "47"
    },
    "1583": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x79B"
    },
    "1586": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5037,
        5070
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1587": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1588": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x0"
    },
    "1590": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1592": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1593": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP1",
      "path": "47"
    },
    "1594": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP4",
      "path": "47"
    },
    "1595": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "SUB",
      "path": "47"
    },
    "1596": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP2",
      "path": "47"
    },
    "1597": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP6",
      "path": "47"
    },
    "1598": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP8",
      "path": "47"
    },
    "1599": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "GAS",
      "path": "47"
    },
    "1600": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "CALL",
      "path": "47"
    },
    "1601": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "SWAP3",
      "path": "47"
    },
    "1602": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1603": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1604": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1605": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "RETURNDATASIZE",
      "path": "47"
    },
    "1606": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP1",
      "path": "47"
    },
    "1607": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x0"
    },
    "1609": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP2",
      "path": "47"
    },
    "1610": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "EQ",
      "path": "47"
    },
    "1611": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x670"
    },
    "1614": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "JUMPI",
      "path": "47"
    },
    "1615": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1617": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1618": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "SWAP2",
      "path": "47"
    },
    "1619": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1620": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x1F"
    },
    "1622": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "NOT",
      "path": "47"
    },
    "1623": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x3F"
    },
    "1625": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "RETURNDATASIZE",
      "path": "47"
    },
    "1626": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "ADD",
      "path": "47"
    },
    "1627": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "AND",
      "path": "47"
    },
    "1628": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1629": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "ADD",
      "path": "47"
    },
    "1630": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1632": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "MSTORE",
      "path": "47"
    },
    "1633": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "RETURNDATASIZE",
      "path": "47"
    },
    "1634": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1635": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "MSTORE",
      "path": "47"
    },
    "1636": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "RETURNDATASIZE",
      "path": "47"
    },
    "1637": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x0"
    },
    "1639": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x20"
    },
    "1641": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "DUP5",
      "path": "47"
    },
    "1642": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "ADD",
      "path": "47"
    },
    "1643": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "RETURNDATACOPY",
      "path": "47"
    },
    "1644": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x675"
    },
    "1647": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1648": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1649": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x60"
    },
    "1651": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "SWAP2",
      "path": "47"
    },
    "1652": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1653": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1654": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5037,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1655": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4995,
        5070
      ],
      "op": "SWAP2",
      "path": "47"
    },
    "1656": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4995,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1657": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4995,
        5070
      ],
      "op": "SWAP2",
      "path": "47"
    },
    "1658": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4995,
        5070
      ],
      "op": "POP",
      "path": "47"
    },
    "1659": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5087,
        5139
      ],
      "op": "PUSH2",
      "path": "47",
      "statement": 17,
      "value": "0x685"
    },
    "1662": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5105,
        5112
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1663": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5114,
        5124
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1664": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5126,
        5138
      ],
      "op": "DUP7",
      "path": "47"
    },
    "1665": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5087,
        5104
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x690"
    },
    "1668": {
      "fn": "Address.functionCallWithValue",
      "jump": "i",
      "offset": [
        5087,
        5139
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1669": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5087,
        5139
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1670": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        5080,
        5139
      ],
      "op": "SWAP8",
      "path": "47"
    },
    "1671": {
      "fn": "Address.functionCallWithValue",
      "offset": [
        4623,
        5146
      ],
      "op": "SWAP7",
      "path": "47"
    },
    "1672": {
      "op": "POP"
    },
    "1673": {
      "op": "POP"
    },
    "1674": {
      "op": "POP"
    },
    "1675": {
      "op": "POP"
    },
    "1676": {
      "op": "POP"
    },
    "1677": {
      "op": "POP"
    },
    "1678": {
      "op": "POP"
    },
    "1679": {
      "fn": "Address.functionCallWithValue",
      "jump": "o",
      "offset": [
        4623,
        5146
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1680": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7106,
        7831
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1681": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7221,
        7233
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x60"
    },
    "1683": {
      "branch": 23,
      "fn": "Address._verifyCallResult",
      "offset": [
        7249,
        7256
      ],
      "op": "DUP4",
      "path": "47"
    },
    "1684": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7245,
        7825
      ],
      "op": "ISZERO",
      "path": "47"
    },
    "1685": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7245,
        7825
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x69F"
    },
    "1688": {
      "branch": 23,
      "fn": "Address._verifyCallResult",
      "offset": [
        7245,
        7825
      ],
      "op": "JUMPI",
      "path": "47"
    },
    "1689": {
      "op": "POP"
    },
    "1690": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7279,
        7289
      ],
      "op": "DUP2",
      "path": "47",
      "statement": 18
    },
    "1691": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7272,
        7289
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x561"
    },
    "1694": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7272,
        7289
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1695": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7245,
        7825
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1696": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7390,
        7407
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1697": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7390,
        7407
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1698": {
      "branch": 24,
      "fn": "Address._verifyCallResult",
      "offset": [
        7390,
        7411
      ],
      "op": "ISZERO",
      "path": "47"
    },
    "1699": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7386,
        7815
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x6AF"
    },
    "1702": {
      "branch": 24,
      "fn": "Address._verifyCallResult",
      "offset": [
        7386,
        7815
      ],
      "op": "JUMPI",
      "path": "47"
    },
    "1703": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7648,
        7658
      ],
      "op": "DUP3",
      "path": "47"
    },
    "1704": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7642,
        7659
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1705": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7708,
        7723
      ],
      "op": "DUP1",
      "path": "47"
    },
    "1706": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7695,
        7705
      ],
      "op": "DUP5",
      "path": "47"
    },
    "1707": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7691,
        7693
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x20"
    },
    "1709": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7687,
        7706
      ],
      "op": "ADD",
      "path": "47"
    },
    "1710": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7680,
        7724
      ],
      "op": "REVERT",
      "path": "47"
    },
    "1711": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7386,
        7815
      ],
      "op": "JUMPDEST",
      "path": "47"
    },
    "1712": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7787,
        7799
      ],
      "op": "DUP2",
      "path": "47",
      "statement": 19
    },
    "1713": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x40"
    },
    "1715": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "MLOAD",
      "path": "47"
    },
    "1716": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1720": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1722": {
      "op": "SHL"
    },
    "1723": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "DUP2",
      "path": "47"
    },
    "1724": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "MSTORE",
      "path": "47"
    },
    "1725": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "PUSH1",
      "path": "47",
      "value": "0x4"
    },
    "1727": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "ADD",
      "path": "47"
    },
    "1728": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x132"
    },
    "1731": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "SWAP2",
      "path": "47"
    },
    "1732": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "SWAP1",
      "path": "47"
    },
    "1733": {
      "fn": "Address._verifyCallResult",
      "offset": [
        7780,
        7800
      ],
      "op": "PUSH2",
      "path": "47",
      "value": "0x7B7"
    },
    "1736": {
      "fn": "Address._verifyCallResult",
      "jump": "i",
      "offset": [
        7780,
        7800
      ],
      "op": "JUMP",
      "path": "47"
    },
    "1737": {
      "op": "JUMPDEST"
    },
    "1738": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1740": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1742": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1744": {
      "op": "SHL"
    },
    "1745": {
      "op": "SUB"
    },
    "1746": {
      "op": "DUP2"
    },
    "1747": {
      "op": "AND"
    },
    "1748": {
      "op": "DUP2"
    },
    "1749": {
      "op": "EQ"
    },
    "1750": {
      "op": "PUSH2",
      "value": "0x306"
    },
    "1753": {
      "op": "JUMPI"
    },
    "1754": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1756": {
      "op": "DUP1"
    },
    "1757": {
      "op": "REVERT"
    },
    "1758": {
      "op": "JUMPDEST"
    },
    "1759": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1761": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1763": {
      "op": "DUP3"
    },
    "1764": {
      "op": "DUP5"
    },
    "1765": {
      "op": "SUB"
    },
    "1766": {
      "op": "SLT"
    },
    "1767": {
      "op": "ISZERO"
    },
    "1768": {
      "op": "PUSH2",
      "value": "0x6F0"
    },
    "1771": {
      "op": "JUMPI"
    },
    "1772": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1774": {
      "op": "DUP1"
    },
    "1775": {
      "op": "REVERT"
    },
    "1776": {
      "op": "JUMPDEST"
    },
    "1777": {
      "op": "DUP2"
    },
    "1778": {
      "op": "CALLDATALOAD"
    },
    "1779": {
      "op": "PUSH2",
      "value": "0x561"
    },
    "1782": {
      "op": "DUP2"
    },
    "1783": {
      "op": "PUSH2",
      "value": "0x6C9"
    },
    "1786": {
      "jump": "i",
      "op": "JUMP"
    },
    "1787": {
      "op": "JUMPDEST"
    },
    "1788": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1790": {
      "op": "DUP1"
    },
    "1791": {
      "op": "DUP3"
    },
    "1792": {
      "op": "MSTORE"
    },
    "1793": {
      "op": "DUP2"
    },
    "1794": {
      "op": "DUP2"
    },
    "1795": {
      "op": "ADD"
    },
    "1796": {
      "op": "MSTORE"
    },
    "1797": {
      "op": "PUSH32",
      "value": "0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
    },
    "1830": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1832": {
      "op": "DUP3"
    },
    "1833": {
      "op": "ADD"
    },
    "1834": {
      "op": "MSTORE"
    },
    "1835": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1837": {
      "op": "ADD"
    },
    "1838": {
      "op": "SWAP1"
    },
    "1839": {
      "jump": "o",
      "op": "JUMP"
    },
    "1840": {
      "op": "JUMPDEST"
    },
    "1841": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1845": {
      "op": "DUP3"
    },
    "1846": {
      "op": "DUP5"
    },
    "1847": {
      "op": "SUB"
    },
    "1848": {
      "op": "SLT"
    },
    "1849": {
      "op": "ISZERO"
    },
    "1850": {
      "op": "PUSH2",
      "value": "0x742"
    },
    "1853": {
      "op": "JUMPI"
    },
    "1854": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1856": {
      "op": "DUP1"
    },
    "1857": {
      "op": "REVERT"
    },
    "1858": {
      "op": "JUMPDEST"
    },
    "1859": {
      "op": "POP"
    },
    "1860": {
      "op": "MLOAD"
    },
    "1861": {
      "op": "SWAP2"
    },
    "1862": {
      "op": "SWAP1"
    },
    "1863": {
      "op": "POP"
    },
    "1864": {
      "jump": "o",
      "op": "JUMP"
    },
    "1865": {
      "op": "JUMPDEST"
    },
    "1866": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1868": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1870": {
      "op": "DUP3"
    },
    "1871": {
      "op": "DUP5"
    },
    "1872": {
      "op": "SUB"
    },
    "1873": {
      "op": "SLT"
    },
    "1874": {
      "op": "ISZERO"
    },
    "1875": {
      "op": "PUSH2",
      "value": "0x75B"
    },
    "1878": {
      "op": "JUMPI"
    },
    "1879": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1881": {
      "op": "DUP1"
    },
    "1882": {
      "op": "REVERT"
    },
    "1883": {
      "op": "JUMPDEST"
    },
    "1884": {
      "op": "DUP2"
    },
    "1885": {
      "op": "MLOAD"
    },
    "1886": {
      "op": "DUP1"
    },
    "1887": {
      "op": "ISZERO"
    },
    "1888": {
      "op": "ISZERO"
    },
    "1889": {
      "op": "DUP2"
    },
    "1890": {
      "op": "EQ"
    },
    "1891": {
      "op": "PUSH2",
      "value": "0x561"
    },
    "1894": {
      "op": "JUMPI"
    },
    "1895": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1897": {
      "op": "DUP1"
    },
    "1898": {
      "op": "REVERT"
    },
    "1899": {
      "op": "JUMPDEST"
    },
    "1900": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1902": {
      "op": "JUMPDEST"
    },
    "1903": {
      "op": "DUP4"
    },
    "1904": {
      "op": "DUP2"
    },
    "1905": {
      "op": "LT"
    },
    "1906": {
      "op": "ISZERO"
    },
    "1907": {
      "op": "PUSH2",
      "value": "0x786"
    },
    "1910": {
      "op": "JUMPI"
    },
    "1911": {
      "op": "DUP2"
    },
    "1912": {
      "op": "DUP2"
    },
    "1913": {
      "op": "ADD"
    },
    "1914": {
      "op": "MLOAD"
    },
    "1915": {
      "op": "DUP4"
    },
    "1916": {
      "op": "DUP3"
    },
    "1917": {
      "op": "ADD"
    },
    "1918": {
      "op": "MSTORE"
    },
    "1919": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1921": {
      "op": "ADD"
    },
    "1922": {
      "op": "PUSH2",
      "value": "0x76E"
    },
    "1925": {
      "op": "JUMP"
    },
    "1926": {
      "op": "JUMPDEST"
    },
    "1927": {
      "op": "DUP4"
    },
    "1928": {
      "op": "DUP2"
    },
    "1929": {
      "op": "GT"
    },
    "1930": {
      "op": "ISZERO"
    },
    "1931": {
      "op": "PUSH2",
      "value": "0x795"
    },
    "1934": {
      "op": "JUMPI"
    },
    "1935": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1937": {
      "op": "DUP5"
    },
    "1938": {
      "op": "DUP5"
    },
    "1939": {
      "op": "ADD"
    },
    "1940": {
      "op": "MSTORE"
    },
    "1941": {
      "op": "JUMPDEST"
    },
    "1942": {
      "op": "POP"
    },
    "1943": {
      "op": "POP"
    },
    "1944": {
      "op": "POP"
    },
    "1945": {
      "op": "POP"
    },
    "1946": {
      "jump": "o",
      "op": "JUMP"
    },
    "1947": {
      "op": "JUMPDEST"
    },
    "1948": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1950": {
      "op": "DUP3"
    },
    "1951": {
      "op": "MLOAD"
    },
    "1952": {
      "op": "PUSH2",
      "value": "0x7AD"
    },
    "1955": {
      "op": "DUP2"
    },
    "1956": {
      "op": "DUP5"
    },
    "1957": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1959": {
      "op": "DUP8"
    },
    "1960": {
      "op": "ADD"
    },
    "1961": {
      "op": "PUSH2",
      "value": "0x76B"
    },
    "1964": {
      "jump": "i",
      "op": "JUMP"
    },
    "1965": {
      "op": "JUMPDEST"
    },
    "1966": {
      "op": "SWAP2"
    },
    "1967": {
      "op": "SWAP1"
    },
    "1968": {
      "op": "SWAP2"
    },
    "1969": {
      "op": "ADD"
    },
    "1970": {
      "op": "SWAP3"
    },
    "1971": {
      "op": "SWAP2"
    },
    "1972": {
      "op": "POP"
    },
    "1973": {
      "op": "POP"
    },
    "1974": {
      "jump": "o",
      "op": "JUMP"
    },
    "1975": {
      "op": "JUMPDEST"
    },
    "1976": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1978": {
      "op": "DUP2"
    },
    "1979": {
      "op": "MSTORE"
    },
    "1980": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1982": {
      "op": "DUP3"
    },
    "1983": {
      "op": "MLOAD"
    },
    "1984": {
      "op": "DUP1"
    },
    "1985": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1987": {
      "op": "DUP5"
    },
    "1988": {
      "op": "ADD"
    },
    "1989": {
      "op": "MSTORE"
    },
    "1990": {
      "op": "PUSH2",
      "value": "0x7D6"
    },
    "1993": {
      "op": "DUP2"
    },
    "1994": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1996": {
      "op": "DUP6"
    },
    "1997": {
      "op": "ADD"
    },
    "1998": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2000": {
      "op": "DUP8"
    },
    "2001": {
      "op": "ADD"
    },
    "2002": {
      "op": "PUSH2",
      "value": "0x76B"
    },
    "2005": {
      "jump": "i",
      "op": "JUMP"
    },
    "2006": {
      "op": "JUMPDEST"
    },
    "2007": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2009": {
      "op": "ADD"
    },
    "2010": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2012": {
      "op": "NOT"
    },
    "2013": {
      "op": "AND"
    },
    "2014": {
      "op": "SWAP2"
    },
    "2015": {
      "op": "SWAP1"
    },
    "2016": {
      "op": "SWAP2"
    },
    "2017": {
      "op": "ADD"
    },
    "2018": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2020": {
      "op": "ADD"
    },
    "2021": {
      "op": "SWAP3"
    },
    "2022": {
      "op": "SWAP2"
    },
    "2023": {
      "op": "POP"
    },
    "2024": {
      "op": "POP"
    },
    "2025": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "29a8bacea6b2acbc55a371e99b5b9794a556ec31",
  "source": "pragma solidity 0.8.12;\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n// Code is Apache-2.0 and docs are CC-BY-4.0\nimport '../interfaces/IERC20.sol';\nimport 'OpenZeppelin/openzeppelin-contracts@4.2.0/contracts/access/Ownable.sol';\nimport '../utils/SafeERC20.sol';\n\n\n/**\n * @title OPFCommunityFeeCollector\n * @dev Ocean Protocol Foundation Community Fee Collector contract\n *      allows consumers to pay very small fee as part of the exchange of \n *      datatokens with ocean token in order to support the community of  \n *      ocean protocol and provide a sustainble development.\n */\ncontract OPFCommunityFeeCollector is Ownable {\n    using SafeERC20 for IERC20;\n    address payable private collector;\n    /**\n     * @dev constructor\n     *      Called prior contract deployment. set the controller address and\n     *      the contract owner address\n     * @param newCollector the fee collector address.\n     * @param OPFOwnerAddress the contract owner address\n     */\n    constructor(\n        address payable newCollector,\n        address OPFOwnerAddress\n    ) \n        Ownable()\n    {\n        require(\n            newCollector != address(0)&&\n            OPFOwnerAddress != address(0), \n            'OPFCommunityFeeCollector: collector address or owner is invalid address'\n        );\n        collector = newCollector;\n        transferOwnership(OPFOwnerAddress);\n    }\n    /**\n     * @dev fallback function\n     *      this is a default fallback function in which receives\n     *      the collected ether.\n     */\n    fallback() external payable {}\n\n    /**\n     * @dev receive function\n     *      this is a default receive function in which receives\n     *      the collected ether.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev withdrawETH\n     *      transfers all the accumlated ether the collector address\n     */\n    function withdrawETH() \n        external \n        payable\n    {\n        collector.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev withdrawToken\n     *      transfers all the accumlated tokens the collector address\n     * @param tokenAddress the token contract address \n     */\n    function withdrawToken(\n        address tokenAddress\n    ) \n        external\n    {\n        require(\n            tokenAddress != address(0),\n            'OPFCommunityFeeCollector: invalid token contract address'\n        );\n\n            IERC20(tokenAddress).safeTransfer(\n                collector,\n                IERC20(tokenAddress).balanceOf(address(this))\n            );\n    }\n\n    /**\n     * @dev changeCollector\n     *      change the current collector address. Only owner can do that.\n     * @param newCollector the new collector address \n     */\n    function changeCollector(\n        address payable newCollector\n    ) \n        external \n        onlyOwner \n    {\n        require(\n            newCollector != address(0),\n            'OPFCommunityFeeCollector: invalid collector address'\n        );\n        collector = newCollector;\n    }\n}",
  "sourceMap": "657:2396:20:-:0;;;1046:396;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;867:23:1;665:10:9;867:9:1;:23::i;:::-;-1:-1:-1;;;;;1189:26:20;::::1;::::0;;::::1;::::0;:70:::1;;-1:-1:-1::0;;;;;;1230:29:20;::::1;::::0;::::1;1189:70;1168:189;;;::::0;-1:-1:-1;;;1168:189:20;;774:2:75;1168:189:20::1;::::0;::::1;756:21:75::0;813:2;793:18;;;786:30;852:34;832:18;;;825:62;923:34;903:18;;;896:62;-1:-1:-1;;;974:19:75;;;967:38;1022:19;;1168:189:20::1;;;;;;;;;1367:9;:24:::0;;-1:-1:-1;;;;;;1367:24:20::1;-1:-1:-1::0;;;;;1367:24:20;::::1;;::::0;;1401:34:::1;1419:15:::0;1401:17:::1;:34::i;:::-;1046:396:::0;;657:2396;;2041:169:1;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:1;;;-1:-1:-1;;;;;;2131:17:1;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2086:124;2041:169;:::o;1846:189::-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:1;665:10:9;1185:23:1;1177:68;;;;-1:-1:-1;;;1177:68:1;;1254:2:75;1177:68:1;;;1236:21:75;;;1273:18;;;1266:30;1332:34;1312:18;;;1305:62;1384:18;;1177:68:1;1052:356:75;1177:68:1;-1:-1:-1;;;;;1934:22:1;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:1;;1615:2:75;1926:73:1::1;::::0;::::1;1597:21:75::0;1654:2;1634:18;;;1627:30;1693:34;1673:18;;;1666:62;-1:-1:-1;;;1744:18:75;;;1737:36;1790:19;;1926:73:1::1;1413:402:75::0;1926:73:1::1;2009:19;2019:8:::0;2009:9:::1;:19::i;:::-;1846:189:::0;:::o;14:139:75:-;-1:-1:-1;;;;;97:31:75;;87:42;;77:70;;143:1;140;133:12;158:409;245:6;253;306:2;294:9;285:7;281:23;277:32;274:52;;;322:1;319;312:12;274:52;354:9;348:16;373:39;406:5;373:39;:::i;:::-;481:2;466:18;;460:25;431:5;;-1:-1:-1;494:41:75;460:25;494:41;:::i;:::-;554:7;544:17;;;158:409;;;;;:::o;1413:402::-;657:2396:20;;;;;;",
  "sourcePath": "contracts/oceanv4/communityFee/OPFCommunityFeeCollector.sol",
  "type": "contract"
}